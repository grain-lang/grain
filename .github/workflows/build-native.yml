# This workflow exists to provide a way to dispatch a CI run for any
# given ref on any of our OS targets. It can also be consumed in our
# various other builds.
name: (native) Build and test

on:
  workflow_dispatch:
    inputs:
      os:
        description: "Operating system to run CI on"
        type: choice
        required: true
        default: "ubuntu-latest"
        options:
          - ubuntu-latest
          - macos-latest
          - windows-latest
      ref:
        description: "Git reference to checkout"
        type: string
        required: false
  workflow_call:
    inputs:
      os:
        description: "Operating system to run CI on"
        type: string
        required: true
      ref:
        description: "Git reference to checkout"
        type: string
        required: false

jobs:
  build:
    name: (native) Build and test
    runs-on: ${{ inputs.os }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Setup node.js
        uses: actions/setup-node@v3.6.0
        with:
          node-version: "16"
          check-latest: true
          cache: "npm"

      - name: Install npm dependencies
        run: |
          npm ci

      - name: Esy cache
        id: esy-cache
        uses: actions/cache/restore@v3
        with:
          path: compiler/_export
          key: ${{ runner.os }}-esy-${{ hashFiles('compiler/esy.lock/index.json') }}

      - name: Esy setup
        # Don't crash the run if esy cache import fails - mostly happens on Windows
        continue-on-error: true
        run: |
          npm run compiler prepare
          npm run compiler import-dependencies

      - name: Build compiler
        run: |
          npm run compiler build

      # Upload the artifacts before we run the tests so we
      # can download to debug if tests fail in a weird way
      - name: Upload native compiler artifacts
        uses: actions/upload-artifact@v3
        with:
          name: native-build-artifacts-${{ runner.os }}-${{ runner.arch }}
          path: cli/bin/*.exe

      - name: Run tests
        run: |
          npm run compiler test

      - name: (compiler) Check parser error messages exhaustiveness
        run: |
          npm run compiler parser:check-errors

      - name: (graindoc) Check parser error messages exhaustiveness
        run: |
          npm run compiler graindoc-parser:check-errors

      # Check formatting last because building is more important
      - name: (compiler) Check formatting
        if: inputs.os != 'windows-latest'
        run: |
          npm run compiler check-format

      - name: (js-runner) Check formatting
        if: inputs.os != 'windows-latest'
        run: |
          npm run js-runner check-format

      - name: (cli) Check formatting
        if: inputs.os != 'windows-latest'
        run: |
          npm run cli check-format

      # This is to test the CLI is working
      - name: Log Grain version
        run: |
          grain -v

      # If we have a working grain CLI, we can run graindoc on stdlib
      - name: (stdlib) Check documentation
        if: inputs.os != 'windows-latest'
        run: |
          grain doc stdlib -o stdlib --current-version=$(grain -v)
          git diff --exit-code --name-only

      # If we have a working grain CLI, we can run grainfmt on stdlib & tests
      - name: (stdlib) Check formatting
        if: inputs.os != 'windows-latest'
        run: |
          grain format stdlib -o stdlib
          grain format compiler/test/stdlib -o compiler/test/stdlib
          git diff --exit-code --name-only

      # This is to test that we didn't actually introduce multivalue
      # which might happen through a binaryen optimization
      - name: Run NEAR smoketest
        if: inputs.os != 'windows-latest'
        run: |
          npm run stdlib clean
          npm run cli test
