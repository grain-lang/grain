import String from "string"
import Array from "array"
import Option from "option"
import { naiveParseInt } from "../utils"

import { data } from "./data"

export enum Instructions {
  MoveNorth(Number),
  MoveSouth(Number),
  MoveEast(Number),
  MoveWest(Number),
  TurnLeft(Number),
  TurnRight(Number),
  MoveForward(Number),
}

export enum Ship {
  // east/west, north/south, facing degrees
  Ship(Number, Number, Number)
}
// TODO: This will be in the stdlib soon
let abs = (val) => {
  if (val < 0) {
    val * -1
  } else {
    val
  }
}

let instructions = Array.map(instruct => {
  let len = String.length(instruct);
  let num = Option.expect("Expected a number", naiveParseInt(String.slice(1, len, instruct)));
  match (String.slice(0, 1, instruct)) {
    "N" => MoveNorth(num),
    "S" => MoveSouth(num),
    "E" => MoveEast(num),
    "W" => MoveWest(num),
    "L" => TurnLeft(num),
    "R" => TurnRight(num),
    "F" => MoveForward(num),
    x => fail "Can't process instruction: " ++ x
  }
}, String.split("\n", data))

let ship = Array.reduce((ship, instruct) => {
  match ((ship, instruct)) {
    (Ship(ew, ns, facing), MoveNorth(amount)) => Ship(ew, ns + amount, facing),
    (Ship(ew, ns, facing), MoveSouth(amount)) => Ship(ew, ns - amount, facing),
    (Ship(ew, ns, facing), MoveEast(amount)) => Ship(ew + amount, ns, facing),
    (Ship(ew, ns, facing), MoveWest(amount)) => Ship(ew - amount, ns, facing),
    (Ship(ew, ns, facing), TurnLeft(amount)) => Ship(ew, ns, abs(360 + facing - amount) % 360),
    (Ship(ew, ns, facing), TurnRight(amount)) => Ship(ew, ns, abs(360 + facing + amount) % 360),
    // We assume degrees are on 0/90/180/270 exactly
    // North
    (Ship(ew, ns, 0), MoveForward(amount)) => Ship(ew, ns + amount, 0),
    // East
    (Ship(ew, ns, 90), MoveForward(amount)) => Ship(ew + amount, ns, 90),
    // South
    (Ship(ew, ns, 180), MoveForward(amount)) => Ship(ew, ns - amount, 180),
    // West
    (Ship(ew, ns, 270), MoveForward(amount)) => Ship(ew - amount, ns, 270),
    _ => fail "Shouldn't happen"
  }
}, Ship(0, 0, 90), instructions)

let manhattanDist = match (ship) {
  Ship(ew, ns, _) => abs(ew) + abs(ns)
}

print(("Manhatten distance:", manhattanDist))
