module Float64Test

from "float64" include Float64
use Float64.*

// Constants Tests
// smoke test:
assert infinity > 100000000.0d
// test infinity-specific semantics:
use Pervasives.{ (-) as numberSub }
assert toNumber(infinity) == numberSub(toNumber(infinity), 1)
assert nan != nan

assert pi == 3.141592653589793d

assert tau == 6.283185307179586d

assert e == 2.718281828459045d
// Operation Tests
// Suppress warnings about using `fromNumber` on constants, since that's what we want to test.
let fromNumber = fromNumber
assert fromNumber(5) == 5.0d
assert fromNumber(0) == 0.0d

assert toNumber(555.0d) == 555
assert toNumber(0.0d) == 0

assert 5.0d > 4.0d
assert 5.0d >= 5.0d
assert 5.0d < 17.0d
assert 5.0d <= 5.0d
assert !(5.0d > 5.0d)
assert !(5.0d >= 22.0d)
assert !(5.0d < -17.0d)
assert !(5.0d <= 4.0d)

// isNaN
assert Float64.isNaN(NaNd)
assert Float64.isNaN(1.0d) == false
assert Float64.isNaN(0.0d) == false
assert Float64.isNaN(-1.0d) == false
assert Float64.isNaN(25.76d) == false
assert Float64.isNaN(-25.00d) == false
assert Float64.isNaN(Infinityd) == false
assert Float64.isNaN(-Infinityd) == false

// isInfinite
assert Float64.isInfinite(Infinityd)
assert Float64.isInfinite(-Infinityd)
assert Float64.isInfinite(NaNd) == false
assert Float64.isInfinite(1.0d) == false
assert Float64.isInfinite(0.0d) == false
assert Float64.isInfinite(-1.0d) == false
assert Float64.isInfinite(25.76d) == false
assert Float64.isInfinite(-25.00d) == false

// min
assert Float64.min(5.0d, 5.0d) == 5.0d
assert Float64.min(5.0d, 6.0d) == 5.0d
assert Float64.min(6.0d, 5.0d) == 5.0d
assert Float64.min(0.5d, 0.25d) == 0.25d
assert Float64.min(Infinityd, 10.0d) == 10.0d
assert Float64.isNaN(Float64.min(NaNd, 10.0d))
assert Float64.isNaN(Float64.min(NaNd, Infinityd))

// max
assert Float64.max(5.0d, 5.0d) == 5.0d
assert Float64.max(6.0d, 5.0d) == 6.0d
assert Float64.max(5.0d, 6.0d) == 6.0d
assert Float64.max(0.5d, 0.2d) == 0.5d
assert Float64.max(Infinityd, 10.0d) == Infinityd
assert Float64.isNaN(Float64.max(NaNd, 10.0d))
assert Float64.isNaN(Float64.max(NaNd, Infinityd))

// abs
assert Float64.abs(-25.5d) == 25.5d
assert Float64.abs(25.5d) == 25.5d
assert Float64.isNaN(Float64.abs(NaNd))
assert Float64.abs(Infinityd) == Infinityd

// neg
assert Float64.neg(-25.5d) == 25.5d
assert Float64.neg(25.5d) == -25.5d
assert Float64.isNaN(-NaNd)
assert Float64.neg(Infinityd) == -Infinityd

// ceil
assert Float64.ceil(-25.5d) == -25.0d
assert Float64.ceil(25.5d) == 26.0d
assert Float64.ceil(25.0d) == 25.0d
assert Float64.isNaN(Float64.ceil(NaNd))
assert Float64.ceil(Infinityd) == Infinityd
// floor
assert Float64.floor(-25.5d) == -26.0d
assert Float64.floor(25.5d) == 25.0d
assert Float64.floor(25.0d) == 25.0d
assert Float64.isNaN(Float64.floor(NaNd))
assert Float64.floor(Infinityd) == Infinityd
// trunc
assert Float64.trunc(-25.5d) == -25.0d
assert Float64.trunc(25.5d) == 25.0d
assert Float64.trunc(25.0d) == 25.0d
assert Float64.isNaN(Float64.trunc(NaNd))
assert Float64.trunc(Infinityd) == Infinityd
// round
assert Float64.round(-25.5d) == -26.0d
assert Float64.round(-25.25d) == -25.0d
assert Float64.round(25.25d) == 25.0d
assert Float64.round(25.5d) == 26.0d
assert Float64.isNaN(Float64.round(NaNd))
assert Float64.round(Infinityd) == Infinityd
// sqrt
assert Float64.sqrt(25.0d) == 5.0d
assert Float64.sqrt(35.0d) == 5.916079783099616d
assert Float64.sqrt(9266609011276477657.0d) == 3044110545.180066d
assert Float64.sqrt(Infinityd) == Infinityd
assert Float64.isNaN(Float64.sqrt(NaNd))
// copySign
assert Float64.copySign(2.0d, 1.0d) == 2.0d
assert Float64.copySign(-2.0d, 1.0d) == 2.0d
assert Float64.copySign(1.0d, 2.0d) == 1.0d
assert Float64.copySign(2.0d, -1.0d) == -2.0d
assert Float64.copySign(1.0d, -2.0d) == -1.0d
assert Float64.copySign(Infinityd, 1.0d) == Infinityd
assert Float64.copySign(Infinityd, -1.0d) == -Infinityd
assert Float64.copySign(1.0d, Infinityd) == 1.0d
assert Float64.copySign(1.0d, -Infinityd) == -1.0d
assert Float64.isNaN(Float64.copySign(NaNd, 1.0d))
assert Float64.isNaN(Float64.copySign(NaNd, -1.0d))
assert Float64.copySign(1.0d, NaNd) == 1.0d
assert Float64.copySign(1.0d, -NaNd) == -1.0d
