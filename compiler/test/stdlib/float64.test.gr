module Float64Test

from "float64" include Float64
use Float64.*

// Constants Tests
// smoke test:
assert infinity > 100000000.0d
// test infinity-specific semantics:
use Pervasives.{ (-) as numberSub }
assert toNumber(infinity) == numberSub(toNumber(infinity), 1)
assert nan != nan

assert pi == 3.141592653589793d

assert tau == 6.283185307179586d

assert e == 2.718281828459045d
// Operation Tests
// Suppress warnings about using `fromNumber` on constants, since that's what we want to test.
let fromNumber = fromNumber
assert fromNumber(5) == 5.0d
assert fromNumber(0) == 0.0d

assert toNumber(555.0d) == 555
assert toNumber(0.0d) == 0

assert 5.0d > 4.0d
assert 5.0d >= 5.0d
assert 5.0d < 17.0d
assert 5.0d <= 5.0d
assert !(5.0d > 5.0d)
assert !(5.0d >= 22.0d)
assert !(5.0d < -17.0d)
assert !(5.0d <= 4.0d)

// isNaN
assert Float64.isNaN(NaNd)
assert Float64.isNaN(1.0d) == false
assert Float64.isNaN(0.0d) == false
assert Float64.isNaN(-1.0d) == false
assert Float64.isNaN(25.76d) == false
assert Float64.isNaN(-25.00d) == false
assert Float64.isNaN(Infinityd) == false
assert Float64.isNaN(-Infinityd) == false

// isInfinite
assert Float64.isInfinite(Infinityd)
assert Float64.isInfinite(-Infinityd)
assert Float64.isInfinite(NaNd) == false
assert Float64.isInfinite(1.0d) == false
assert Float64.isInfinite(0.0d) == false
assert Float64.isInfinite(-1.0d) == false
assert Float64.isInfinite(25.76d) == false
assert Float64.isInfinite(-25.00d) == false

// abs
assert Float64.abs(-25.5d) == 25.5d
assert Float64.abs(25.5d) == 25.5d
assert Float64.isNaN(Float64.abs(NaNd))
assert Float64.abs(Infinityd) == Infinityd

// neg
assert Float64.neg(-25.5d) == 25.5d
assert Float64.neg(25.5d) == -25.5d
assert Float64.isNaN(-NaNd)
assert Float64.neg(Infinityd) == -Infinityd
