import Array from 'array'

let arr = [> 1, 2, 3,]

// Array.get

assert Array.get(1, arr) == 2
assert Array.get(-1, arr) == 3
assert Array.get(-2, arr) == 2
assert Array.get(0, arr) == 1

// Array.set

let arr = [> 1, 2]

Array.set(0, 5, arr)
assert arr[0] == 5
Array.set(-1, 5, arr)
assert arr[1] == 5

// Array.append

let arr1 = [> 1, 2]
let arr2 = [> 3, 4, 5]

assert Array.append(arr1, arr2) == [> 1, 2, 3, 4, 5]
assert Array.append([>], [>]) == [>]
assert Array.append(arr1, [>]) == arr1
assert Array.append([>], arr1) == arr1

// Array.concat

let arr1 = [> 1, 2]
let arr2 = [>]
let arr3 = [> 3, 4, 5]
let arr4 = [> 6, 7, 8, 9]

assert Array.concat([]) == [>]
assert Array.concat([[>]]) == [>]
assert Array.concat([[>], [>]]) == [>]
assert Array.concat([arr3]) == [> 3, 4, 5]
assert Array.concat([arr1, arr2, arr3, arr4]) == [> 1, 2, 3, 4, 5, 6, 7, 8, 9]

// Array.copy

let arr1 = [>]
let arr2 = [> 1, 2]

assert Array.copy(arr1) == arr1
assert !(Array.copy(arr1) is arr1)

assert Array.copy(arr2) == arr2
assert !(Array.copy(arr2) is arr2)

// Array.forEach

let arr1 = [> 1, 2, 3]
let mut sum = 0

let sentinel = (_n) => {
  sum = 42
}

Array.forEach(sentinel, [>])

assert sum == 0

let addToSum = (n) => {
  sum = sum + n
}

Array.forEach(addToSum, arr1)

assert sum == 6

// Array.forEachi

let arr1 = [> 1, 2, 3]
let mut sum = 0

let sentinel = (_n, _i) => {
  sum = 42
}

Array.forEachi(sentinel, [>])

assert sum == 0

let addToSum = (n, i) => {
  sum = sum + (n * i)
}

Array.forEachi(addToSum, arr1)

assert sum == 8

// Array.toList

assert Array.toList([>]) == []
assert Array.toList([> 1, 2, 3]) == [1, 2, 3]

// Array.fromList

assert Array.fromList([]) == [>]
assert Array.fromList([1, 2, 3]) == [> 1, 2, 3]

// Array.map

assert Array.map(incr, [>]) == [>]
assert Array.map(incr, [> 2, 3, 4]) == [> 3, 4, 5]

// Array.mapi

let numbers = [> 2, 3, 4]
let square = (n, i) => n * numbers[i]

assert Array.mapi(square, [>]) == [>]
assert Array.mapi(square, numbers) == [> 4, 9, 16]

// Array.contains

let arr = [> 1, 2, 3]

assert Array.contains(3, arr)
assert !Array.contains(4, arr)

// Array.find

assert Array.find(x => x == 2, arr) == Some(2)
assert Array.find(x => fail "Shoulnd't be called", [>]) == None
assert Array.find(x => false, arr) == None

// Array.findIndex

assert Array.findIndex(x => x == 1, arr) == Some(0)
assert Array.findIndex(x => x == 2, arr) == Some(1)
assert Array.findIndex(x => fail "Shouldn't be called", [>]) == None
assert Array.findIndex(x => false, arr) == None

// Array.fill

let arr = [>]
assert Array.fill(1, arr) == void
assert arr == [>]

let arr = [> 1, 2, 3]
Array.fill(4, arr)
assert arr == [> 4, 4, 4]

// Array.fillRange

let arr = [>]
assert Array.fillRange(0, 0, 0, arr) == void
assert arr == [>]

let arr = [> 1, 2, 3]
Array.fillRange(0, 0, 2, arr)
assert arr == [> 0, 0, 3]

let arr = [> 1, 2, 3, 4, 5]
Array.fillRange(10, 0, 6, arr)
assert arr == [> 10, 10, 10, 10, 10]

let arr = [> 1, 2, 3, 4, 5]
Array.fillRange(10, -4, -2, arr)
assert arr == [> 1, 10, 10, 4, 5]

let arr = [> 1, 2, 3]
Array.fillRange(10, -3, -1, arr)
assert arr == [> 10, 10, 3]

// Array.product

let arrA = [> 1, 2]
let arrB = [> 2, 3, 4]
let arrC = [> 1]
let arrD = [> 2]

assert Array.product(arrA, arrB) == [>(1,2),(1,3),(1,4),(2,2),(2,3),(2,4)]
assert Array.product(arrC, arrB) == [>(1,2),(1,3),(1,4)]
assert Array.product(arrC, arrD) == [>(1,2)]
assert Array.product([>], [>]) == [>]

// Array.count

let arr = [> 1, 2, 3]

assert Array.count(x => x > 0, arr) == 3
assert Array.count(x => x > 0, [>]) == 0
assert Array.count(x => x == 3, arr) == 1

// TODO: test with wrong indexes and assert the exception.

// Array.reduce

assert Array.reduce((acc, x) => acc + x, 0, arr) == 6
assert Array.reduce((acc, x) => fail "Shouldn't be called", 0, [>]) == 0

// Array.flatMap

assert Array.flatMap(x => [> x, x * 2], arr) == [>1, 2, 2, 4, 3, 6]
assert Array.flatMap(x => fail "Shouldn't be called", [>]) == [>]

// Array.every

assert Array.every(x => x < 4, arr) == true
assert Array.every(x => x > 4, arr) == false
assert Array.every(x => fail "Shouldn't be called", [>])

// Array.some

assert Array.some(x => x > 1, arr) == true
assert Array.some(x => x > 4, arr) == false
assert !Array.some(x => fail "Shouldn't be called", [>])
