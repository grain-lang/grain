module BytesTest

include "bytes"
include "int8"
include "uint8"
include "int32"
include "array"
include "string"

// Bytes.empty
assert Bytes.empty == Bytes.empty

// Bytes.length
assert Bytes.length(Bytes.empty) == 0

// Bytes.make
let bytes = Bytes.make(64)
assert Bytes.length(bytes) == 64

// Bytes.setInt8, Bytes.setUint8, Bytes.getInt8, Bytes.getUint8
let bytes = Bytes.make(1)
Bytes.setInt8(0, 0xffs, bytes)
assert Bytes.getInt8(0, bytes) == 0xffs
assert Bytes.getUint8(0, bytes) == 0xffus
Bytes.setUint8(0, 0xffus, bytes)
assert Bytes.getInt8(0, bytes) == 0xffs
assert Bytes.getUint8(0, bytes) == 0xffus

// Bytes.setInt16, Bytes.setUint16, Bytes.getInt16, Bytes.getUint16
let bytes = Bytes.make(8)
Bytes.setInt16(0, 0xffffS, bytes)
Bytes.setInt16(2, 1S, bytes)
Bytes.setInt16(4, 2S, bytes)
Bytes.setInt16(6, 0xff9cS, bytes)
assert Bytes.getInt16(0, bytes) == 0xffffS
assert Bytes.getUint16(0, bytes) == 0xffffuS
assert Bytes.getInt16(1, bytes) == 0x01ffS
assert Bytes.getUint16(1, bytes) == 0x01ffuS
assert Bytes.getInt16(2, bytes) == 0x0001S
assert Bytes.getUint16(2, bytes) == 0x0001uS
assert Bytes.getInt16(3, bytes) == 0x0200S
assert Bytes.getUint16(3, bytes) == 0x0200uS
assert Bytes.getInt16(4, bytes) == 0x0002S
assert Bytes.getUint16(4, bytes) == 0x0002uS
assert Bytes.getInt16(5, bytes) == 0x9c00S
assert Bytes.getUint16(5, bytes) == 0x9c00uS
assert Bytes.getInt16(6, bytes) == 0xff9cS
assert Bytes.getUint16(6, bytes) == 0xff9cuS
Bytes.setUint16(0, 0xffffuS, bytes)
assert Bytes.getInt16(0, bytes) == 0xffffS
assert Bytes.getUint16(0, bytes) == 0xffffuS

// Bytes.setInt32, Bytes.getInt32
let bytes = Bytes.make(4)
Bytes.setInt32(0, 0x7fffffffl, bytes)
assert Bytes.getInt32(0, bytes) == 0x7fffffffl

// Bytes.setUint32, Bytes.getUint32
let bytes = Bytes.make(4)
Bytes.setUint32(0, 0xfffffffful, bytes)
assert Bytes.getUint32(0, bytes) == 0xfffffffful

// Bytes.setFloat32, Bytes.getFloat32
let bytes = Bytes.make(4)
Bytes.setFloat32(0, 42.0f, bytes)
assert Bytes.getFloat32(0, bytes) == 42.0f

// Bytes.setInt64, Bytes.getInt64
let bytes = Bytes.make(8)
Bytes.setInt64(0, 0x7fffffffffffffffL, bytes)
assert Bytes.getInt64(0, bytes) == 0x7fffffffffffffffL

// Bytes.setUint64, Bytes.getUint64
let bytes = Bytes.make(8)
Bytes.setUint64(0, 0xffffffffffffffffuL, bytes)
assert Bytes.getUint64(0, bytes) == 0xffffffffffffffffuL

// Bytes.setFloat64, Bytes.getFloat64
let bytes = Bytes.make(8)
Bytes.setFloat64(0, 42.0d, bytes)
assert Bytes.getFloat64(0, bytes) == 42.0d

// Bytes.copy
let bytes0 = Bytes.make(8)
assert Bytes.length(bytes0) == 8
for (let mut i = 0; i < 8; i += 1) {
  Bytes.setInt8(i, Int8.fromNumber(i), bytes0)
}
let bytes1 = Bytes.copy(bytes0)
assert Bytes.length(bytes1) == Bytes.length(bytes0)
for (let mut i = 0; i < 8; i += 1) {
  assert Bytes.getInt8(i, bytes1) == Bytes.getInt8(i, bytes0)
}

// Bytes.slice
let bytes2 = Bytes.slice(0, 8, bytes1)
assert Bytes.length(bytes2) == Bytes.length(bytes1)
for (let mut i = 0; i < 8; i += 1) {
  assert Bytes.getInt8(i, bytes2) == Bytes.getInt8(i, bytes1)
}
let bytes3 = Bytes.slice(4, 2, bytes2)
assert Bytes.length(bytes3) == 2
for (let mut i = 0; i < Bytes.length(bytes3); i += 1) {
  assert Bytes.getInt8(i, bytes3) == Bytes.getInt8(i + 4, bytes2)
}
let bytes4 = Bytes.slice(1, 6, bytes2)
assert Bytes.length(bytes4) == 6
for (let mut i = 0; i < Bytes.length(bytes4); i += 1) {
  assert Bytes.getInt8(i, bytes4) == Bytes.getInt8(i + 1, bytes2)
}

// Bytes.resize
let bytes5 = Bytes.resize(0, 0, bytes0)
assert Bytes.length(bytes5) == Bytes.length(bytes0)
for (let mut i = 0; i < Bytes.length(bytes5); i += 1) {
  assert Bytes.getInt8(i, bytes5) == Bytes.getInt8(i, bytes0)
}
let bytes5 = Bytes.resize(1, 1, bytes0)
assert Bytes.length(bytes5) == Bytes.length(bytes0) + 2
for (let mut i = 0; i < Bytes.length(bytes0); i += 1) {
  assert Bytes.getInt8(i + 1, bytes5) == Bytes.getInt8(i, bytes0)
}
let bytes5 = Bytes.resize(3, 0, bytes0)
assert Bytes.length(bytes5) == 11
for (let mut i = 0; i < Bytes.length(bytes0); i += 1) {
  assert Bytes.getInt8(i + 3, bytes5) == Bytes.getInt8(i, bytes0)
}
let bytes5 = Bytes.resize(0, 3, bytes0)
assert Bytes.length(bytes5) == 11
for (let mut i = 0; i < Bytes.length(bytes0); i += 1) {
  assert Bytes.getInt8(i, bytes5) == Bytes.getInt8(i, bytes0)
}
let bytes5 = Bytes.resize(-4, 0, bytes0)
assert Bytes.length(bytes5) == 4
for (let mut i = 0; i < Bytes.length(bytes5); i += 1) {
  assert Bytes.getInt8(i, bytes5) == Bytes.getInt8(i + 4, bytes0)
}
let bytes5 = Bytes.resize(0, -4, bytes0)
assert Bytes.length(bytes5) == 4
for (let mut i = 0; i < Bytes.length(bytes5); i += 1) {
  assert Bytes.getInt8(i, bytes5) == Bytes.getInt8(i, bytes0)
}
let bytes5 = Bytes.resize(-4, -4, bytes0)
assert Bytes.length(bytes5) == 0

// Bytes.move
let srcBytes = Bytes.copy(bytes0)
let dstBytes = Bytes.make(16)
Bytes.move(0, 8, 8, srcBytes, dstBytes)
for (let mut i = 8; i < 16; i += 1) {
  if (i < 8) {
    assert Bytes.getInt8(i, dstBytes) == 0s
  } else {
    assert Bytes.getInt8(i, dstBytes) == Bytes.getInt8(i - 8, srcBytes)
  }
}
let srcBytes = Bytes.make(32)
let len = Bytes.length(srcBytes)
let halfLen = len / 2
for (let mut i = 0; i < len; i += 1) {
  let value = if (i < halfLen) {
    0x01s
  } else {
    0x00s
  }
  Bytes.setInt8(i, value, srcBytes)
}
Bytes.move(0, halfLen, halfLen, srcBytes, srcBytes)
for (let mut i = 0; i < len; i += 1) {
  assert Bytes.getUint8(i, srcBytes) == 0x01us
}

// Bytes.concat
let bytesA = Bytes.make(16)
for (let mut i = 0; i < 16; i += 1) {
  Bytes.setInt8(i, 1s, bytesA)
}
let bytesB = Bytes.make(16)
for (let mut i = 0; i < 16; i += 1) {
  Bytes.setInt8(i, 2s, bytesB)
}
let bytesC = Bytes.concat(bytesA, bytesB)
for (let mut i = 0; i < Bytes.length(bytesC); i += 1) {
  if (i < 16) {
    assert Bytes.getInt8(i, bytesC) == 1s
  } else {
    assert Bytes.getInt8(i, bytesC) == 2s
  }
}
let bytesD = Bytes.concat(bytesB, bytesA)
for (let mut i = 0; i < Bytes.length(bytesD); i += 1) {
  if (i < 16) {
    assert Bytes.getInt8(i, bytesD) == 2s
  } else {
    assert Bytes.getInt8(i, bytesD) == 1s
  }
}

// Bytes.toString
let xs = [>
  0x4cs,
  0x65s,
  0x74s,
  0x27s,
  0x73s,
  0x20s,
  0x67s,
  0x65s,
  0x74s,
  0x20s,
  0x74s,
  0x68s,
  0x69s,
  0x73s,
  0x20s,
  0xf0s,
  0x9fs,
  0x8ds,
  0x9es,
]
let bytes = Bytes.make(Array.length(xs))
Array.forEachi((n, i) => {
  Bytes.setInt8(i, n, bytes)
}, xs)
let str = Bytes.toString(bytes)
assert str == "Let's get this üçû"

// Bytes.fromString
let bytes = Bytes.fromString("Let's get this üçû")
let xs = Array.map(Uint8.fromInt8, xs)
Array.forEachi((n, i) => {
  assert Bytes.getUint8(i, bytes) == n
}, xs)
let str = Bytes.toString(bytes)
assert str == "Let's get this üçû"

// Bytes.fill
let bytes = Bytes.fromString("üçûüçûüçûüçûüçûüçûüçûüçû")
Bytes.fill(0xffus, bytes)
for (let mut i = 0; i < Bytes.length(bytes); i += 1) {
  assert Bytes.getUint8(i, bytes) == 0xffus
}

// Bytes equality
let bytesCopy = Bytes.copy(bytes)
assert bytesCopy == bytes
Bytes.setInt8(0, 0s, bytesCopy)
assert bytesCopy != bytes
