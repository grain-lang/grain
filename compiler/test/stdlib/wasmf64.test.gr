import WasmF64 from "runtime/unsafe/wasmf64"
import Conv from "runtime/unsafe/conv"

@disableGC
let test = () => {
  // unary tests
  assert WasmF64.eq(WasmF64.neg(-1.23W), 1.23W)
  assert WasmF64.eq(WasmF64.neg(1.23W), -1.23W)
  assert WasmF64.eq(WasmF64.abs(1.23W), 1.23W)
  assert WasmF64.eq(WasmF64.abs(-1.23W), 1.23W)
  assert WasmF64.eq(WasmF64.ceil(1.5W), 2.W)
  assert WasmF64.eq(WasmF64.ceil(-1.5W), -1.W)
  assert WasmF64.eq(WasmF64.floor(1.5W), 1.W)
  assert WasmF64.eq(WasmF64.floor(-1.5W), -2.W)
  assert WasmF64.eq(WasmF64.trunc(1.23W), 1.W)
  assert WasmF64.eq(WasmF64.trunc(-1.23W), -1.W)
  assert WasmF64.eq(WasmF64.nearest(1.23W), 1.W)
  assert WasmF64.eq(WasmF64.nearest(1.73W), 2.W)
  assert WasmF64.eq(WasmF64.nearest(-1.23W), -1.W)
  assert WasmF64.eq(WasmF64.nearest(-1.73W), -2.W)
  assert WasmF64.eq(WasmF64.sqrt(16.W), 4.W)

  // binary tests
  assert WasmF64.eq(WasmF64.add(2.5W, 4.W), 6.5W)
  assert WasmF64.eq(WasmF64.sub(2.5W, 4.W), -1.5W)
  assert WasmF64.eq(WasmF64.mul(2.5W, 4.W), 10.W)
  assert WasmF64.eq(WasmF64.div(2.5W, 4.W), .625W)
  assert WasmF64.eq(WasmF64.copySign(2.5W, 4.W), 2.5W)
  assert WasmF64.eq(WasmF64.copySign(2.5W, -4.W), -2.5W)
  assert WasmF64.eq(WasmF64.min(2.5W, 4.W), 2.5W)
  assert WasmF64.eq(WasmF64.max(2.5W, 4.W), 4.W)
  assert WasmF64.eq(1.23W, 1.23W)
  assert !WasmF64.eq(1.23W, -1.23W)
  assert WasmF64.ne(1.23W, -1.23W)
  assert !WasmF64.ne(1.23W, 1.23W)
  assert WasmF64.lt(1.23W, 1.24W)
  assert !WasmF64.lt(1.23W, 1.22W)
  assert WasmF64.le(1.23W, 1.24W)
  assert WasmF64.le(1.23W, 1.23W)
  assert !WasmF64.le(1.23W, 1.22W)
  assert WasmF64.gt(1.23W, 1.22W)
  assert !WasmF64.gt(1.23W, 1.24W)
  assert WasmF64.ge(1.23W, 1.22W)
  assert WasmF64.ge(1.23W, 1.23W)
  assert !WasmF64.ge(1.23W, 1.24W)

  // conversion tests
  assert WasmF64.eq(WasmF64.reinterpretI64(0x4045000000000000N), 42.W)
  assert WasmF64.eq(WasmF64.convertI32S(-1n), -1.W)
  assert WasmF64.eq(WasmF64.convertI32U(-1n), 4294967295.W)
  assert WasmF64.eq(WasmF64.convertI64S(-1N), -1.W)
  assert WasmF64.eq(WasmF64.convertI64U(-1N), 18446744073709552000.W)
  assert WasmF64.eq(WasmF64.promoteF32(1.5w), 1.5W)

  // Grain conversion tests
  assert Conv.toFloat64(1.23W) == 1.23d
  assert WasmF64.eq(Conv.fromFloat64(1.23d), 1.23W)
}

test()
