module WasmF64Test

include "runtime/unsafe/wasmf64"
include "runtime/unsafe/conv"

@unsafe
let test = () => {
  let eq = (==)
  from WasmF64 use { (+), (-), (*), (/), (==), (!=), (<), (<=), (>), (>=) }
  // unary tests
  assert WasmF64.neg(-1.23W) == 1.23W
  assert WasmF64.neg(1.23W) == -1.23W
  assert WasmF64.abs(1.23W) == 1.23W
  assert WasmF64.abs(-1.23W) == 1.23W
  assert WasmF64.ceil(1.5W) == 2.0W
  assert WasmF64.ceil(-1.5W) == -1.0W
  assert WasmF64.floor(1.5W) == 1.0W
  assert WasmF64.floor(-1.5W) == -2.0W
  assert WasmF64.trunc(1.23W) == 1.0W
  assert WasmF64.trunc(-1.23W) == -1.0W
  assert WasmF64.nearest(1.23W) == 1.0W
  assert WasmF64.nearest(1.73W) == 2.0W
  assert WasmF64.nearest(-1.23W) == -1.0W
  assert WasmF64.nearest(-1.73W) == -2.0W
  assert WasmF64.sqrt(16.0W) == 4.0W

  // binary tests
  assert 2.5W + 4.0W == 6.5W
  assert 2.5W - 4.0W == -1.5W
  assert 2.5W * 4.0W == 10.0W
  assert 2.5W / 4.0W == 0.625W
  assert WasmF64.copySign(2.5W, 4.0W) == 2.5W
  assert WasmF64.copySign(2.5W, -4.0W) == -2.5W
  assert WasmF64.min(2.5W, 4.0W) == 2.5W
  assert WasmF64.max(2.5W, 4.0W) == 4.0W
  assert 1.23W == 1.23W
  assert !(1.23W == -1.23W)
  assert 1.23W != -1.23W
  assert !(1.23W != 1.23W)
  assert 1.23W < 1.24W
  assert !(1.23W < 1.22W)
  assert 1.23W <= 1.24W
  assert 1.23W <= 1.23W
  assert !(1.23W <= 1.22W)
  assert 1.23W > 1.22W
  assert !(1.23W > 1.24W)
  assert 1.23W >= 1.22W
  assert 1.23W >= 1.23W
  assert !(1.23W >= 1.24W)

  // conversion tests
  assert WasmF64.reinterpretI64(0x4045000000000000N) == 42.0W
  assert WasmF64.convertI32S(-1n) == -1.0W
  assert WasmF64.convertI32U(-1n) == 4294967295.0W
  assert WasmF64.convertI64S(-1N) == -1.0W
  assert WasmF64.convertI64U(-1N) == 18446744073709552000.0W
  assert WasmF64.promoteF32(1.5w) == 1.5W

  // Grain conversion tests
  assert eq(Conv.toFloat64(1.23W), 1.23d)
  assert Conv.fromFloat64(1.23d) == 1.23W
}

test()
