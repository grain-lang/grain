module WasmF32Test

include "runtime/unsafe/wasmf32"
include "runtime/unsafe/conv"

@unsafe
let test = () => {
  let eq = (==)
  from WasmF32 use { (+), (-), (*), (/), (==), (!=), (<), (<=), (>), (>=) }
  // unary tests
  assert WasmF32.neg(-1.23w) == 1.23w
  assert WasmF32.neg(1.23w) == -1.23w
  assert WasmF32.abs(1.23w) == 1.23w
  assert WasmF32.abs(-1.23w) == 1.23w
  assert WasmF32.ceil(1.5w) == 2.0w
  assert WasmF32.ceil(-1.5w) == -1.0w
  assert WasmF32.floor(1.5w) == 1.0w
  assert WasmF32.floor(-1.5w) == -2.0w
  assert WasmF32.trunc(1.23w) == 1.0w
  assert WasmF32.trunc(-1.23w) == -1.0w
  assert WasmF32.nearest(1.23w) == 1.0w
  assert WasmF32.nearest(1.73w) == 2.0w
  assert WasmF32.nearest(-1.23w) == -1.0w
  assert WasmF32.nearest(-1.73w) == -2.0w
  assert WasmF32.sqrt(16.0w) == 4.0w

  // binary tests
  assert 2.5w + 4.0w == 6.5w
  assert 2.5w - 4.0w == -1.5w
  assert 2.5w * 4.0w == 10.0w
  assert 2.5w / 4.0w == 0.625w
  assert WasmF32.copySign(2.5w, 4.0w) == 2.5w
  assert WasmF32.copySign(2.5w, -4.0w) == -2.5w
  assert WasmF32.min(2.5w, 4.0w) == 2.5w
  assert WasmF32.max(2.5w, 4.0w) == 4.0w
  assert 1.23w == 1.23w
  assert !(1.23w == -1.23w)
  assert 1.23w != -1.23w
  assert !(1.23w != 1.23w)
  assert 1.23w < 1.24w
  assert !(1.23w < 1.22w)
  assert 1.23w <= 1.24w
  assert 1.23w <= 1.23w
  assert !(1.23w <= 1.22w)
  assert 1.23w > 1.22w
  assert !(1.23w > 1.24w)
  assert 1.23w >= 1.22w
  assert 1.23w >= 1.23w
  assert !(1.23w >= 1.24w)

  // conversion tests
  assert WasmF32.reinterpretI32(0x42280000n) == 42.0w
  assert WasmF32.convertI32S(-1n) == -1.0w
  assert WasmF32.convertI32U(-1n) == 4294967296.0w
  assert WasmF32.convertI64S(-1N) == -1.0w
  assert WasmF32.convertI64U(-1N) == 18446744073709552000.0w
  assert WasmF32.demoteF64(1.23W) == 1.23w

  // Grain conversion tests
  assert Conv.fromFloat32(1.23f) == 1.23w
  assert eq(Conv.toFloat32(1.23w), 1.23f)
}

test()
