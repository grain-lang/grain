import String from "string"
import Char from "char"
import Array from "array"
import Bytes from "bytes"

let fox = "The quick brown fox jumps over the lazy dog."
let emojis = "we found a path🚀 to greatness🏅but the grind never quits😤💪🏼 keep milling💯🔥😈"
let emoji = "🌾"
let short = "fox"
let empty = ""
let multi = "a
b
c"

// encoding tests
// valid code points 0x0000...0xD7FF and 0xE000...0x10FFFF
// invalid code points will not compile in Grain
assert "🌾" == "\u{1F33E}"
assert "💪🏾" == "\u{1f4aa}\u{1f3fe}"
// extended grapheme cluster
assert "🤦🏼‍♂️" == "\u{1F926}\u{1F3FC}\u{200D}\u{2642}\u{FE0F}"

assert "a" == "\x61"
assert "a" == "\141"
assert "a" == "\u0061"
assert "a" == "\u{61}"

// Grain doesn't normalize strings
// ñ as a single code point
let ene = "\u{00f1}"
// ñ as a combined character
let combining_tilde = "\u{0303}"
let combined_ene = String.concat("n", combining_tilde)

assert ene == "ñ"
assert combined_ene == "ñ"
assert ene != combined_ene
assert String.length(ene) == 1
assert String.length(combined_ene) == 2

// concat tests
assert String.concat("", "") == ""
assert String.concat(short, "") == short
assert String.concat("", short) == short
assert String.concat(short, short) == "foxfox"
assert String.concat(emoji, emoji) == "🌾🌾"
assert String.concat(multi, emoji) == "a\nb\nc🌾"

// length tests
assert String.length(empty) == 0
assert String.length(short) == 3
assert String.length(emoji) == 1
assert String.length(fox) == 44
assert String.length(emojis) == 74
// Single grapheme composed of two code points
assert String.length("💪🏼") == 2

// byteLength tests
assert String.byteLength(empty) == 0
assert String.byteLength("a") == 1
assert String.byteLength(emoji) == 4
assert String.byteLength(emojis) == 98

// indexOf tests
assert String.indexOf(empty, empty) == Some(0)
assert String.indexOf(empty, short) == Some(0)
assert String.indexOf(short, fox) == Some(16)
assert String.indexOf("🚀", emojis) == Some(15)
assert String.indexOf(short, short) == Some(0)
assert String.indexOf(emoji, emojis) == None
assert String.indexOf("aa", "aaa") == Some(0)
assert String.indexOf("world", "Hello world world") == Some(6)
// lastIndexOf tests
assert String.lastIndexOf(empty, empty) == Some(0)
assert String.lastIndexOf(empty, short) == Some(3)
assert String.lastIndexOf(short, fox) == Some(16)
assert String.lastIndexOf("🚀", emojis) == Some(15)
assert String.lastIndexOf("🌾", "🌾🌾🌾🌾🌾") == Some(4)
assert String.lastIndexOf(short, short) == Some(0)
assert String.lastIndexOf(emoji, emojis) == None
assert String.lastIndexOf("aa", "aaa") == Some(1)
assert String.lastIndexOf("world", "Hello world world") == Some(12)

// charCodeAt tests
assert String.charCodeAt(0, emojis) == 119
assert String.charCodeAt(15, emojis) == 128640
assert String.charCodeAt(16, emojis) == 32
assert String.charCodeAt(17, emojis) == 116

// charAt tests
assert String.charAt(0, emojis) == 'w'
assert String.charAt(15, emojis) == '🚀'
assert String.charAt(16, emojis) == ' '
assert String.charAt(17, emojis) == 't'

// explode tests
// formatter-ignore
let codes = [> 119, 101, 32, 102, 111, 117, 110, 100, 32, 97, 32, 112, 97, 116, 104, 128640, 32, 116, 111, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 127941, 98, 117, 116, 32, 116, 104, 101, 32, 103, 114, 105, 110, 100, 32, 110, 101, 118, 101, 114, 32, 113, 117, 105, 116, 115, 128548, 128170, 127996, 32, 107, 101, 101, 112, 32, 109, 105, 108, 108, 105, 110, 103, 128175, 128293, 128520]
let chars = Array.map(Char.fromCode, codes)
assert String.explode(emojis) == chars

// implode tests
assert String.implode([>]) == ""
assert String.implode([> '5', ' ', '4', '3', 'a', 'b', 'c']) == "5 43abc"
assert String.implode(String.explode(emojis)) == emojis

// reverse tests
assert String.reverse("") == ""
assert String.reverse("even") == "neve"
assert String.reverse("odd") == "ddo"
assert String.reverse("olleH") == "Hello"
assert String.reverse(emojis) ==
String.implode(Array.reverse(String.explode(emojis)))

// split tests
assert String.split(empty, empty) == [>]
assert String.split(empty, short) == [> "f", "o", "x"]
assert String.split(" ", fox) ==
[> "The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog."]
assert String.split("brown fox", fox) ==
[> "The quick ", " jumps over the lazy dog."]
assert String.split("🚀 ", emojis) ==
[>
  "we found a path",
  "to greatness🏅but the grind never quits😤💪🏼 keep milling💯🔥😈",
]
assert String.split(" ", " foo bar baz ") == [> "", "foo", "bar", "baz", ""]

// slice tests
assert String.slice(0, 0, empty) == empty
assert String.slice(0, 1, fox) == "T"
assert String.slice(0, 2, fox) == "Th"
assert String.slice(0, 3, fox) == "The"
assert String.slice(0, 4, fox) == "The "
assert String.slice(0, 5, fox) == "The q"
assert String.slice(35, 39, fox) == "lazy"
assert String.slice(35, 44, fox) == "lazy dog."
assert String.slice(-9, -1, fox) == "lazy dog"
assert String.slice(35, -1, fox) == "lazy dog"
assert String.slice(35, -5, fox) == "lazy"
assert String.slice(0, 44, fox) == fox
assert String.slice(44, 44, fox) == empty
assert String.slice(0, 1, emoji) == emoji
assert String.slice(-2, 1, emoji) == emoji
assert String.slice(-1, -1, emoji) == empty
assert String.slice(0, 1, "💪🏾") == "💪"
assert String.slice(1, 2, "💪🏾") == "🏾"

// contains tests
assert String.contains("", short)
assert String.contains("f", short)
assert String.contains("o", short)
assert String.contains("x", short)
assert String.contains("fo", short)
assert String.contains("ox", short)
assert String.contains("fox", short)
assert String.contains("lazy", fox)
assert String.contains(emoji, emoji)
assert String.contains("quits😤💪🏼 ", emojis)
assert String.contains(emojis, emojis)
assert String.contains("\n", multi)
assert !String.contains("F", short)
assert !String.contains("foxes", "fox")
assert !String.contains("LAZY DOG", fox)

// startsWith tests
assert String.startsWith(empty, empty)
assert String.startsWith(empty, short)
assert String.startsWith(short, short)
assert String.startsWith("f", short)
assert String.startsWith("fo", short)
assert String.startsWith("The quick", fox)
assert String.startsWith(emoji, emoji)
assert String.startsWith(emojis, emojis)
assert !String.startsWith("foxes", short)
assert !String.startsWith("q", emoji)
assert !String.startsWith("THE QUICK", fox)

// endsWith tests
assert String.endsWith(empty, empty)
assert String.endsWith(empty, short)
assert String.endsWith(short, short)
assert String.endsWith("x", short)
assert String.endsWith("ox", short)
assert String.endsWith("lazy dog.", fox)
assert String.endsWith(".", fox)
assert String.endsWith(emoji, emoji)
assert String.endsWith(emojis, emojis)
assert !String.endsWith("bluefox", short)
assert !String.endsWith("q", emoji)
assert !String.endsWith("LAZY DOG.", fox)
// Replace First
assert String.replaceFirst("Hello", "Hi", "Hey Hello World") == "Hey Hi World"
assert String.replaceFirst("Hello", "Hi", "Hello World") == "Hi World"
assert String.replaceFirst("Hello", "Hi", "Hey World Hello") == "Hey World Hi"
assert String.replaceFirst("Hello", "Hi", "Hello Hello") == "Hi Hello"
assert String.replaceFirst("Hello", "Hi", "Hello") == "Hi"
assert String.replaceFirst("Hello", "Hi", "World") == "World"
assert String.replaceFirst("Hello", "Hi", "Hel") == "Hel"
assert String.replaceFirst("🌾", "Grain", "Hello") == "Hello"
assert String.replaceFirst("🌾", "Hello", "Hello Grain") == "Hello Grain"
assert String.replaceFirst("Grain", "🌾", "Hello Grain") == "Hello 🌾"
assert String.replaceFirst("ello", "i", "Hello Grain") == "Hi Grain"
assert String.replaceFirst("i", "ello", "Hi Grain") == "Hello Grain"
assert String.replaceFirst("🌾", "🚀", "🚀🚀🚀🌾🌾🌾") ==
"🚀🚀🚀🚀🌾🌾"
// Replace Last
assert String.replaceLast("Hello", "Hi", "Hey Hello World") == "Hey Hi World"
assert String.replaceLast("Hello", "Hi", "Hello World") == "Hi World"
assert String.replaceLast("Hello", "Hi", "Hey World Hello") == "Hey World Hi"
assert String.replaceLast("Hello", "Hi", "Hello Hello") == "Hello Hi"
assert String.replaceLast("Hello", "Hi", "Hello") == "Hi"
assert String.replaceLast("Hello", "Hi", "World") == "World"
assert String.replaceLast("Hello", "Hi", "Hel") == "Hel"
assert String.replaceLast("🌾", "Grain", "Hello") == "Hello"
assert String.replaceLast("🌾", "Hello", "Hello Grain") == "Hello Grain"
assert String.replaceLast("Grain", "🌾", "Hello Grain") == "Hello 🌾"
assert String.replaceLast("ello", "i", "Grain Hello") == "Grain Hi"
assert String.replaceLast("i", "ello", "Grain Hi") == "Grain Hello"
assert String.replaceLast("🚀", "🌾", "🚀🚀🚀🌾🌾🌾") ==
"🚀🚀🌾🌾🌾🌾"
// Replace All
assert String.replaceAll("Hello", "Hi", "Hey Hello World") == "Hey Hi World"
assert String.replaceAll("Hello", "Hi", "Hello World") == "Hi World"
assert String.replaceAll("Hello", "Hi", "Hey World Hello") == "Hey World Hi"
assert String.replaceAll("Hello", "Hi", "Hello Hello") == "Hi Hi"
assert String.replaceAll("Hello", "Hi", "Hello") == "Hi"
assert String.replaceAll("Hello", "Hi", "World") == "World"
assert String.replaceAll("Hello", "Hi", "Hel") == "Hel"
assert String.replaceAll("🌾", "Grain", "Hello") == "Hello"
assert String.replaceAll("🌾", "Hello", "Hello Grain") == "Hello Grain"
assert String.replaceAll("Grain", "🌾", "Hello Grain") == "Hello 🌾"
assert String.replaceAll("🚀", "🌾", "🚀🚀🚀🌾🌾🌾") ==
"🌾🌾🌾🌾🌾🌾"
assert String.replaceAll("/", "\/", "/test/test/test/") ==
"\/test\/test\/test\/"
assert String.replaceAll(",", "|", "test,test,test") == "test|test|test"

let processBytes = b => {
  let ret = Array.make(Bytes.length(b), 0l)
  for (let mut i = 0; i < Bytes.length(b); i += 1) {
    ret[i] = Bytes.getInt8U(i, b)
  }
  ret
}

// Simple cases
// formatter-ignore
assert processBytes(String.encode("ab", String.UTF8)) == [> 0x61l, 0x62l]
// formatter-ignore
assert processBytes(String.encode("ab", String.UTF16_BE)) == [> 0x00l, 0x61l, 0x00l, 0x62l]
// formatter-ignore
assert processBytes(String.encode("ab", String.UTF16_LE)) == [> 0x61l, 0x00l, 0x62l, 0x00l]
// formatter-ignore
assert processBytes(String.encode("ab", String.UTF32_BE)) == [> 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x62l]
// formatter-ignore
assert processBytes(String.encode("ab", String.UTF32_LE)) == [> 0x61l, 0x00l, 0x00l, 0x00l, 0x62l, 0x00l, 0x00l, 0x00l]

// Surrogate pairs
// formatter-ignore
assert processBytes(String.encode("𐐷", String.UTF8)) == [> 0xF0l, 0x90l, 0x90l, 0xB7l]
// formatter-ignore
assert processBytes(String.encode("𐐷", String.UTF16_BE)) == [> 0xD8l, 0x01l, 0xDCl, 0x37l]
// formatter-ignore
assert processBytes(String.encode("𐐷", String.UTF16_LE)) == [> 0x01l, 0xD8l, 0x37l, 0xDCl]
// formatter-ignore
assert processBytes(String.encode("𐐷", String.UTF32_BE)) == [> 0x00l, 0x01l, 0x04l, 0x37l]
// formatter-ignore
assert processBytes(String.encode("𐐷", String.UTF32_LE)) == [> 0x37l, 0x04l, 0x01l, 0x00l]

// formatter-ignore
assert processBytes(String.encodeAt("𐐷", String.UTF16_BE, Bytes.make(12), 5)) == [> 0x00l, 0x00l, 0x00l, 0x00l, 0x00l, 0xD8l, 0x01l, 0xDCl, 0x37l, 0x00l, 0x00l, 0x00l]
// test that BOM is prepended:
// formatter-ignore
assert processBytes(String.encodeWithBom("𐐷", String.UTF8)) == [> 0xEFl, 0xBBl, 0xBFl, 0xF0l, 0x90l, 0x90l, 0xB7l]
// formatter-ignore
assert processBytes(String.encodeWithBom("𐐷", String.UTF16_BE)) == [> 0xFEl, 0xFFl, 0xD8l, 0x01l, 0xDCl, 0x37l]
// formatter-ignore
assert processBytes(String.encodeWithBom("𐐷", String.UTF16_LE)) == [> 0xFFl, 0xFEl, 0x01l, 0xD8l, 0x37l, 0xDCl]
// formatter-ignore
assert processBytes(String.encodeWithBom("𐐷", String.UTF32_BE)) == [> 0x00l, 0x00l, 0xFEl, 0xFFl, 0x00l, 0x01l, 0x04l, 0x37l]
// formatter-ignore
assert processBytes(String.encodeWithBom("𐐷", String.UTF32_LE)) == [> 0xFFl, 0xFEl, 0x00l, 0x00l, 0x37l, 0x04l, 0x01l, 0x00l]

// formatter-ignore
assert processBytes(String.encode(emojis, String.UTF16_BE)) == [> 0x00l, 0x77l, 0x00l, 0x65l, 0x00l, 0x20l, 0x00l, 0x66l, 0x00l, 0x6fl, 0x00l, 0x75l, 0x00l, 0x6el, 0x00l, 0x64l, 0x00l, 0x20l, 0x00l, 0x61l, 0x00l, 0x20l, 0x00l, 0x70l, 0x00l, 0x61l, 0x00l, 0x74l, 0x00l, 0x68l, 0xd8l, 0x3dl, 0xdel, 0x80l, 0x00l, 0x20l, 0x00l, 0x74l, 0x00l, 0x6fl, 0x00l, 0x20l, 0x00l, 0x67l, 0x00l, 0x72l, 0x00l, 0x65l, 0x00l, 0x61l, 0x00l, 0x74l, 0x00l, 0x6el, 0x00l, 0x65l, 0x00l, 0x73l, 0x00l, 0x73l, 0xd8l, 0x3cl, 0xdfl, 0xc5l, 0x00l, 0x62l, 0x00l, 0x75l, 0x00l, 0x74l, 0x00l, 0x20l, 0x00l, 0x74l, 0x00l, 0x68l, 0x00l, 0x65l, 0x00l, 0x20l, 0x00l, 0x67l, 0x00l, 0x72l, 0x00l, 0x69l, 0x00l, 0x6el, 0x00l, 0x64l, 0x00l, 0x20l, 0x00l, 0x6el, 0x00l, 0x65l, 0x00l, 0x76l, 0x00l, 0x65l, 0x00l, 0x72l, 0x00l, 0x20l, 0x00l, 0x71l, 0x00l, 0x75l, 0x00l, 0x69l, 0x00l, 0x74l, 0x00l, 0x73l, 0xd8l, 0x3dl, 0xdel, 0x24l, 0xd8l, 0x3dl, 0xdcl, 0xaal, 0xd8l, 0x3cl, 0xdfl, 0xfcl, 0x00l, 0x20l, 0x00l, 0x6bl, 0x00l, 0x65l, 0x00l, 0x65l, 0x00l, 0x70l, 0x00l, 0x20l, 0x00l, 0x6dl, 0x00l, 0x69l, 0x00l, 0x6cl, 0x00l, 0x6cl, 0x00l, 0x69l, 0x00l, 0x6el, 0x00l, 0x67l, 0xd8l, 0x3dl, 0xdcl, 0xafl, 0xd8l, 0x3dl, 0xddl, 0x25l, 0xd8l, 0x3dl, 0xdel, 0x08l]
// formatter-ignore
assert processBytes(String.encode(emojis, String.UTF16_LE)) == [> 0x77l, 0x00l, 0x65l, 0x00l, 0x20l, 0x00l, 0x66l, 0x00l, 0x6fl, 0x00l, 0x75l, 0x00l, 0x6el, 0x00l, 0x64l, 0x00l, 0x20l, 0x00l, 0x61l, 0x00l, 0x20l, 0x00l, 0x70l, 0x00l, 0x61l, 0x00l, 0x74l, 0x00l, 0x68l, 0x00l, 0x3dl, 0xd8l, 0x80l, 0xdel, 0x20l, 0x00l, 0x74l, 0x00l, 0x6fl, 0x00l, 0x20l, 0x00l, 0x67l, 0x00l, 0x72l, 0x00l, 0x65l, 0x00l, 0x61l, 0x00l, 0x74l, 0x00l, 0x6el, 0x00l, 0x65l, 0x00l, 0x73l, 0x00l, 0x73l, 0x00l, 0x3cl, 0xd8l, 0xc5l, 0xdfl, 0x62l, 0x00l, 0x75l, 0x00l, 0x74l, 0x00l, 0x20l, 0x00l, 0x74l, 0x00l, 0x68l, 0x00l, 0x65l, 0x00l, 0x20l, 0x00l, 0x67l, 0x00l, 0x72l, 0x00l, 0x69l, 0x00l, 0x6el, 0x00l, 0x64l, 0x00l, 0x20l, 0x00l, 0x6el, 0x00l, 0x65l, 0x00l, 0x76l, 0x00l, 0x65l, 0x00l, 0x72l, 0x00l, 0x20l, 0x00l, 0x71l, 0x00l, 0x75l, 0x00l, 0x69l, 0x00l, 0x74l, 0x00l, 0x73l, 0x00l, 0x3dl, 0xd8l, 0x24l, 0xdel, 0x3dl, 0xd8l, 0xaal, 0xdcl, 0x3cl, 0xd8l, 0xfcl, 0xdfl, 0x20l, 0x00l, 0x6bl, 0x00l, 0x65l, 0x00l, 0x65l, 0x00l, 0x70l, 0x00l, 0x20l, 0x00l, 0x6dl, 0x00l, 0x69l, 0x00l, 0x6cl, 0x00l, 0x6cl, 0x00l, 0x69l, 0x00l, 0x6el, 0x00l, 0x67l, 0x00l, 0x3dl, 0xd8l, 0xafl, 0xdcl, 0x3dl, 0xd8l, 0x25l, 0xddl, 0x3dl, 0xd8l, 0x08l, 0xdel]

// formatter-ignore
assert processBytes(String.encode(emojis, String.UTF32_BE)) == [> 0x00l, 0x00l, 0x00l, 0x77l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x66l, 0x00l, 0x00l, 0x00l, 0x6fl, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x64l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x70l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x68l, 0x00l, 0x01l, 0xf6l, 0x80l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x6fl, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x01l, 0xf3l, 0xc5l, 0x00l, 0x00l, 0x00l, 0x62l, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x68l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x64l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x76l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x71l, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x01l, 0xf6l, 0x24l, 0x00l, 0x01l, 0xf4l, 0xaal, 0x00l, 0x01l, 0xf3l, 0xfcl, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6bl, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x70l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6dl, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6cl, 0x00l, 0x00l, 0x00l, 0x6cl, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x01l, 0xf4l, 0xafl, 0x00l, 0x01l, 0xf5l, 0x25l, 0x00l, 0x01l, 0xf6l, 0x08l]
// formatter-ignore
assert processBytes(String.encode(emojis, String.UTF32_LE)) == [> 0x77l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x66l, 0x00l, 0x00l, 0x00l, 0x6fl, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x64l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x70l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x68l, 0x00l, 0x00l, 0x00l, 0x80l, 0xf6l, 0x01l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x6fl, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x61l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x00l, 0x00l, 0xc5l, 0xf3l, 0x01l, 0x00l, 0x62l, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x68l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x64l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x76l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x72l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x71l, 0x00l, 0x00l, 0x00l, 0x75l, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x74l, 0x00l, 0x00l, 0x00l, 0x73l, 0x00l, 0x00l, 0x00l, 0x24l, 0xf6l, 0x01l, 0x00l, 0xaal, 0xf4l, 0x01l, 0x00l, 0xfcl, 0xf3l, 0x01l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6bl, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x65l, 0x00l, 0x00l, 0x00l, 0x70l, 0x00l, 0x00l, 0x00l, 0x20l, 0x00l, 0x00l, 0x00l, 0x6dl, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6cl, 0x00l, 0x00l, 0x00l, 0x6cl, 0x00l, 0x00l, 0x00l, 0x69l, 0x00l, 0x00l, 0x00l, 0x6el, 0x00l, 0x00l, 0x00l, 0x67l, 0x00l, 0x00l, 0x00l, 0xafl, 0xf4l, 0x01l, 0x00l, 0x25l, 0xf5l, 0x01l, 0x00l, 0x08l, 0xf6l, 0x01l, 0x00l]

// round-trip tests
assert String.decode(String.encode("foo", String.UTF8), String.UTF8) == "foo"
assert String.decode(String.encode("foo", String.UTF16_BE), String.UTF16_BE) ==
"foo"
assert String.decode(String.encode("foo", String.UTF16_LE), String.UTF16_LE) ==
"foo"
assert String.decode(String.encode("foo", String.UTF32_BE), String.UTF32_BE) ==
"foo"
assert String.decode(String.encode("foo", String.UTF32_LE), String.UTF32_LE) ==
"foo"

assert String.decode(String.encode(emojis, String.UTF8), String.UTF8) == emojis
assert String.decode(String.encode(emojis, String.UTF16_BE), String.UTF16_BE) ==
emojis
assert String.decode(String.encode(emojis, String.UTF16_LE), String.UTF16_LE) ==
emojis
assert String.decode(String.encode(emojis, String.UTF32_BE), String.UTF32_BE) ==
emojis
assert String.decode(String.encode(emojis, String.UTF32_LE), String.UTF32_LE) ==
emojis

// decodeRange
// 51 is chosen to stress-test these functions, since it's not an aligned offset
assert String.decodeRange(
  String.encodeAt(emojis, String.UTF8, Bytes.make(500), 51),
  String.UTF8,
  51,
  98
) ==
emojis
assert String.decodeRange(
  String.encodeAt(emojis, String.UTF16_LE, Bytes.make(500), 51),
  String.UTF16_LE,
  51,
  164
) ==
emojis
assert String.decodeRange(
  String.encodeAt(emojis, String.UTF16_BE, Bytes.make(500), 51),
  String.UTF16_BE,
  51,
  164
) ==
emojis
assert String.decodeRange(
  String.encodeAt(emojis, String.UTF32_LE, Bytes.make(500), 51),
  String.UTF32_LE,
  51,
  296
) ==
emojis
assert String.decodeRange(
  String.encodeAt(emojis, String.UTF32_BE, Bytes.make(500), 51),
  String.UTF32_BE,
  51,
  296
) ==
emojis

// keepBom should be no-op, since there is no BOM
assert String.decodeRangeKeepBom(
  String.encodeAt(emojis, String.UTF8, Bytes.make(500), 51),
  String.UTF8,
  51,
  98
) ==
emojis
assert String.decodeRangeKeepBom(
  String.encodeAt(emojis, String.UTF16_LE, Bytes.make(500), 51),
  String.UTF16_LE,
  51,
  164
) ==
emojis
assert String.decodeRangeKeepBom(
  String.encodeAt(emojis, String.UTF16_BE, Bytes.make(500), 51),
  String.UTF16_BE,
  51,
  164
) ==
emojis
assert String.decodeRangeKeepBom(
  String.encodeAt(emojis, String.UTF32_LE, Bytes.make(500), 51),
  String.UTF32_LE,
  51,
  296
) ==
emojis
assert String.decodeRangeKeepBom(
  String.encodeAt(emojis, String.UTF32_BE, Bytes.make(500), 51),
  String.UTF32_BE,
  51,
  296
) ==
emojis
// but, when we include it, it should preserve it:
assert String.decodeRangeKeepBom(
  String.encodeAtWithBom(emojis, String.UTF16_LE, Bytes.make(500), 51),
  String.UTF16_LE,
  51,
  166
) !=
emojis
// BOM-skipping should be default:
assert String.decodeRange(
  String.encodeAtWithBom(emojis, String.UTF8, Bytes.make(500), 51),
  String.UTF8,
  51,
  101
) ==
emojis
assert String.decodeRange(
  String.encodeAtWithBom(emojis, String.UTF16_LE, Bytes.make(500), 51),
  String.UTF16_LE,
  51,
  166
) ==
emojis
assert String.decodeRange(
  String.encodeAtWithBom(emojis, String.UTF16_BE, Bytes.make(500), 51),
  String.UTF16_BE,
  51,
  166
) ==
emojis
assert String.decodeRange(
  String.encodeAtWithBom(emojis, String.UTF32_BE, Bytes.make(500), 51),
  String.UTF32_BE,
  51,
  300
) ==
emojis
assert String.decodeRange(
  String.encodeAtWithBom(emojis, String.UTF32_LE, Bytes.make(500), 51),
  String.UTF32_LE,
  51,
  300
) ==
emojis

// BOM stripping
assert String.decode(String.encode(emojis, String.UTF32_LE), String.UTF32_LE) ==
emojis
assert String.decode(String.encode(emojis, String.UTF32_BE), String.UTF32_BE) ==
emojis

// Tests for (#786)
let bytes = Bytes.make(2)
Bytes.setInt8(0, 0x00l, bytes)
Bytes.setInt8(0, 0xa2l, bytes)
assert String.decode(bytes, String.UTF16_LE) == "¢"

// codepoint iteration tests
// conveniently reusing data from `explode` tests
{
  let mut tmp = []
  String.forEachCodePoint(codePoint => {
    tmp = [codePoint, ...tmp]
  }, emojis)
  assert Array.reverse(Array.fromList(tmp)) == codes
}

{
  let mut tmp = []
  String.forEachCodePointi((codePoint, idx) => {
    tmp = [(codePoint, idx), ...tmp]
  }, emojis)
  assert Array.reverse(Array.fromList(tmp)) ==
  Array.mapi((c, i) => (c, i), codes)
}

// String.trimStart
assert String.trimStart("t   test") == "t   test"
assert String.trimStart("   test") == "test"
assert String.trimStart("   test   ") == "test   "
assert String.trimStart("test   ") == "test   "
assert String.trimStart("test") == "test"
assert String.trimStart("") == ""
assert String.trimStart("  ") == ""
assert String.trimStart("  🌾🌾") == "🌾🌾"
assert String.trimStart("\uFEFF") == ""
assert String.trimStart("\uFEFFf") == "f"
assert String.trimStart("\uFEFF \uFEFF\tf") == "f"
assert String.trimStart("\uFEFF \uFEFFf\uFEFF") == "f\uFEFF"
// Sting.trimEnd
assert String.trimEnd("test   t") == "test   t"
assert String.trimEnd("test   ") == "test"
assert String.trimEnd("   test   ") == "   test"
assert String.trimEnd("   test") == "   test"
assert String.trimEnd("test") == "test"
assert String.trimEnd("") == ""
assert String.trimEnd("  ") == ""
assert String.trimEnd("  🌾🌾  ") == "  🌾🌾"
assert String.trimEnd("f\uFEFF \t\uFEFF") == "f"
assert String.trimEnd("\uFEFFf\uFEFF \t\uFEFF") == "\uFEFFf"
// String.trim
assert String.trim("t   test   t") == "t   test   t"
assert String.trim("test   ") == "test"
assert String.trim("   test   ") == "test"
assert String.trim("   test") == "test"
assert String.trim("test") == "test"
assert String.trim("") == ""
assert String.trim("  ") == ""
assert String.trim("  🌾🌾  ") == "🌾🌾"
assert String.trim("\uFEFFf\uFEFF") == "f"
assert String.trim("\uFEFF\uFEFF \uFEFFf \uFEFF") == "f"
