import * from 'lists'

let list = [1, 2, 3]

# List.sum

assert sum(list) == 6
assert sum([]) == 0

# List.reverse

assert equal(reverse([]), [])
assert equal(reverse(list), [3, 2, 1])

# List.length

assert length([]) == 0
assert length(list) == 3

# List.append

assert equal(append(list, [4]), [1, 2, 3, 4])
assert equal(append([], [4]), [4])

# List.contains

assert contains(true, list) == false
assert contains(false, list) == false
assert contains(3, list)
assert contains(3, []) == false

# List.map

assert equal(map(x => x + 1, list), [2, 3, 4])
assert equal(map(x => x * 2, list), [2, 4, 6])
assert equal(map(x => x + 1, []), [])

# List.fold_left

assert fold_left((acc, cur) => acc - cur, 0, list) == -6
assert fold_left((acc, cur) => acc - cur, 0, []) == 0

# List.fold_right

assert fold_right((acc, cur) => acc - cur, 0, list) == 2
assert fold_right((acc, cur) => acc - cur, 0, []) == 0

# List.for_all

assert for_all(x => x > 0, list) == true
assert for_all(x => x > 2, list) == false
assert for_all(x => x == 3, []) == true

