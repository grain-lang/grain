module QueueTest

include "queue"
include "list"

// Mutable queue tests

let empty = Queue.make()
assert Queue.isEmpty(empty)
assert Queue.size(empty) == 0
assert Queue.peek(empty) == None
assert Queue.pop(empty) == None
assert Queue.size(empty) == 0

let queue = Queue.make()
Queue.push(1, queue)
Queue.push(2, queue)
Queue.push(3, queue)

assert !Queue.isEmpty(queue)
assert Queue.size(queue) == 3
assert Queue.peek(queue) == Some(1)

assert Queue.pop(queue) == Some(1)
assert Queue.peek(queue) == Some(2)
assert Queue.size(queue) == 2

Queue.push(4, queue)
assert Queue.size(queue) == 3
assert Queue.peek(queue) == Some(2)
let copy = Queue.copy(queue)
Queue.pop(copy)
assert Queue.size(copy) == 2
assert Queue.size(queue) == 3
Queue.clear(queue)
assert Queue.size(queue) == 0
assert Queue.peek(queue) == None

// test that expansion works
let queue = Queue.make(size=3)
Queue.push(0, queue)
Queue.push(1, queue)
Queue.push(2, queue)
Queue.push(3, queue)
assert Queue.pop(queue) == Some(0)
assert Queue.pop(queue) == Some(1)
assert Queue.pop(queue) == Some(2)
assert Queue.pop(queue) == Some(3)
assert Queue.pop(queue) == None
let queue = Queue.make(size=0)
Queue.push(0, queue)
let queue2 = Queue.make(size=1)
Queue.push(0, queue2)
assert queue == queue2

// Queue.toList
let queue = Queue.make(size=3)
assert Queue.toList(queue) == []
Queue.push(0, queue)
Queue.push(1, queue)
Queue.push(2, queue)
Queue.push(3, queue)
assert Queue.toList(queue) == [0, 1, 2, 3]
Queue.pop(queue)
assert Queue.toList(queue) == [1, 2, 3]
Queue.push(3, queue)
assert Queue.toList(queue) == [1, 2, 3, 3]
Queue.pop(queue)
Queue.push(4, queue)
Queue.push(5, queue)
assert Queue.toList(queue) == [2, 3, 3, 4, 5]

// Queue.fromList
let queue = Queue.make(size=0)
assert Queue.fromList([]) == queue
Queue.push(0, queue)
Queue.push(1, queue)
Queue.push(2, queue)
Queue.push(3, queue)
assert Queue.fromList([0, 1, 2, 3]) == queue

// test that the "circular" behavior of the circular queue works as expected
let queue = Queue.make(size=4)
let push = x => () => Queue.push(x, queue)
let pop = () => ignore(Queue.pop(queue))
let actions = [
  push(1),
  push(2),
  push(3),
  push(4),
  pop,
  pop,
  pop,
  push(5),
  push(6),
  pop,
  pop,
  push(7),
  push(8),
  push(9),
]
List.forEach(action => action(), actions)

assert Queue.size(queue) == 4
assert Queue.peek(queue) == Some(6)

Queue.push(10, queue)
assert Queue.size(queue) == 5
assert Queue.pop(queue) == Some(6)
assert Queue.pop(queue) == Some(7)
assert Queue.pop(queue) == Some(8)
assert Queue.pop(queue) == Some(9)
assert Queue.pop(queue) == Some(10)
assert Queue.pop(queue) == None

// Queue.toArray
let queue1 = Queue.make()
assert Queue.toArray(queue1) == [>]
let queue2 = Queue.make()
Queue.push(1, queue2)
Queue.push(2, queue2)
Queue.push(3, queue2)
Queue.push(4, queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.push(5, queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.push(6, queue2)
Queue.push(7, queue2)
Queue.push(8, queue2)
Queue.push(9, queue2)
Queue.push(10, queue2)
Queue.push(11, queue2)
Queue.push(12, queue2)
Queue.push(13, queue2)
Queue.push(14, queue2)
Queue.push(15, queue2)
Queue.push(16, queue2)
Queue.push(17, queue2)
Queue.push(18, queue2)
Queue.push(19, queue2)
assert Queue.toArray(queue2) ==
  [> 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
let queue3 = Queue.make()
Queue.push(1, queue3)
Queue.push(2, queue3)
Queue.push(3, queue3)
assert Queue.toArray(queue3) == [> 1, 2, 3]
let queue4 = Queue.copy(queue3)
Queue.pop(queue4)
assert Queue.toArray(queue4) == [> 2, 3]

// Queue.fromArray
let qa1 = Queue.make(size=8)
Queue.push(1, qa1)
Queue.push(2, qa1)
Queue.push(3, qa1)
Queue.push(4, qa1)
assert Queue.fromArray([> 1, 2, 3, 4]) == qa1
assert Queue.fromArray([>]) == Queue.make(size=16)

// Queue.equal
from Queue use { (==) }
let queue1 = Queue.make()
let queue2 = Queue.make()
Queue.push(1, queue2)
Queue.push(2, queue2)
Queue.push(3, queue2)
Queue.push(4, queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.push(5, queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.pop(queue2)
Queue.push(6, queue2)
Queue.push(7, queue2)
Queue.push(8, queue2)
Queue.push(9, queue2)
Queue.push(10, queue2)
Queue.push(11, queue2)
Queue.push(12, queue2)
Queue.push(13, queue2)
Queue.push(14, queue2)
Queue.push(15, queue2)
Queue.push(16, queue2)
Queue.push(17, queue2)
Queue.push(18, queue2)
Queue.push(19, queue2)
let queue3 = Queue.make()
Queue.push(1, queue3)
Queue.push(2, queue3)
Queue.push(3, queue3)
let queue4 = Queue.copy(queue3)
Queue.pop(queue4)
let queue5 = Queue.make()
Queue.push(6, queue5)
Queue.push(7, queue5)
Queue.push(8, queue5)
Queue.push(9, queue5)
Queue.push(10, queue5)
Queue.push(11, queue5)
Queue.push(12, queue5)
Queue.push(13, queue5)
Queue.push(14, queue5)
Queue.push(15, queue5)
Queue.push(16, queue5)
Queue.push(17, queue5)
Queue.push(18, queue5)
Queue.push(19, queue5)
assert queue2 == queue5
let queue6 = Queue.make()
Queue.push(1, queue6)
Queue.push(2, queue6)
Queue.push(3, queue6)
assert queue3 == queue6
let queue7 = Queue.make()
Queue.push(2, queue7)
Queue.push(3, queue7)
assert queue4 == queue7
let queue8 = Queue.make()
Queue.push(1, queue8)
Queue.pop(queue8)
assert queue8 == queue1

assert !(queue2 == queue3)
assert !(queue5 == queue6)
from Pervasives use { (==) }

module Immutable {
  from Queue use { module Immutable as Queue }

  // 1 <- 2 <- 3
  let sampleQueue = Queue.push(3, Queue.push(2, Queue.push(1, Queue.empty)))

  // Queue.isEmpty

  assert Queue.isEmpty(Queue.empty)
  assert !Queue.isEmpty(sampleQueue)

  // Queue.peek

  assert Queue.peek(Queue.empty) == None
  assert Queue.peek(sampleQueue) == Some(1)

  // Queue.push

  assert Queue.peek(Queue.push(1, Queue.empty)) == Some(1)
  assert Queue.peek(Queue.push(4, sampleQueue)) == Some(1)

  // Queue.pop

  assert Queue.isEmpty(Queue.pop(Queue.empty))
  assert Queue.isEmpty(Queue.pop(Queue.push(1, Queue.empty)))
  assert Queue.isEmpty(Queue.pop(Queue.pop(Queue.pop(sampleQueue))))
  assert Queue.peek(Queue.pop(sampleQueue)) == Some(2)
  assert Queue.peek(Queue.pop(Queue.push(4, Queue.pop(sampleQueue)))) == Some(3)

  // Queue.size

  assert Queue.size(Queue.empty) == 0
  assert Queue.size(sampleQueue) == 3
  assert Queue.size(Queue.pop(Queue.pop(sampleQueue))) == 1

  // Queue.toList
  let sampleQueue = Queue.push(3, Queue.push(2, Queue.push(1, Queue.empty)))
  assert Queue.toList(Queue.empty) == []
  assert Queue.toList(sampleQueue) == [1, 2, 3]
  assert Queue.toList(Queue.pop(sampleQueue)) == [2, 3]

  // Queue.fromList
  assert Queue.fromList([]) == Queue.empty
  let queue = Queue.fromList([1, 2, 3])
  assert Queue.peek(sampleQueue) == Queue.peek(queue)
  let queue = Queue.pop(queue)
  let sampleQueue = Queue.pop(sampleQueue)
  assert Queue.peek(sampleQueue) == Queue.peek(queue)
  let queue = Queue.pop(queue)
  let sampleQueue = Queue.pop(sampleQueue)
  assert Queue.peek(sampleQueue) == Queue.peek(queue)
  let queue = Queue.pop(queue)
  let sampleQueue = Queue.pop(sampleQueue)
  assert Queue.peek(sampleQueue) == Queue.peek(queue)
}
