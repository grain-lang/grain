module HashTest

// Sanity tests for generic hashing.

from "hash" include Hash
from "list" include List
from "array" include Array
from "string" include String
from "bytes" include Bytes

let uniq = list => {
  let mut itemsSeen = []

  List.reduce((acc, item) => {
    let seen = List.contains(item, itemsSeen)
    itemsSeen = [item, ...itemsSeen]
    acc && !seen
  }, true, list)
}

let numbers = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  20,
  30,
  40,
  50,
  60,
  70,
  80,
  90,
  101,
  202,
  303,
  404,
  505,
  606,
  707,
  808,
  909,
]
let globalInstance = Hash.make()
assert uniq(List.map(n => Hash.hash(globalInstance, n), numbers))

assert Hash.hash(globalInstance, 42) == Hash.hash(globalInstance, 42)
assert Hash.hash(globalInstance, 0) == Hash.hash(globalInstance, 0)
assert Hash.hash(globalInstance, 100l) == Hash.hash(globalInstance, 100l)
assert Hash.hash(globalInstance, 100ul) == Hash.hash(globalInstance, 100ul)
assert Hash.hash(globalInstance, 100.0f) == Hash.hash(globalInstance, 100.0f)
assert Hash.hash(globalInstance, 100.0d) == Hash.hash(globalInstance, 100.0d)
assert Hash.hash(globalInstance, 100L) == Hash.hash(globalInstance, 100L)
assert Hash.hash(globalInstance, 100uL) == Hash.hash(globalInstance, 100uL)
assert Hash.hash(globalInstance, 2/3) == Hash.hash(globalInstance, 2/3)

let strings = [
  "",
  "f",
  "fo",
  "foo",
  "foo ",
  "foo b",
  "foo ba",
  "foo bar",
  "foo bar!",
  "deer",
  "reed",
  "read",
  "dear",
  "bad",
  "dab",
  "fee",
  "feed",
  "fed",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "!",
  "@",
  "#",
  "$",
  "%",
]
assert uniq(List.map(n => Hash.hash(globalInstance, n), strings))

assert Hash.hash(globalInstance, "") == Hash.hash(globalInstance, "")
assert Hash.hash(globalInstance, "grain > ore > wool > lumber > brick") ==
  Hash.hash(globalInstance, "grain > ore > wool > lumber > brick")

let chars = String.explode("!@#$%^&*()1234567890-qwertyuiop🌾💯🔥😈😤💪🏼")
let charList = Array.toList(chars)

assert uniq(List.map(e => Hash.hash(globalInstance, e), charList))
Array.forEach(
  c => assert Hash.hash(globalInstance, c) == Hash.hash(globalInstance, c),
  chars
)

enum rec Variants {
  A,
  B,
  C,
  D(Number, List<Variants>),
  E(String),
}

let variants = [
  A,
  B,
  C,
  D(1, []),
  D(2, []),
  D(1, [A]),
  D(1, [B]),
  D(1, [A, B]),
  E(""),
  E("dab"),
  E("bad"),
]
assert uniq(List.map(n => Hash.hash(globalInstance, n), variants))

assert Hash.hash(globalInstance, A) == Hash.hash(globalInstance, A)
assert Hash.hash(globalInstance, D(1, [A, B])) ==
  Hash.hash(globalInstance, D(1, [A, B]))
assert Hash.hash(globalInstance, E("wasm")) ==
  Hash.hash(globalInstance, E("wasm"))

let tuples = [
  (1, A, ""),
  (1, A, "foo"),
  (12, A, "foo"),
  (12, B, "foo"),
  (12, B, "gr"),
  (12, E("wasm"), "gr"),
]
assert uniq(List.map(n => Hash.hash(globalInstance, n), tuples))

assert Hash.hash(globalInstance, (12, E("wasm"), "gr")) ==
  Hash.hash(globalInstance, (12, E("wasm"), "gr"))
assert Hash.hash(globalInstance, (0, A, "")) ==
  Hash.hash(globalInstance, (0, A, ""))

record Rec {
  num: Number,
  var: Variants,
  str: String,
}

let recs = [
  { num: 1, var: A, str: "" },
  { num: 1, var: A, str: "foo" },
  { num: 12, var: A, str: "foo" },
  { num: 12, var: B, str: "foo" },
  { num: 12, var: B, str: "gr" },
  { num: 12, var: E("wasm"), str: "gr" },
]
assert uniq(List.map(n => Hash.hash(globalInstance, n), recs))

assert Hash.hash(globalInstance, { num: 12, var: E("wasm"), str: "gr" }) ==
  Hash.hash(globalInstance, { num: 12, var: E("wasm"), str: "gr" })
assert Hash.hash(globalInstance, { num: 0, var: A, str: "" }) ==
  Hash.hash(globalInstance, { num: 0, var: A, str: "" })

assert Hash.hash(globalInstance, Bytes.fromString("foo")) ==
  Hash.hash(globalInstance, Bytes.fromString("foo"))
assert Hash.hash(globalInstance, Bytes.fromString("foo")) !=
  Hash.hash(globalInstance, Bytes.fromString("bar"))

// hashInstance tests
let globalInstance1 = Hash.make()
let globalInstance2 = Hash.make() // uses a global seed generated at runtime, Hash.make is the same
assert Hash.hash(globalInstance1, 42) == Hash.hash(globalInstance1, 42)
let seededInstance1 = Hash.makeSeeded(1)
assert Hash.hash(seededInstance1, 32) == Hash.hash(seededInstance1, 32)
assert Hash.hash(seededInstance1, 32) != Hash.hash(seededInstance1, 31)
let seededInstance2 = Hash.makeSeeded(2)
assert Hash.hash(seededInstance1, 30) != Hash.hash(seededInstance2, 30)
