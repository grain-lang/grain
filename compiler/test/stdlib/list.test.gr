import * from 'list'

let list = [1, 2, 3]

// List.sum

assert sum(list) == 6
assert sum([]) == 0

// List.reverse

assert reverse([]) == []
assert reverse(list) == [3, 2, 1]

// List.length

assert length([]) == 0
assert length(list) == 3

// List.append

assert append(list, [4]) == [1, 2, 3, 4]
assert append([], [4]) == [4]

// List.contains

assert contains(3, list)
assert contains(3, []) == false

// List.map

assert map(x => x + 1, list) == [2, 3, 4]
assert map(x => x * 2, list) == [2, 4, 6]
assert map(x => x + 1, []) == []

// List.mapi

let numbers = [2, 3, 4]
let multiply = (n, i) => n * i

assert mapi(multiply, numbers) == [0, 3, 8]
assert mapi(multiply, []) == []

// List.flatMap

assert flatMap(x => [x + 1], list) == [2, 3, 4]
assert flatMap(x => [x, x + 1], list) == [1, 2, 2, 3, 3, 4]
assert flatMap(x => [], list) == []

// List.reduce

assert reduce((acc, cur) => acc - cur, 0, list) == -6
assert reduce((acc, cur) => acc - cur, 0, []) == 0

// List.reduceRight

assert reduceRight((acc, cur) => acc - cur, 0, list) == 2
assert reduceRight((acc, cur) => acc - cur, 0, []) == 0

// List.every

assert every(x => x > 0, list)
assert !every(x => x > 2, list)
assert every(x => x == 3, [])

// List.some

assert some(x => x > 0, list)
assert !some(x => x > 3, list)
assert !some(x => x == 3, [])

// List.filter

assert filter(x => x > 0, list) == list
assert filter(x => x > 3, list) == []
assert filter(x => x == 3, list) == [3]

// List.reject

assert reject(x => x > 0, list) == []
assert reject(x => x > 3, list) == list
assert reject(x => x == 3, list) == [1, 2]

// List.head

assert head(list) == Some(1)
assert head([2]) == Some(2)
assert head([]) == None

// List.tail

assert tail(list) == Some([2, 3])
assert tail([1]) == Some([])
assert tail([]) == None

// List.nth

assert nth(0, list) == Some(1)
assert nth(2, list) == Some(3)
assert nth(10, list) == None

// List.flatten

assert flatten([[1], [2], [3]]) == list
assert flatten([[], list]) == list
assert flatten([list, []]) == list

// List.insert

assert insert(1, 0, []) == [1]
assert insert(0, 0, list) == [0, 1, 2, 3]
assert insert(0, 2, list) == [1, 2, 0, 3]
assert insert(0, 3, list) == [1, 2, 3, 0]

// List.count

assert count(x => x > 0, list) == 3
assert count(x => x > 0, []) == 0
assert count(x => x == 3, list) == 1

// List.part

assert part(0, list) == ([], list)
assert part(3, list) == (list, [])
assert part(2, list) == ([1, 2], [3])

// List.rotate

assert rotate(0, list) == list
assert rotate(1, list) == [2, 3, 1]
assert rotate(2, list) == [3, 1, 2]
assert rotate(-2, list) == [2, 3, 1]

// List.unique

assert unique([]) == []
assert unique(list) == list
assert unique([1, 1, 1, 1]) == [1]

// List.drop

assert drop(4, []) == []
assert drop(0, list) == list
assert drop(2, list) == [3]
assert drop(4, list) == []

// List.dropWhile

assert dropWhile(x => true, []) == []
assert dropWhile(x => true, list) == []
assert dropWhile(x => false, list) == list
assert dropWhile(x => x < 3, list) == [3]
assert dropWhile(x => x < 5, list) == []
assert dropWhile(x => x > 5, list) == list

// List.find

assert find(x => x == 2, list) == Some(2)
assert find(x => false, list) == None

// List.findIndex

assert findIndex(x => x == 1, list) == Some(0)
assert findIndex(x => x == 2, list) == Some(1)
assert findIndex(x => false, list) == None

// List.product

let listA = [1, 2]
let listB = [2, 3, 4]
let listC = [1]
let listD = [2]

assert product(listA, listB) == [(1,2),(1,3),(1,4),(2,2),(2,3),(2,4)]
assert product(listC, listB) == [(1,2),(1,3),(1,4)]
assert product(listC, listD) == [(1,2)]
assert product([], []) == []

// List.take

let listTake = [1, 2, 3]

assert take(0, listTake) == []
assert take(2, listTake) == [1, 2]
assert take(3, listTake) == listTake
assert take(9, listTake) == listTake

// List.takeWhile

let listTakeWhile = [2, 2, 3, 4]

assert takeWhile(x => x % 2 == 0, listTakeWhile) == [2, 2]
assert takeWhile(x => x > 10, listTakeWhile) == []
assert takeWhile(x => x > 1, listTakeWhile) == listTakeWhile

// List.sub

let listSub = [1, 2, 3]

assert sub(0, 1, listSub) == [1]
assert sub(0, 2, listSub) == [1, 2]
assert sub(1, 2, listSub) == [2, 3]

// List.init

assert init(4, idx => idx) == [0, 1, 2, 3]
assert init(0, idx => fail "Shouldn't be called") == []
assert init(-10, idx => fail "Shouldn't be called") == []
