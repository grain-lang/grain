import Number from "number"
import Result from "result"
import Int32 from "int32"
import Int64 from "int64"
import Float32 from "float32"
import Float64 from "float64"
import BI from "bigint"

// Constants Test
assert Number.nan != Number.nan

assert Number.infinity == 1.0 / 0.0

assert Number.pi == 3.141592653589793

assert Number.tau == 6.283185307179586

assert Number.e == 2.718281828459045
// Operations Tests
// add
assert Number.add(25, 5) == 30
assert Number.add(Number.infinity, 10) == Number.infinity
assert Number.add(Number.infinity, Number.infinity) == Number.infinity
assert Number.isNaN(Number.add(Number.infinity, Number.nan))
assert Number.isNaN(Number.add(Number.nan, Number.nan))
// Rational addition tests
{
  let (+) = Number.add
  assert 2/3 + 4 == 14/3
  assert 2/3 + Int32.toNumber(4l) == 14/3
  assert 2/3 + Int64.toNumber(4L) == 14/3
  assert 4 + 2/3 == 14/3
  assert Int32.toNumber(4l) + 2/3 == 14/3
  assert Int64.toNumber(4L) + 2/3 == 14/3
  assert 2/3 + 4.0 == 4.666666666666667
}
// sub
assert Number.sub(25, 5) == 20
assert Number.sub(Number.infinity, 10) == Number.infinity
assert Number.isNaN(Number.sub(Number.infinity, Number.infinity))
assert Number.isNaN(Number.sub(Number.infinity, Number.nan))
assert Number.isNaN(Number.sub(Number.nan, Number.nan))
// Rational subtraction tests
{
  let (-) = Number.sub
  assert 2/3 - 4 == -10/3
  assert 2/3 - Int32.toNumber(4l) == -10/3
  assert 2/3 - Int64.toNumber(4L) == -10/3
  assert 4 - 2/3 == 10/3
  assert Int32.toNumber(4l) - 2/3 == 10/3
  assert Int64.toNumber(4L) - 2/3 == 10/3
  assert 2/3 - 4.0 == -3.3333333333333335
  assert 4.0 - 2/3 == 3.3333333333333335
}
// mul
assert Number.mul(5, 5) == 25
assert Number.mul(9223372036854775809, 5) == 46116860184273879045
assert Number.mul(9223372036854775809, 9223372036854775809) ==
  85070591730234615884290395931651604481
assert Number.mul(Number.infinity, 10) == Number.infinity
assert Number.mul(Number.infinity, Number.infinity) == Number.infinity
assert Number.isNaN(Number.mul(Number.infinity, Number.nan))
assert Number.isNaN(Number.mul(Number.nan, Number.nan))
// Rational mul tests
{
  let (*) = Number.mul
  assert 2/3 * 4 == 8/3
  assert 2/3 * Int32.toNumber(4l) == 8/3
  assert 2/3 * Int64.toNumber(4L) == 8/3
  assert 4 * (2/3) == 8/3
  assert Int32.toNumber(4l) * (2/3) == 8/3
  assert Int64.toNumber(4L) * (2/3) == 8/3
  assert 2/3 * 4.0 < 2.666666666666667
  assert 2.6666666666666 < 2/3 * 4.0
}
// div
assert Number.div(25, 5) == 5
assert Number.div(9223372036854775809, 9) == 1024819115206086201
assert Number.div(9223372036854775809, 9223372036854775809) == 1
assert Number.div(Number.infinity, 10) == Number.infinity
assert Number.isNaN(Number.div(Number.infinity, Number.infinity))
assert Number.isNaN(Number.div(Number.infinity, Number.nan))
assert Number.isNaN(Number.div(Number.nan, Number.nan))
// Rational div tests
{
  let (/) = Number.div
  assert 2/3 / 4 == 1/6
  assert 2/3 / Int32.toNumber(4l) == 1/6
  assert 2/3 / Int64.toNumber(4L) == 1/6
  assert 4 / (2/3) == 6
  assert Int32.toNumber(4l) / (2/3) == 6
  assert Int64.toNumber(4L) / (2/3) == 6
  assert 2/3 / 4.0 == 0.16666666666666666
  assert 4.0 / (2/3) == 6.0
}
// Number.pow tests are based on test cases from libc-test: http://nsz.repo.hu/git/?p=libc-test
/*
  libc-test is licensed under the following standard MIT license:
  Copyright Â© 2005-2013 libc-test AUTHORS
  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  Portions of this software is derived from software authored by
  third parties:
  math tests use numbers under BSD and GPL licenses see src/math/ucb/*
  and src/math/crlibm/* for details
*/
// pow
assert Number.isNaN(Number.pow(-8.06684839057968084, 4.53566256067686879))
assert Number.pow(4.34523984933830487, -8.88799136300345083) ==
  0.00000213471188255872853
assert Number.isNaN(Number.pow(-8.38143342755524934, -2.76360733737958819))
assert Number.isNaN(Number.pow(-6.53167358191348413, 4.56753527684274374))
assert Number.pow(9.26705696697258574, 4.81139208435979615) ==
  44909.2994151296589
assert Number.isNaN(Number.pow(-6.45004555606023633, 0.662071792337673881))
assert Number.pow(7.85889025304169664, 0.0521545267500622481) ==
  1.11351774134586523
assert Number.isNaN(Number.pow(-0.792054511984895959, 7.67640268511753998))
assert Number.pow(0.615702673197924044, 2.01190257903248026) ==
  0.376907735213801831
assert Number.isNaN(Number.pow(-0.558758682360915193, 0.0322398306026380407))
assert Number.isNaN(Number.pow(0.0, Number.nan))
assert Number.pow(0.0, Number.infinity) == 0.0
assert Number.pow(0.0, 3.0) == 0.0
assert Number.pow(0.0, 2.0) == 0.0
assert Number.pow(0.0, 1.0) == 0.0
assert Number.pow(0.0, 0.5) == 0.0
assert Number.isNaN(Number.pow(0.0, 0.0))
assert Number.isNaN(Number.pow(0.0, -0.0))
assert Number.pow(0.0, -0.5) == Number.infinity
assert Number.pow(0.0, -1.0) == Number.infinity
assert Number.pow(0.0, -2.0) == Number.infinity
assert Number.pow(0.0, -3.0) == Number.infinity
assert Number.pow(0.0, -4.0) == Number.infinity
assert Number.pow(0.0, Number.infinity * -1) == Number.infinity
assert Number.isNaN(Number.pow(-0.0, Number.nan))
assert Number.pow(-0.0, Number.infinity) == 0.0
assert Number.pow(-0.0, 3.0) == -0.0
assert Number.pow(-0.0, 2.0) == 0.0
assert Number.pow(-0.0, 1.0) == -0.0
assert Number.pow(-0.0, 0.5) == 0.0
assert Number.isNaN(Number.pow(-0.0, 0.0))
assert Number.isNaN(Number.pow(-0.0, -0.0))
assert Number.pow(-0.0, -0.5) == Number.infinity
assert Number.pow(-0.0, -1.0) == Number.infinity * -1
assert Number.pow(-0.0, -2.0) == Number.infinity
assert Number.pow(-0.0, -3.0) == Number.infinity * -1
assert Number.pow(-0.0, -4.0) == Number.infinity
assert Number.pow(-0.0, Number.infinity * -1) == Number.infinity
assert Number.isNaN(Number.pow(Number.nan, 0.0))
assert Number.isNaN(Number.pow(Number.infinity, 0.0))
assert Number.isNaN(Number.pow(Number.infinity * -1, 0.0))
assert Number.isNaN(Number.pow(1.0, 0.0))
assert Number.isNaN(Number.pow(-1.0, 0.0))
assert Number.isNaN(Number.pow(-0.5, 0.0))
assert Number.isNaN(Number.pow(Number.nan, -0.0))
assert Number.pow(1, 1) == 1
assert Number.pow(2, 1) == 2
assert Number.pow(300, 1) == 300
assert Number.pow(-1, 1) == -1
assert Number.pow(-2, 1) == -2
assert Number.pow(-300, 1) == -300
assert Number.pow(0, 1) == 0
assert Number.pow(1, 0) == 1
assert Number.pow(0, 0) == 1
assert Number.pow(1, 5) == 1
assert Number.pow(5, 5) == 3125
assert Number.pow(-5, 5) == -3125
assert Number.pow(5, 6) == 15625
assert Number.pow(-5, 6) == 15625
assert Number.pow(1.0, 1) == 1.0
assert Number.pow(2, 1.0) == 2.0
assert Number.pow(300.0, 1) == 300.0
assert Number.pow(-1, 1.0) == -1.0
assert Number.pow(-2.0, 1) == -2.0
assert Number.pow(-300, 1.0) == -300.0
assert Number.pow(0.0, 1) == 0.0
assert Number.isNaN(Number.pow(1, 0.0))
assert Number.isNaN(Number.pow(0.0, 0))
assert Number.pow(1, 5.0) == 1.0
assert Number.pow(5.0, 5) == 3125.0
assert Number.pow(-1.0, 1) == -1.0
assert Number.pow(-4.0, 3) == -64.0
assert Number.pow(-4, 3.0) == -64.0
assert Number.pow(-5, 5.0) == -3125.0
assert Number.pow(5.0, 6) == 15625.0
assert Number.pow(-5, 6.0) == 15625.0
assert Number.pow(1/2, 1) == 1/2
assert Number.pow(1/2, 2) == 1/4
assert Number.pow(2, 1/2) == 1.4142135623730952
assert Number.pow(4, 1/2) == 2
assert Number.pow(4, -1/2) == 0.5
assert Number.pow(9223372036854775809, 2) ==
  85070591730234615884290395931651604481
assert Number.pow(9223372036854775809, 0.5) == 3037000499.97605
assert Number.pow(9223372036854775809.0, 0.5) == 3037000499.97605
assert Number.pow(9223372036854775809, 0) == 1
// TODO(#1168): Use rational literal
let denom = 85070591730234615884290395931651604481
assert Number.pow(9223372036854775809, -2) ==
  1 / denom // 1.1754943508222875e-38
assert Number.pow(9223372036854775809, 1/5) == 6208.375056426594
assert Number.pow(9223372036854775809, 2/3) == 4398046511103.9927
assert Number.pow(10223372036854775809, 10) ==
  12472159440978016923768615307032788210916694000775261660538874886865415760948494778813645195039710006678013364969179502650466497057008288260604039903029954443675868581729857084924132550246401
assert Number.pow(1, 9223372036854775809) == 1
assert Number.pow(2.0, 9223372036854775809) == Number.infinity
// exp
assert Number.exp(1) == 2.718281828459045
assert Number.exp(10) == 22026.465794806703
assert Number.exp(0) == 1
assert Number.exp(-1) == 0.36787944117144236
assert Number.exp(-10) == 0.000045399929762484875
assert Number.exp(0.5) == 1.6487212707001283
assert Number.exp(-0.5) == 0.6065306597126334
assert Number.exp(1/2) == 1.6487212707001283
assert Number.exp(-1/2) == 0.6065306597126334
assert Number.exp(9223372036854775809) == Number.infinity
assert Number.exp(Number.infinity) == Number.infinity
assert Number.isNaN(Number.exp(Number.nan))
// sqrt
assert Number.sqrt(25) == 5
assert Number.sqrt(25.0) == 5.0
assert Number.sqrt(35) == 5.916079783099616
assert Number.sqrt(2/4) == 0.7071067811865476
assert Number.sqrt(9266609011276477657) == 3044110545.180066
assert Number.sqrt(Number.infinity) == Number.infinity
assert Number.isNaN(Number.sqrt(Number.nan))
// min
assert Number.min(5, 5) == 5
assert Number.min(5, 6) == 5
assert Number.min(6, 5) == 5
assert Number.min(1/2, 1/4) == 1/4
assert Number.min(0.5, 0.25) == 0.25
assert Number.min(355894508425808343204914141312, 6) == 6
assert Number.min(Number.infinity, 10) == 10
assert Number.isNaN(Number.min(Number.nan, 10))
assert Number.isNaN(Number.min(Number.nan, Number.infinity))

// max
assert Number.max(5, 5) == 5
assert Number.max(6, 5) == 6
assert Number.max(5, 6) == 6
assert Number.max(1/2, 1/4) == 1/2
assert Number.max(0.5, 0.25) == 0.5
assert Number.max(BI.toNumber(1234t), BI.toNumber(12t)) == BI.toNumber(1234t)
assert Number.max(355894508425808343204914141312, 6) ==
  355894508425808343204914141312
assert Number.max(Number.infinity, 10) == Number.infinity
assert Number.max(Number.nan, 10) == 10
assert Number.max(Number.nan, Number.infinity) == Number.infinity

// ceil
assert Number.ceil(-25.5) == -25
assert Number.ceil(25.5) == 26
assert Number.ceil(25) == 25
assert Number.ceil(22/7) == 4
assert Number.ceil(BI.toNumber(1234t)) == BI.toNumber(1234t)
assert Number.isNaN(Number.ceil(Number.nan))
assert Number.ceil(Number.infinity) == Number.infinity
// floor
assert Number.floor(-25.5) == -26
assert Number.floor(25.5) == 25
assert Number.floor(25) == 25
assert Number.floor(22/7) == 3
assert Number.floor(BI.toNumber(1234t)) == BI.toNumber(1234t)
assert Number.isNaN(Number.floor(Number.nan))
assert Number.floor(Number.infinity) == Number.infinity
// trunc
assert Number.trunc(-25.5) == -25
assert Number.trunc(25.5) == 25
assert Number.trunc(25) == 25
assert Number.trunc(22/7) == 3
assert Number.trunc(BI.toNumber(1234t)) == BI.toNumber(1234t)
assert Number.isNaN(Number.trunc(Number.nan))
assert Number.trunc(Number.infinity) == Number.infinity
// round
assert Number.round(-25.5) == -26
assert Number.round(-25.25) == -25
assert Number.round(25.25) == 25
assert Number.round(25.5) == 26
assert Number.round(22/7) == 3
assert Number.round(BI.toNumber(1234t)) == BI.toNumber(1234t)
assert Number.isNaN(Number.round(Number.nan))
assert Number.round(Number.infinity) == Number.infinity
// abs
assert Number.abs(-25.5) == 25.5
assert Number.abs(25.5) == 25.5
assert Number.abs(-1/2) == 1/2
assert Number.isNaN(Number.abs(Number.nan))
assert Number.abs(Number.infinity) == Number.infinity
// neg
assert Number.neg(-25.5) == 25.5
assert Number.neg(25.5) == -25.5
assert Number.neg(1/2) == -1/2
assert Number.neg(BI.toNumber(1234t)) == BI.toNumber(-1234t)
assert Number.neg(BI.toNumber(-1234t)) == BI.toNumber(1234t)
assert Number.isNaN(Number.neg(Number.nan))
assert Number.neg(Number.infinity) == Number.infinity * -1

// isFloat
assert Number.isFloat(0.0)
assert Number.isFloat(1.5)
assert Number.isFloat(42.)
assert Number.isFloat(9e6)
assert Number.isFloat(0) == false
assert Number.isFloat(10) == false
assert Number.isFloat(2/3) == false
assert Number.isFloat(Number.infinity) == true
assert Number.isFloat(Number.nan) == true
// isInteger
assert Number.isInteger(0)
assert Number.isInteger(9)
assert Number.isInteger(2_147_483_648)
assert Number.isInteger(9_223_372_036_854_775_808)
assert Number.isInteger(0.0) == false
assert Number.isInteger(9e6) == false
assert Number.isInteger(2/3) == false
assert Number.isInteger(Number.infinity) == false
assert Number.isInteger(Number.nan) == false

// isRational
assert Number.isRational(1/2)
assert Number.isRational(6/5)
assert Number.isRational(1) == false
assert Number.isRational(1.5) == false
assert Number.isRational(Number.infinity) == false
assert Number.isRational(Number.nan) == false

// isFinite
assert Number.isFinite(Number.nan) == false // NaN
assert Number.isFinite(Number.infinity) == false // infinity
assert Number.isFinite(-1.0 / 0.0) == false // -infinity
assert Number.isFinite(1)
assert Number.isFinite(1.0)
assert Number.isFinite(0)
assert Number.isFinite(0.0)
assert Number.isFinite(-1)
assert Number.isFinite(-1.0)
assert Number.isFinite(25.76)
assert Number.isFinite(-25.00)
assert Number.isFinite(1/2)
assert Number.isFinite(-1/2)
assert Number.isFinite(BI.toNumber(-141435902485091384901384t))

// isNaN
assert Number.isNaN(Number.nan)
assert Number.isNaN(1) == false
assert Number.isNaN(1.0) == false
assert Number.isNaN(0) == false
assert Number.isNaN(0.0) == false
assert Number.isNaN(-1) == false
assert Number.isNaN(-1.0) == false
assert Number.isNaN(25.76) == false
assert Number.isNaN(-25.00) == false
assert Number.isNaN(1/2) == false
assert Number.isNaN(-1/2) == false
assert Number.isNaN(Number.infinity) == false // infinity
assert Number.isNaN(-1.0 / 0.0) == false // -infinity
assert Number.isNaN(BI.toNumber(1t)) == false

// isInfinite
assert Number.isInfinite(Number.infinity) // infinity
assert Number.isInfinite(-1.0 / 0.0) // -infinity
assert Number.isInfinite(Number.nan) == false // NaN
assert Number.isInfinite(1) == false
assert Number.isInfinite(1.0) == false
assert Number.isInfinite(0) == false
assert Number.isInfinite(0.0) == false
assert Number.isInfinite(-1) == false
assert Number.isInfinite(-1.0) == false
assert Number.isInfinite(25.76) == false
assert Number.isInfinite(-25.00) == false
assert Number.isInfinite(1/2) == false
assert Number.isInfinite(-1/2) == false
assert Number.isInfinite(BI.toNumber(-1t)) == false

// parseInt
assert Number.parseInt("42", 10) == Ok(42)
assert Number.parseInt("042", 10) == Ok(42)
assert Number.parseInt("_0___42___", 10) == Ok(42)
assert Number.parseInt("-42", 10) == Ok(-42)
assert Number.parseInt("-042", 10) == Ok(-42)
assert Number.parseInt("-_0___42___", 10) == Ok(-42)
assert Number.parseInt("1073741823", 10) ==
  Ok(1073741823) // grain simple number max
assert Number.parseInt("-1073741824", 10) ==
  Ok(-1073741824) // grain simple number min
assert Number.parseInt("2147483647", 10) == Ok(2147483647) // i32 max
assert Number.parseInt("-2147483648", 10) == Ok(-2147483648) // i32 min
assert Number.parseInt("9223372036854775807", 10) ==
  Ok(9223372036854775807) // i64 max
assert Number.parseInt("-9223372036854775808", 10) ==
  Ok(-9223372036854775808) // i64 min
assert Number.parseInt("0xabcdef", 10) == Ok(0xabcdef)
assert Number.parseInt("0Xabcdef", 10) == Ok(0xabcdef)
assert Number.parseInt("abcdef", 16) == Ok(0xabcdef)
assert Number.parseInt("AbCdEf", 16) == Ok(0xabcdef)
assert Number.parseInt("0o7654321", 10) == Ok(0o7654321)
assert Number.parseInt("0O7654321", 10) == Ok(0o7654321)
assert Number.parseInt("7654321", 8) == Ok(0o7654321)
assert Number.parseInt("0b100101110110", 10) == Ok(0b100101110110)
assert Number.parseInt("0B100101110110", 10) == Ok(0b100101110110)
assert Number.parseInt("100101110110", 2) == Ok(0b100101110110)
assert Number.parseInt("zyxw44ab", 36) == Ok(2818805666483)
assert Number.parseInt("ZYXW44AB", 36) == Ok(2818805666483)
assert Number.parseInt("9223372036854775808", 10) == Ok(9223372036854775808)
assert Number.parseInt("-9223372036854775808", 10) == Ok(-9223372036854775808)
assert Result.isErr(Number.parseInt("", 10))
assert Result.isErr(Number.parseInt("_", 10))
assert Result.isErr(Number.parseInt("1.23", 10))
assert Result.isErr(Number.parseInt("000000", 1))
assert Result.isErr(Number.parseInt("zzzzz", 37))
assert Result.isErr(Number.parseInt("zzzzz", 9223372036854775807))
assert Result.isErr(Number.parseInt("10", 1.23))
assert Result.isErr(Number.parseInt("10", 2/3))

// Number.sign
assert Number.sign(-10000) == -1
assert Number.sign(22222) == 1
assert Number.sign(BI.toNumber(-1t)) == -1
assert Number.sign(BI.toNumber(1t)) == 1
// TODO(#693): Replace with Infinity literal when it exists
assert 1 / Number.sign(0.0) == Float64.toNumber(Float64.infinity)
// TODO(#693): Replace with -Infinity literal when it exists
assert 1 / Number.sign(-0.0) == Number.neg(Float64.toNumber(Float64.infinity))

// Number.sin - These test a range as we approximate sin
assert Number.sin(0.0) == 0
assert Number.sin(1) > 0.84147 && Number.sin(1) < 0.84148
assert Number.sin(-1) < -0.84147 && Number.sin(-1) > -0.84148
assert Number.sin(20) > 0.91294 && Number.sin(20) < 0.91295
assert Number.sin(1/2) > 0.4794 && Number.sin(1/2) < 0.4795
// TODO(#1478): Update this test when sin is unbounded
assert Number.sin(9223372036854775809) == 0.0
assert Number.isNaN(Number.sin(Number.infinity))
assert Number.isNaN(Number.sin(Number.nan))

// Number.cos - These test a range as we approximate sin
assert Number.cos(1) > 0.5403 && Number.cos(1) < 0.5404
assert Number.cos(-1) > 0.5403 && Number.cos(-1) < 0.5404
assert Number.cos(15) < -0.7596 && Number.cos(15) > -0.7597
assert Number.cos(1/2) > 0.8775 && Number.cos(1/2) < 0.8776
// TODO(#1478): Update this test when sin is unbounded
assert Number.cos(9223372036854775809) == 0.0
assert Number.isNaN(Number.cos(Number.infinity))
assert Number.isNaN(Number.cos(Number.nan))

// Number.tan - These test a range as we approximate sin
assert Number.tan(1) > 1.5574 && Number.tan(1) < 1.5575
assert Number.tan(-1) > -1.5575 && Number.tan(-1) < -1.5574
assert Number.tan(15) < -0.8559 && Number.tan(15) > -0.8560
assert Number.tan(1/2) > 0.5463 && Number.tan(1/2) < 0.5464
// TODO(#1478): Update this test when sin is unbounded
assert Number.isNaN(Number.tan(9223372036854775809))
assert Number.isNaN(Number.tan(Number.infinity))
assert Number.isNaN(Number.tan(Number.nan))

// Number.gamma
// Note: Currently gamma will overflow the memory when using a bigint as such there are no tests for this
assert Number.gamma(10.5) < 1133278.3889488 &&
  Number.gamma(10.5) > 1133278.3889487
assert Number.gamma(10) == 362880
assert Number.gamma(1) == 1
assert Number.gamma(0.5) == 1.7724538509055159
assert Number.gamma(-0.5) < -3.544907 && Number.gamma(-0.5) > -3.544909
assert Number.gamma(-1) == Number.infinity
assert Number.gamma(-10) == Number.infinity
assert Number.gamma(0.2) > 4.59084 && Number.gamma(0.2) < 4.59085
assert Number.gamma(1/5) > 4.59084 && Number.gamma(1/5) < 4.59085
assert Number.gamma(1/2) == 1.7724538509055159
assert Number.isNaN(Number.gamma(Number.infinity))
assert Number.isNaN(Number.gamma(Number.nan))

// Number.factorial
// Note: Currently factorial will overflow the memory when using a bigint as such there are no tests for this
assert Number.factorial(10) == 3628800
assert Number.factorial(5) == 120
assert Number.factorial(0) == 1
assert Number.factorial(-5) == -120
assert Number.factorial(-10) == -3628800
assert Number.factorial(10.5) == 11899423.083962297
assert Number.factorial(0.5) == 0.886226925452759
assert Number.factorial(1/2) == 0.886226925452759
assert Number.isNaN(Number.factorial(Number.infinity))
assert Number.isNaN(Number.factorial(Number.nan))

// Number.toDegrees
assert Number.toDegrees(0) == 0
assert Number.toDegrees(Number.pi) == 180
assert Number.toDegrees(Number.pi * -1) == -180
assert Number.toDegrees(Number.infinity) == Number.infinity
assert Number.toDegrees(0.008726646259971648) == 1/2
assert Number.toDegrees(-0.008726646259971648) == -1/2
assert Number.toDegrees(0.004363323129985824) == 1/4
assert Number.toDegrees(160978210179491630.0) == 9223372036854775809
assert Number.toDegrees(1/2) == 28.64788975654116
assert Number.toDegrees(1/4) == 14.32394487827058
assert Number.isNaN(Number.toDegrees(Number.nan))

// Number.toRadians
assert Number.toRadians(0) == 0
assert Number.toRadians(30) == Number.pi / 6
assert Number.toRadians(-30) == Number.pi / -6
assert Number.toRadians(-30) == Number.pi / -6
assert Number.toRadians(1/2) == 0.008726646259971648
assert Number.toRadians(-1/2) == -0.008726646259971648
assert Number.toRadians(1/4) == 0.004363323129985824
assert Number.toRadians(9223372036854775809) == 160978210179491630.0
assert Number.toRadians(Number.infinity) == Number.infinity
assert Number.isNaN(Number.toRadians(Number.nan))
