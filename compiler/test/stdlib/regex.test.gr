import Array from "array"
import List from "list"
import Option from "option"
import Result from "result"
import {
  make,
  find,
  findRange,
  findAll,
  findAllRange,
  replace,
  replaceAll,
  MatchResult
} from "regex"

let flattenResult = (mr: MatchResult) => {
  let otherGroups = Array.init(mr.numGroups - 1, (n) => (mr.group)(n + 1))
  (Option.unwrap((mr.group)(0)), otherGroups)
}

let flattenResultOption = (res) => {
  match(res) {
    None => None,
    Some(mr: MatchResult) => {
      Some(flattenResult(mr))
    }
  }
}

let flattenResultPositions = (mr: MatchResult) => {
  let otherGroups = Array.init(mr.numGroups - 1, (n) => (mr.groupPosition)(n + 1))
  (Option.unwrap((mr.groupPosition)(0)), otherGroups)
}

let flattenResultPositionsOption = (res) => {
  match(res) {
    None => None,
    Some(mr: MatchResult) => {
      Some(flattenResultPositions(mr))
    }
  }
}

let testRegex = (pat, str) => {
  Result.map(flattenResultOption, Result.map(re => find(re, str), make(pat)))
}

let testRegexPositions = (pat, str) => {
  Result.map(flattenResultPositionsOption, Result.map(re => find(re, str), make(pat)))
}

let testRegexRange = (pat, str, start, end) => {
  Result.map(flattenResultOption, Result.map(re => findRange(re, str, start, end), make(pat)))
}

let testRegexPositionsRange = (pat, str, start, end) => {
  Result.map(flattenResultPositionsOption, Result.map(re => findRange(re, str, start, end), make(pat)))
}

// Test Suite 1: From Racket

assert testRegex("a|b", "cat") == Ok(Some(("a", [> ])))
assert testRegex("[at]", "cat") == Ok(Some(("a", [> ])))
assert testRegex("ca*[at]", "caaat") == Ok(Some(("caaat", [> ])))
assert testRegex("ca+[at]", "caaat") == Ok(Some(("caaat", [> ])))
assert testRegex("ca?t?", "ct") == Ok(Some(("ct", [> ])))
assert testRegex("ca*?[at]", "caaat") == Ok(Some(("ca", [> ])))
assert testRegex("ca{2}", "caaat") == Ok(Some(("caa", [> ])))
assert testRegex("ca{2,}t", "catcaat") == Ok(Some(("caat", [> ])))
assert testRegex("ca{,2}t", "caaatcat") == Ok(Some(("cat", [> ])))
assert testRegex("ca{1,2}t", "caaatcat") == Ok(Some(("cat", [> ])))
assert testRegex("(c*)(a*)", "caat") == Ok(Some(("caa", [> Some("c"), Some("aa")])))
assert testRegex("[^ca]", "caat") == Ok(Some(("t", [> ])))
assert testRegex(".(.).", "cat") == Ok(Some(("cat", [> Some("a")])))
assert testRegex("^a|^c", "cat") == Ok(Some(("c", [> ])))
assert testRegex("a$|t$", "cat") == Ok(Some(("t", [> ])))
assert testRegex("c(.)\\1t", "caat") == Ok(Some(("caat", [> Some("a")])))
assert testRegex(".\\b.", "cat in hat") == Ok(Some(("t ", [> ])))
assert testRegex(".\\B.", "cat in hat") == Ok(Some(("ca", [> ])))
// NYI (unicode categories):
// assert testRegex("\\p{Ll}", "Cat") == Ok(Some(("a", [> ])))
// assert testRegex("\\P{Ll}", "cat!") == Ok(Some(("!", [> ])))
assert testRegex("\\|", "c|t") == Ok(Some(("|", [> ])))
assert testRegex("[a-f]*", "cat") == Ok(Some(("ca", [> ])))
assert testRegex("[a-f\\d]*", "1cat") == Ok(Some(("1ca", [> ])))
assert testRegex(" [\\w]", "cat hat") == Ok(Some((" h", [> ])))
assert testRegex("t[\\s]", "cat\nhat") == Ok(Some(("t\n", [> ])))
assert testRegex("[[:lower:]]+", "Cat") == Ok(Some(("at", [> ])))
assert testRegex("[]]", "c]t") == Ok(Some(("]", [> ])))
assert testRegex("[-]", "c-t") == Ok(Some(("-", [> ])))
assert testRegex("[]a[]+", "c[a]t") == Ok(Some(("[a]", [> ])))
assert testRegex("[a^]+", "ca^t") == Ok(Some(("a^", [> ])))
assert testRegex(".a(?=p)", "cat nap") == Ok(Some(("na", [> ])))
assert testRegex(".a(?!t)", "cat nap") == Ok(Some(("na", [> ])))
assert testRegex("(?<=n)a.", "cat nap") == Ok(Some(("ap", [> ])))
assert testRegex("(?<!c)a.", "cat nap") == Ok(Some(("ap", [> ])))
// NYI (case-insensitive):
// assert testRegex("(?i:a)[tp]", "cAT nAp") == Ok(Some(("Ap", [> ])))
assert testRegex("(?(?<=c)a|b)+", "cabal") == Ok(Some(("ab", [> ])))

// Test Suite 2: From Python

// Simple cases
assert Result.isErr(make(")"))
assert Result.isOk(make(""))
assert testRegex("abc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("abc", "xbc") == Ok(None)
assert testRegex("abc", "axc") == Ok(None)
assert testRegex("abc", "abx") == Ok(None)
assert testRegex("abc", "xabcy") == Ok(Some(("abc", [> ])))
assert testRegex("abc", "ababc") == Ok(Some(("abc", [> ])))
// Repetition
assert testRegex("ab*c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab*bc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab*bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab*bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab+bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab+bc", "abc") == Ok(None)
assert testRegex("ab+bc", "abq") == Ok(None)
assert testRegex("ab+bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
// Maybe
assert testRegex("ab?bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab?bc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab?bc", "abbbbc") == Ok(None)
assert testRegex("ab?c", "abc") == Ok(Some(("abc", [> ])))
// Anchors
assert testRegex("^abc$", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("^abc$", "abcc") == Ok(None)
assert testRegex("^abc", "abcc") == Ok(Some(("abc", [> ])))
assert testRegex("^abc$", "aabc") == Ok(None)
assert testRegex("^", "abc") == Ok(Some(("", [> ])))
assert testRegex("$", "abc") == Ok(Some(("", [> ])))
// Dot matches
assert testRegex("a.c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("a.c", "axc") == Ok(Some(("axc", [> ])))
assert testRegex("a.*c", "axyzc") == Ok(Some(("axyzc", [> ])))
assert testRegex("a.*c", "azyzd") == Ok(None)
// Char classes
assert testRegex("a[bc]d", "abc") == Ok(None)
assert testRegex("a[bc]d", "abd") == Ok(Some(("abd", [> ])))
assert testRegex("a[b-d]e", "abd") == Ok(None)
assert testRegex("a[b-d]e", "ace") == Ok(Some(("ace", [> ])))
assert testRegex("a[b-d]", "aac") == Ok(Some(("ac", [> ])))
assert testRegex("a[-b]", "a-") == Ok(Some(("a-", [> ])))
assert testRegex("a[\\-b]", "a-") == Ok(Some(("a-", [> ])))
assert Result.isErr(make("a[]b"))
assert Result.isErr(make("a["))
assert Result.isErr(make("a\\"))
assert Result.isErr(make("abc)"))
assert Result.isErr(make("(abc"))
assert Result.isErr(make("a]"))
assert testRegex("a[]]b", "a]b") == Ok(Some(("a]b", [> ])))
assert testRegex("a[\\]]b", "a]b") == Ok(Some(("a]b", [> ])))
assert testRegex("a[^bc]d", "aed") == Ok(Some(("aed", [> ])))
assert testRegex("a[^bc]d", "abd") == Ok(None)
assert testRegex("a[^-b]c", "adc") == Ok(Some(("adc", [> ])))
assert testRegex("a[^-b]c", "a-c") == Ok(None)
assert testRegex("a[^]b]c", "a]c") == Ok(None)
assert testRegex("a[^]b]c", "adc") == Ok(Some(("adc", [> ])))
// Word boundaries:
assert testRegex("\\ba\\b", "a-") == Ok(Some(("a", [> ])))
assert testRegex("\\ba\\b", "-a") == Ok(Some(("a", [> ])))
assert testRegex("\\ba\\b", "-a-") == Ok(Some(("a", [> ])))
assert testRegex("\\by\\b", "xy") == Ok(None)
assert testRegex("\\by\\b", "yz") == Ok(None)
assert testRegex("\\by\\b", "xyz") == Ok(None)
assert testRegex("x\\b", "xyz") == Ok(None)
assert testRegex("x\\B", "xyz") == Ok(Some(("x", [> ])))
assert testRegex("\\Bz", "xyz") == Ok(Some(("z", [> ])))
assert testRegex("z\\B", "xyz") == Ok(None)
assert testRegex("\\Bx", "xyz") == Ok(None)
assert testRegex("\\Ba\\B", "a-") == Ok(None)
assert testRegex("\\Ba\\B", "-a") == Ok(None)
assert testRegex("\\Ba\\B", "-a-") == Ok(None)
assert testRegex("\\By\\B", "xy") == Ok(None)
assert testRegex("\\By\\B", "yz") == Ok(None)
assert testRegex("\\By\\b", "xy") == Ok(Some(("y", [> ])))
assert testRegex("\\by\\B", "yz") == Ok(Some(("y", [> ])))
assert testRegex("\\By\\B", "xyz") == Ok(Some(("y", [> ])))
// Alternation
assert testRegex("ab|cd", "abc") == Ok(Some(("ab", [> ])))
assert testRegex("ab|cd", "abcd") == Ok(Some(("ab", [> ])))
// Groups (plus many corner cases)
assert testRegex("()ef", "def") == Ok(Some(("ef", [> Some("")])))
assert testRegex("$b", "b") == Ok(None)
assert testRegex("a\\(b", "a(b") == Ok(Some(("a(b", [> ])))
assert testRegex("a\\(*b", "ab") == Ok(Some(("ab", [> ])))
assert testRegex("a\\\\b", "a\\b") == Ok(Some(("a\\b", [> ])))
assert testRegex("((a))", "abc") == Ok(Some(("a", [> Some("a"), Some("a")])))
assert testRegex("(a)b(c)", "abc") == Ok(Some(("abc", [> Some("a"), Some("c")])))
assert testRegex("a+b+c", "aabbabc") == Ok(Some(("abc", [> ])))
assert testRegex("(a+|b)*", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b)+", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b)?", "ab") == Ok(Some(("a", [> Some("a")])))
assert Result.isErr(make(")("))
assert testRegex("[^ab]*", "cde") == Ok(Some(("cde", [> ])))
assert testRegex("abc", "") == Ok(None)
assert testRegex("a*", "") == Ok(Some(("", [> ])))
assert testRegex("a|b|c|d|e", "e") == Ok(Some(("e", [> ])))
assert testRegex("(a|b|c|d|e)f", "ef") == Ok(Some(("ef", [> Some("e")])))
assert testRegex("abcd*efg", "abcdefg") == Ok(Some(("abcdefg", [> ])))
assert testRegex("ab*", "xabyabbbz") == Ok(Some(("ab", [> ])))
assert testRegex("ab*", "xayabbbz") == Ok(Some(("a", [> ])))
assert testRegex("(ab|cd)e", "abcde") == Ok(Some(("cde", [> Some("cd")])))

assert testRegex("[abhgefdc]ij", "hij") == Ok(Some(("hij", [> ])))
assert testRegex("^(ab|cd)e", "abcde") == Ok(None)
assert testRegex("(abc|)ef", "abcdef") == Ok(Some(("ef", [> Some("")])))
assert testRegex("(a|b)c*d", "abcd") == Ok(Some(("bcd", [> Some("b")])))
assert testRegex("(ab|ab*)bc", "abc") == Ok(Some(("abc", [> Some("a")])))
assert testRegex("a([bc]*)c*", "abc") == Ok(Some(("abc", [> Some("bc")])))
assert testRegex("a([bc]*)(c*d)", "abcd") == Ok(Some(("abcd", [> Some("bc"), Some("d")])))
assert testRegex("a([bc]+)(c*d)", "abcd") == Ok(Some(("abcd", [> Some("bc"), Some("d")])))
assert testRegex("a([bc]*)(c+d)", "abcd") == Ok(Some(("abcd", [> Some("b"), Some("cd")])))
assert testRegex("a[bcd]*dcdcde", "adcdcde") == Ok(Some(("adcdcde", [> ])))
assert testRegex("a[bcd]+dcdcde", "adcdcde") == Ok(None)

assert testRegex("(ab|a)b*c", "abc") == Ok(Some(("abc", [> Some("ab")])))
assert testRegex("((a)(b)c)(d)", "abcd") == Ok(Some(("abcd", [> Some("abc"), Some("a"), Some("b"), Some("d")])))
assert testRegex("[a-zA-Z_][a-zA-Z0-9_]*", "alpha") == Ok(Some(("alpha", [> ])))
assert testRegex("^a(bc+|b[eh])g|.h$", "abh") == Ok(Some(("bh", [> None])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "effgz") == Ok(Some(("effgz", [> Some("effgz"), None])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "ij") == Ok(Some(("ij", [> Some("ij"), Some("j")])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "effg") == Ok(None)
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "bcdd") == Ok(None)
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "reffgz") == Ok(Some(("effgz", [> Some("effgz"), None])))
assert testRegex("(((((((((a)))))))))", "a") == Ok(Some(("a", [> Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a")])))
assert testRegex("multiple words of text", "uh-uh") == Ok(None)
assert testRegex("multiple words", "multiple words, yeah") == Ok(Some(("multiple words", [> ])))
assert testRegex("(.*)c(.*)", "abcde") == Ok(Some(("abcde", [> Some("ab"), Some("de")])))
assert testRegex("\\((.*), (.*)\\)", "(a, b)") == Ok(Some(("(a, b)", [> Some("a"), Some("b")])))
assert testRegex("[k]", "ab") == Ok(None)
assert testRegex("a[-]?c", "ac") == Ok(Some(("ac", [> ])))
assert testRegex("(abc)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("([a-c]*)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("^(.+)?B", "AB") == Ok(Some(("AB", [> Some("A")])))
assert testRegex("(a+).\\1$", "aaaaa") == Ok(Some(("aaaaa", [> Some("aa")])))
assert testRegex("^(a+).\\1$", "aaaa") == Ok(None)
assert testRegex("(abc)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("([a-c]+)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("(a)\\1", "aa") == Ok(Some(("aa", [> Some("a")])))
assert testRegex("(a+)\\1", "aa") == Ok(Some(("aa", [> Some("a")])))
assert testRegex("(a+)+\\1", "aa") == Ok(Some(("aa", [> Some("a")])))
assert testRegex("(a).+\\1", "aba") == Ok(Some(("aba", [> Some("a")])))
assert testRegex("(a)ba*\\1", "aba") == Ok(Some(("aba", [> Some("a")])))
assert testRegex("(aa|a)a\\1$", "aaa") == Ok(Some(("aaa", [> Some("a")])))
assert testRegex("(a|aa)a\\1$", "aaa") == Ok(Some(("aaa", [> Some("a")])))
assert testRegex("(a+)a\\1$", "aaa") == Ok(Some(("aaa", [> Some("a")])))
assert testRegex("([abc]*)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("(a)(b)c|ab", "ab") == Ok(Some(("ab", [> None, None])))
assert testRegex("(a)+x", "aaax") == Ok(Some(("aaax", [> Some("a")])))
assert testRegex("([ac])+x", "aacx") == Ok(Some(("aacx", [> Some("c")])))
assert testRegex("([^/]*/)*sub1/", "d:msgs/tdir/sub1/trial/away.cpp") == Ok(Some(("d:msgs/tdir/sub1/", [> Some("tdir/")])))
assert testRegex("([^.]*)\\.([^:]*):[T ]+(.*)", "track1.title:TBlah blah blah") == Ok(Some(("track1.title:TBlah blah blah", [> Some("track1"), Some("title"), Some("Blah blah blah")])))
assert testRegex("([^N]*N)+", "abNNxyzN") == Ok(Some(("abNNxyzN", [> Some("xyzN")])))
assert testRegex("([^N]*N)+", "abNNxyz") == Ok(Some(("abNN", [> Some("N")])))
assert testRegex("([abc]*)x", "abcx") == Ok(Some(("abcx", [> Some("abc")])))
assert testRegex("([abc]*)x", "abc") == Ok(None)
assert testRegex("([xyz]*)x", "abcx") == Ok(Some(("x", [> Some("")])))
assert testRegex("(a)+b|aac", "aac") == Ok(Some(("aac", [> None])))

// Test Suite 3: Tests which Python takes from Perl

assert testRegex("abc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("abc", "xbc") == Ok(None)
assert testRegex("abc", "axc") == Ok(None)
assert testRegex("abc", "abx") == Ok(None)
assert testRegex("abc", "xabcy") == Ok(Some(("abc", [> ])))
assert testRegex("abc", "ababc") == Ok(Some(("abc", [> ])))
assert testRegex("ab*c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab*bc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab*bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab*bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab{0,}bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab+bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab+bc", "abc") == Ok(None)
assert testRegex("ab+bc", "abq") == Ok(None)
assert testRegex("ab{1,}bc", "abq") == Ok(None)
assert testRegex("ab+bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab{1,}bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab{1,3}bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab{3,4}bc", "abbbbc") == Ok(Some(("abbbbc", [> ])))
assert testRegex("ab{4,5}bc", "abbbbc") == Ok(None)
assert testRegex("ab?bc", "abbc") == Ok(Some(("abbc", [> ])))
assert testRegex("ab?bc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab{0,1}bc", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab?bc", "abbbbc") == Ok(None)
assert testRegex("ab?c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("ab{0,1}c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("^abc$", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("^abc$", "abcc") == Ok(None)
assert testRegex("^abc", "abcc") == Ok(Some(("abc", [> ])))
assert testRegex("^abc$", "aabc") == Ok(None)
assert testRegex("abc$", "aabc") == Ok(Some(("abc", [> ])))
assert testRegex("^", "abc") == Ok(Some(("", [> ])))
assert testRegex("$", "abc") == Ok(Some(("", [> ])))
assert testRegex("a.c", "abc") == Ok(Some(("abc", [> ])))
assert testRegex("a.c", "axc") == Ok(Some(("axc", [> ])))
assert testRegex("a.*c", "axyzc") == Ok(Some(("axyzc", [> ])))
assert testRegex("a.*c", "axyzd") == Ok(None)
assert testRegex("a[bc]d", "abc") == Ok(None)
assert testRegex("a[bc]d", "abd") == Ok(Some(("abd", [> ])))
assert testRegex("a[b-d]e", "abd") == Ok(None)
assert testRegex("a[b-d]e", "ace") == Ok(Some(("ace", [> ])))
assert testRegex("a[b-d]", "aac") == Ok(Some(("ac", [> ])))

assert testRegex("a[-b]", "a-") == Ok(Some(("a-", [> ])))
assert testRegex("a[b-]", "a-") == Ok(Some(("a-", [> ])))
assert Result.isErr(testRegex("a[b-a]", "-"))
assert Result.isErr(testRegex("a[]b", "-"))
assert Result.isErr(testRegex("a[", "-"))
// These next two tests are different from Python's parsing semantics
assert Result.isErr(testRegex("a]", "-"))
assert testRegex("a\\]", "a]") == Ok(Some(("a]", [> ])))
assert testRegex("a[]]b", "a]b") == Ok(Some(("a]b", [> ])))
assert testRegex("a[^bc]d", "aed") == Ok(Some(("aed", [> ])))
assert testRegex("a[^bc]d", "abd") == Ok(None)
assert testRegex("a[^-b]c", "adc") == Ok(Some(("adc", [> ])))
assert testRegex("a[^-b]c", "a-c") == Ok(None)
assert testRegex("a[^]b]c", "a]c") == Ok(None)
assert testRegex("a[^]b]c", "adc") == Ok(Some(("adc", [> ])))
assert testRegex("ab|cd", "abc") == Ok(Some(("ab", [> ])))
assert testRegex("ab|cd", "abcd") == Ok(Some(("ab", [> ])))
assert testRegex("()ef", "def") == Ok(Some(("ef", [> Some("")])))
assert Result.isErr(testRegex("*a", "-"))
assert Result.isErr(testRegex("(*)b", "-"))
assert testRegex("$b", "b") == Ok(None)
assert Result.isErr(testRegex("a\\", "-"))
assert testRegex("a\\(b", "a(b") == Ok(Some(("a(b", [> ])))
assert testRegex("a\\(*b", "ab") == Ok(Some(("ab", [> ])))
assert testRegex("a\\(*b", "a((b") == Ok(Some(("a((b", [> ])))
assert testRegex("a\\\\b", "a\\b") == Ok(Some(("a\\b", [> ])))
assert Result.isErr(testRegex("abc)", "-"))
assert Result.isErr(testRegex("(abc", "-"))
assert testRegex("((a))", "abc") == Ok(Some(("a", [> Some("a"), Some("a")])))
assert testRegex("(a)b(c)", "abc") == Ok(Some(("abc", [> Some("a"), Some("c")])))
assert testRegex("a+b+c", "aabbabc") == Ok(Some(("abc", [> ])))
assert testRegex("a{1,}b{1,}c", "aabbabc") == Ok(Some(("abc", [> ])))
assert Result.isErr(testRegex("a**", "-"))
assert testRegex("a.+?c", "abcabc") == Ok(Some(("abc", [> ])))
assert testRegex("(a+|b)*", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b){0,}", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b)+", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b){1,}", "ab") == Ok(Some(("ab", [> Some("b")])))
assert testRegex("(a+|b)?", "ab") == Ok(Some(("a", [> Some("a")])))
assert testRegex("(a+|b){0,1}", "ab") == Ok(Some(("a", [> Some("a")])))
assert Result.isErr(testRegex(")(", "-"))
assert testRegex("[^ab]*", "cde") == Ok(Some(("cde", [> ])))
assert testRegex("abc", "") == Ok(None)
assert testRegex("a*", "") == Ok(Some(("", [> ])))
assert testRegex("([abc])*d", "abbbcd") == Ok(Some(("abbbcd", [> Some("c")])))
assert testRegex("([abc])*bcd", "abcd") == Ok(Some(("abcd", [> Some("a")])))
assert testRegex("a|b|c|d|e", "e") == Ok(Some(("e", [> ])))
assert testRegex("(a|b|c|d|e)f", "ef") == Ok(Some(("ef", [> Some("e")])))
assert testRegex("abcd*efg", "abcdefg") == Ok(Some(("abcdefg", [> ])))
assert testRegex("ab*", "xabyabbbz") == Ok(Some(("ab", [> ])))
assert testRegex("ab*", "xayabbbz") == Ok(Some(("a", [> ])))
assert testRegex("(ab|cd)e", "abcde") == Ok(Some(("cde", [> Some("cd")])))
assert testRegex("[abhgefdc]ij", "hij") == Ok(Some(("hij", [> ])))
assert testRegex("^(ab|cd)e", "abcde") == Ok(None)
assert testRegex("(abc|)ef", "abcdef") == Ok(Some(("ef", [> Some("")])))
assert testRegex("(a|b)c*d", "abcd") == Ok(Some(("bcd", [> Some("b")])))
assert testRegex("(ab|ab*)bc", "abc") == Ok(Some(("abc", [> Some("a")])))
assert testRegex("a([bc]*)c*", "abc") == Ok(Some(("abc", [> Some("bc")])))
assert testRegex("a([bc]*)(c*d)", "abcd") == Ok(Some(("abcd", [> Some("bc"), Some("d")])))
assert testRegex("a([bc]+)(c*d)", "abcd") == Ok(Some(("abcd", [> Some("bc"), Some("d")])))
assert testRegex("a([bc]*)(c+d)", "abcd") == Ok(Some(("abcd", [> Some("b"), Some("cd")])))
assert testRegex("a[bcd]*dcdcde", "adcdcde") == Ok(Some(("adcdcde", [> ])))
assert testRegex("a[bcd]+dcdcde", "adcdcde") == Ok(None)
assert testRegex("(ab|a)b*c", "abc") == Ok(Some(("abc", [> Some("ab")])))
assert testRegex("((a)(b)c)(d)", "abcd") == Ok(Some(("abcd", [> Some("abc"), Some("a"), Some("b"), Some("d")])))
assert testRegex("[a-zA-Z_][a-zA-Z0-9_]*", "alpha") == Ok(Some(("alpha", [> ])))
assert testRegex("^a(bc+|b[eh])g|.h$", "abh") == Ok(Some(("bh", [> None])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "effgz") == Ok(Some(("effgz", [> Some("effgz"), None])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "ij") == Ok(Some(("ij", [> Some("ij"), Some("j")])))
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "effg") == Ok(None)
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "bcdd") == Ok(None)
assert testRegex("(bc+d$|ef*g.|h?i(j|k))", "reffgz") == Ok(Some(("effgz", [> Some("effgz"), None])))
assert testRegex("((((((((((a))))))))))", "a") == Ok(Some(("a", [> Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a")])))
assert testRegex("((((((((((a))))))))))\\10", "aa") == Ok(Some(("aa", [> Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a")])))
assert Result.isErr(testRegex("((((((((((a))))))))))\\41", ""))
// NYI (case-insensitive):
// assert Result.isErr(testRegex("(?i:((((((((((a))))))))))\\41)", ""))
assert testRegex("(((((((((a)))))))))", "a") == Ok(Some(("a", [> Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a"), Some("a")])))
assert testRegex("multiple words of text", "uh-uh") == Ok(None)
assert testRegex("multiple words", "multiple words, yeah") == Ok(Some(("multiple words", [> ])))
assert testRegex("(.*)c(.*)", "abcde") == Ok(Some(("abcde", [> Some("ab"), Some("de")])))
assert testRegex("\\((.*), (.*)\\)", "(a, b)") == Ok(Some(("(a, b)", [> Some("a"), Some("b")])))
assert testRegex("[k]", "ab") == Ok(None)
assert testRegex("a[-]?c", "ac") == Ok(Some(("ac", [> ])))
assert testRegex("(abc)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
assert testRegex("([a-c]*)\\1", "abcabc") == Ok(Some(("abcabc", [> Some("abc")])))
// NYI (case-insensitive):
// assert testRegex("(?i:abc)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:abc)", "XBC") == Ok(None)
// assert testRegex("(?i:abc)", "AXC") == Ok(None)
// assert testRegex("(?i:abc)", "ABX") == Ok(None)
// assert testRegex("(?i:abc)", "XABCY") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:abc)", "ABABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab*c)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab*bc)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab*bc)", "ABBC") == Ok(Some(("ABBC", [> ])))
// assert testRegex("(?i:ab*?bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab{0,}?bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab+?bc)", "ABBC") == Ok(Some(("ABBC", [> ])))
// assert testRegex("(?i:ab+bc)", "ABC") == Ok(None)
// assert testRegex("(?i:ab+bc)", "ABQ") == Ok(None)
// assert testRegex("(?i:ab{1,}bc)", "ABQ") == Ok(None)
// assert testRegex("(?i:ab+bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab{1,}?bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab{1,3}?bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab{3,4}?bc)", "ABBBBC") == Ok(Some(("ABBBBC", [> ])))
// assert testRegex("(?i:ab{4,5}?bc)", "ABBBBC") == Ok(None)
// assert testRegex("(?i:ab??bc)", "ABBC") == Ok(Some(("ABBC", [> ])))
// assert testRegex("(?i:ab??bc)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab{0,1}?bc)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab??bc)", "ABBBBC") == Ok(None)
// assert testRegex("(?i:ab??c)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:ab{0,1}?c)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:^abc$)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:^abc$)", "ABCC") == Ok(None)
// assert testRegex("(?i:^abc)", "ABCC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:^abc$)", "AABC") == Ok(None)
// assert testRegex("(?i:abc$)", "AABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:^)", "ABC") == Ok(Some(("", [> ])))
// assert testRegex("(?i:$)", "ABC") == Ok(Some(("", [> ])))
// assert testRegex("(?i:a.c)", "ABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:a.c)", "AXC") == Ok(Some(("AXC", [> ])))
// assert testRegex("(?i:a.*?c)", "AXYZC") == Ok(Some(("AXYZC", [> ])))
// assert testRegex("(?i:a.*c)", "AXYZD") == Ok(None)
// assert testRegex("(?i:a[bc]d)", "ABC") == Ok(None)
// assert testRegex("(?i:a[bc]d)", "ABD") == Ok(Some(("ABD", [> ])))
// assert testRegex("(?i:a[b-d]e)", "ABD") == Ok(None)
// assert testRegex("(?i:a[b-d]e)", "ACE") == Ok(Some(("ACE", [> ])))
// assert testRegex("(?i:a[b-d])", "AAC") == Ok(Some(("AC", [> ])))
// assert testRegex("(?i:a[-b])", "A-") == Ok(Some(("A-", [> ])))
// assert testRegex("(?i:a[b-])", "A-") == Ok(Some(("A-", [> ])))
// assert Result.isErr(testRegex("(?i:a[b-a])", "-"))
// assert Result.isErr(testRegex("(?i:a[]b)", "-"))
// assert Result.isErr(testRegex("(?i:a[)", "-"))
// assert testRegex("(?i:a])", "A]") == Ok(Some(("A]", [> ])))
// assert testRegex("(?i:a[]]b"), "A]B") == Ok(Some(("A]B", [> ])))
// assert testRegex("(?i:a[^bc]d)", "AED") == Ok(Some(("AED", [> ])))
// assert testRegex("(?i:a[^bc]d)", "ABD") == Ok(None)
// assert testRegex("(?i:a[^-b]c)", "ADC") == Ok(Some(("ADC", [> ])))
// assert testRegex("(?i:a[^-b]c)", "A-C") == Ok(None)
// assert testRegex("(?i:a[^]b]c)", "A]C") == Ok(None)
// assert testRegex("(?i:a[^]b]c)", "ADC") == Ok(Some(("ADC", [> ])))
// assert testRegex("(?i:ab|cd)", "ABC") == Ok(Some(("AB", [> ])))
// assert testRegex("(?i:ab|cd)", "ABCD") == Ok(Some(("AB", [> ])))
// assert testRegex("(?i:()ef))", "DEF") == Ok(Some(("EF", [> Some("")])))
// assert Result.isErr(testRegex("(?i:*a)", "-"))
// assert Result.isErr(testRegex("(?i:(*)b)", "-"))
// assert testRegex("(?i:$b)", "B") == Ok(None)
// assert Result.isErr(testRegex("(?i:a\\)", "-"))
// assert testRegex("(?i:a\\(b)", "A(B") == Ok(Some(("A(B", [> ])))
// assert testRegex("(?i:a\\(*b)", "AB") == Ok(Some(("AB", [> ])))
// assert testRegex("(?i:a\\(*b)", "A((B") == Ok(Some(("A((B", [> ])))
// assert testRegex("(?i:a\\\\b)", "A\\B") == Ok(Some(("A\\B", [> ])))
// assert Result.isErr(testRegex("(?i:abc))", "-"))
// assert Result.isErr(testRegex("(?i:(abc)", "-"))
// assert testRegex("(?i:((a)))", "ABC") == Ok(Some(("A", [> Some("A"), Some("A")])))
// assert testRegex("(?i:(a)b(c))", "ABC") == Ok(Some(("ABC", [> Some("A"), Some("C")])))
// assert testRegex("(?i:a+b+c)", "AABBABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:a{1,}b{1,}c)", "AABBABC") == Ok(Some(("ABC", [> ])))
// assert Result.isErr(testRegex("(?i:a**)", "-"))
// assert testRegex("(?i:a.+?c)", "ABCABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:a.*?c)", "ABCABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:a.{0,5}?c)", "ABCABC") == Ok(Some(("ABC", [> ])))
// assert testRegex("(?i:(a+|b)*)", "AB") == Ok(Some(("AB", [> Some("B")])))
// assert testRegex("(?i:(a+|b){0,})", "AB") == Ok(Some(("AB", [> Some("B")])))
// assert testRegex("(?i:(a+|b)+)", "AB") == Ok(Some(("AB", [> Some("B")])))
// assert testRegex("(?i:(a+|b){1,})", "AB") == Ok(Some(("AB", [> Some("B")])))
// assert testRegex("(?i:(a+|b)?)", "AB") == Ok(Some(("A", [> Some("A")])))
// assert testRegex("(?i:(a+|b){0,1})", "AB") == Ok(Some(("A", [> Some("A")])))
// assert testRegex("(?i:(a+|b){0,1}?)", "AB") == Ok(Some(("", [> None])))
// assert Result.isErr(testRegex("(?i:)()", "-"))
// assert testRegex("(?i:[^ab]*)", "CDE") == Ok(Some(("CDE", [> ])))
// assert testRegex("(?i:abc)", "") == Ok(None)
// assert testRegex("(?i:a*)", "") == Ok(Some(("", [> ])))
// assert testRegex("(?i:([abc])*d)", "ABBBCD") == Ok(Some(("ABBBCD", [> Some("C")])))
// assert testRegex("(?i:([abc])*bcd)", "ABCD") == Ok(Some(("ABCD", [> Some("A")])))
// assert testRegex("(?i:a|b|c|d|e)", "E") == Ok(Some(("E", [> ])))
// assert testRegex("(?i:(a|b|c|d|e)f)", "EF") == Ok(Some(("EF", [> Some("E")])))
// assert testRegex("(?i:abcd*efg)", "ABCDEFG") == Ok(Some(("ABCDEFG", [> ])))
// assert testRegex("(?i:ab*)", "XABYABBBZ") == Ok(Some(("AB", [> ])))
// assert testRegex("(?i:ab*)", "XAYABBBZ") == Ok(Some(("A", [> ])))
// assert testRegex("(?i:(ab|cd)e)", "ABCDE") == Ok(Some(("CDE", [> Some("CD")])))
// assert testRegex("(?i:[abhgefdc]ij)", "HIJ") == Ok(Some(("HIJ", [> ])))
// assert testRegex("(?i:^(ab|cd)e)", "ABCDE") == Ok(None)
// assert testRegex("(?i:(abc|)ef)", "ABCDEF") == Ok(Some(("EF", [> Some("")])))
// assert testRegex("(?i:(a|b)c*d)", "ABCD") == Ok(Some(("BCD", [> Some("B")])))
// assert testRegex("(?i:(ab|ab*)bc)", "ABC") == Ok(Some(("ABC", [> Some("A")])))
// assert testRegex("(?i:a([bc]*)c*)", "ABC") == Ok(Some(("ABC", [> Some("BC")])))
// assert testRegex("(?i:a([bc]*)(c*d))", "ABCD") == Ok(Some(("ABCD", [> Some("BC"), Some("D")])))
// assert testRegex("(?i:a([bc]+)(c*d))", "ABCD") == Ok(Some(("ABCD", [> Some("BC"), Some("D")])))
// assert testRegex("(?i:a([bc]*)(c+d))", "ABCD") == Ok(Some(("ABCD", [> Some("B"), Some("CD")])))
// assert testRegex("(?i:a[bcd]*dcdcde)", "ADCDCDE") == Ok(Some(("ADCDCDE", [> ])))
// assert testRegex("(?i:a[bcd]+dcdcde)", "ADCDCDE") == Ok(None)
// assert testRegex("(?i:(ab|a)b*c)", "ABC") == Ok(Some(("ABC", [> Some("AB")])))
// assert testRegex("(?i:((a)(b)c)(d))", "ABCD") == Ok(Some(("ABCD", [> Some("ABC"), Some("A"), Some("B"), Some("D")])))
// assert testRegex("(?i:[a-zA-Z_][a-zA-Z0-9_]*)", "ALPHA") == Ok(Some(("ALPHA", [> ])))
// assert testRegex("(?i:^a(bc+|b[eh])g|.h$)", "ABH") == Ok(Some(("BH", [> None])))
// assert testRegex("(?i:(bc+d$|ef*g.|h?i(j|k)))", "EFFGZ") == Ok(Some(("EFFGZ", [> Some("EFFGZ"), None])))
// assert testRegex("(?i:(bc+d$|ef*g.|h?i(j|k)))", "IJ") == Ok(Some(("IJ", [> Some("IJ"), Some("J")])))
// assert testRegex("(?i:(bc+d$|ef*g.|h?i(j|k)))", "EFFG") == Ok(None)
// assert testRegex("(?i:(bc+d$|ef*g.|h?i(j|k)))", "BCDD") == Ok(None)
// assert testRegex("(?i:(bc+d$|ef*g.|h?i(j|k)))", "REFFGZ") == Ok(Some(("EFFGZ", [> Some("EFFGZ"), None])))
// assert testRegex("(?i:((((((((((a)))))))))))", "A") == Ok(Some(("A", [> Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A")])))
// assert testRegex("(?i:((((((((((a))))))))))\\10)", "AA") == Ok(Some(("AA", [> Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A")])))
// assert testRegex("(?i:(((((((((a))))))))))", "A") == Ok(Some(("A", [> Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A"), Some("A")])))
// assert testRegex("(?i:(?:(?:(?:(?:(?:(?:(?:(?:(?:(a)))))))))))", "A") == Ok(Some(("A", [> Some("A")])))
// assert testRegex("(?i:(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c)))))))))))", "C") == Ok(Some(("C", [> Some("C")])))
// assert testRegex("(?i:multiple words of text)", "UH-UH") == Ok(None)
// assert testRegex("(?i:multiple words)", "MULTIPLE WORDS, YEAH") == Ok(Some(("MULTIPLE WORDS", [> ])))
// assert testRegex("(?i:(.*)c(.*))", "ABCDE") == Ok(Some(("ABCDE", [> Some("AB"), Some("DE")])))
// assert testRegex("(?i:\\((.*), (.*)\\))", "(A, B)") == Ok(Some(("(A, B)", [> Some("A"), Some("B")])))
// assert testRegex("(?i:[k])", "AB") == Ok(None)
// assert testRegex("(?i:a[-]?c)", "AC") == Ok(Some(("AC", [> ])))
// assert testRegex("(?i:(abc)\\1)", "ABCABC") == Ok(Some(("ABCABC", [> Some("ABC")])))
// assert testRegex("(?i:([a-c]*)\\1)", "ABCABC") == Ok(Some(("ABCABC", [> Some("ABC")])))
assert testRegex("a(?!b).", "abad") == Ok(Some(("ad", [> ])))
assert testRegex("a(?=d).", "abad") == Ok(Some(("ad", [> ])))
assert testRegex("a(?=c|d).", "abad") == Ok(Some(("ad", [> ])))
assert testRegex("a(?:b|c|d)(.)", "ace") == Ok(Some(("ace", [> Some("e")])))
assert testRegex("a(?:b|c|d)*(.)", "ace") == Ok(Some(("ace", [> Some("e")])))
assert testRegex("a(?:b|c|d)+?(.)", "ace") == Ok(Some(("ace", [> Some("e")])))
assert testRegex("a(?:b|(c|e){1,2}?|d)+?(.)", "ace") == Ok(Some(("ace", [> Some("c"), Some("e")])))
assert testRegex("^(.+)?B", "AB") == Ok(Some(("AB", [> Some("A")])))
assert testRegex("(?<!-):(.*?)(?<!-):", "a:bc-:de:f") == Ok(Some((":bc-:de:", [> Some("bc-:de")])))
assert testRegex("(?<!\\\\):(.*?)(?<!\\\\):", "a:bc\\:de:f") == Ok(Some((":bc\\:de:", [> Some("bc\\:de")])))
assert testRegex("(?<!\\?)'(.*?)(?<!\\?)'", "a'bc?'de'f") == Ok(Some(("'bc?'de'", [> Some("bc?'de")])))
assert testRegex("^abc", "jkl\nabc\nxyz") == Ok(None)
assert testRegex("(?m:^abc)", "jkl\nabc\nxyz") == Ok(Some(("abc", [> ])))
assert testRegex("(?m:abc$)", "jkl\nxyzabc\n123") == Ok(Some(("abc", [> ])))
assert testRegex("a.b", "a\nb") == Ok(Some(("a\nb", [> ])))
assert testRegex("(?s:a.b)", "a\nb") == Ok(Some(("a\nb", [> ])))
assert testRegex("(?m:a.b)", "a\nb") == Ok(None)
assert testRegex("\\w+", "--ab_cd0123--") == Ok(Some(("ab_cd0123", [> ])))
assert testRegex("[\\w]+", "--ab_cd0123--") == Ok(Some(("ab_cd0123", [> ])))
assert testRegex("\\D+", "1234abc5678") == Ok(Some(("abc", [> ])))
assert testRegex("[\\D]+", "1234abc5678") == Ok(Some(("abc", [> ])))
assert testRegex("[\\da-fA-F]+", "123abc") == Ok(Some(("123abc", [> ])))
assert testRegex("([\\s]*)([\\S]*)([\\s]*)", " testing!1972") == Ok(Some((" testing!1972", [> Some(" "), Some("testing!1972"), Some("")])))
assert testRegex("(\\s*)(\\S*)(\\s*)", " testing!1972") == Ok(Some((" testing!1972", [> Some(" "), Some("testing!1972"), Some("")])))
assert testRegex("(([a-z]+):)?([a-z]+)$", "smil") == Ok(Some(("smil", [> None, None, Some("smil")])))
// We handle this the same as Racket (returning None instead of an error); is that a mistake?
// This isn't a well-defined regexp, so maybe we should error in the parser...
// assert Result.isErr(testRegex("((.)\\1+)", ""))
// see grain-lang/grain#695
assert testRegex(".*d", "abc\nabd") == Ok(Some(("abc\nabd", [> ])))
assert testRegex("(?m:.*d)", "abc\nabd") == Ok(Some(("abd", [> ])))
assert Result.isErr(testRegex("(", ""))
assert testRegex("(x?)?", "x") == Ok(Some(("x", [> Some("x")])))
assert testRegex("(?<!abc)(d.f)", "abcdefdof") == Ok(Some(("dof", [> Some("dof")])))
assert testRegex("[\\w-]+", "laser_beam") == Ok(Some(("laser_beam", [> ])))
assert testRegex(".*?\\S *:", "xx:") == Ok(Some(("xx:", [> ])))
assert testRegex("a[ ]*?\\ (\\d+).*", "a   10") == Ok(Some(("a   10", [> Some("10")])))
assert testRegex("a[ ]*?\\ (\\d+).*", "a    10") == Ok(Some(("a    10", [> Some("10")])))
// NYI (case-insensitive):
// assert testRegex("(?i:M+)", "MMM") == Ok(Some(("MMM", [> ])))
// assert testRegex("(?i:m+)", "MMM") == Ok(Some(("MMM", [> ])))
// assert testRegex("(?i:[M]+)", "MMM") == Ok(Some(("MMM", [> ])))
// assert testRegex("(?i:[m]+)", "MMM") == Ok(Some(("MMM", [> ])))
assert Result.isErr(testRegex("^*", ""))
assert testRegex("\"(?:\\\\\"|[^\"])*?\"", "\"\\\"\"") == Ok(Some(("\"\\\"\"", [> ])))
assert testRegex("(?m:^.*?$)", "one\ntwo\nthree\n") == Ok(Some(("one", [> ])))
assert testRegex("a[^>]*?b", "a>b") == Ok(None)
assert testRegex("^a*?$", "foo") == Ok(None)
assert testRegex("^((a)c)?(ab)$", "ab") == Ok(Some(("ab", [> None, None, Some("ab")])))
assert testRegex("^([ab]*?)(?=(b)?)c", "abc") == Ok(Some(("abc", [> Some("ab"), None])))
assert testRegex("^([ab]*?)(?!(b))c", "abc") == Ok(Some(("abc", [> Some("ab"), None])))
assert testRegex("^([ab]*?)(?<!(a))c", "abc") == Ok(Some(("abc", [> Some("ab"), None])))

// Delimited versions
assert testRegex("(-[0-9]*)+", "a-12--345b") == Ok(Some(("-12--345", [> Some("-345")])))
assert testRegexRange("(-[0-9]*)+", "a-12--345b", 2, 10) == Ok(Some(("--345", [> Some("-345")])))
assert testRegexRange("(-[0-9]*)+", "a-12--345b", 2, 8) == Ok(Some(("--34", [> Some("-34")])))

// Positions
assert testRegexPositions("(-[0-9]*)+",  "a-12--345b") == Ok(Some(((1, 9), [> Some((5, 9))])))
assert testRegexPositionsRange("(-[0-9]*)+",  "a-12--345b", 2, 10) == Ok(Some(((4, 9), [> Some((5, 9))])))
assert testRegexPositionsRange("(-[0-9]*)+",  "a-12--345b", 2, 8) == Ok(Some(((4, 8), [> Some((5, 8))])))

let unwrapResult = (r) => {
  match(r) {
    Ok(v) => v,
    Err(e) => fail e
  }
}

// Replacement tests (mostly testing replacement string syntax)
assert replace(unwrapResult(make("b(ar)")), "foo bar", "baza$1") == "foo bazaar"
assert replace(unwrapResult(make("b(ar)")), "foo bar", "baza$1_$1") == "foo bazaar_ar"
assert replace(unwrapResult(make("b(ar)")), "foo bar", "baza$2") == "foo baza"
assert replace(unwrapResult(make("b(ar)")), "foo bar bar", "baza$1$$") == "foo bazaar$ bar"


// *All variants
assert List.map(mr => flattenResult(mr), findAll(unwrapResult(make("x.")), "12x4x6")) == [("x4", [>]), ("x6", [>])]
assert List.map(mr => flattenResultPositions(mr), findAll(unwrapResult(make("x.")), "12x4x6")) == [((2, 4), [>]), ((4, 6), [>])]

assert replaceAll(unwrapResult(make("b(ar)")), "foo bar bar", "baza$1") == "foo bazaar bazaar"
assert replaceAll(unwrapResult(make("mi")), "mi casa", "su") == "su casa"
assert replaceAll(unwrapResult(make("a(.)")), "xabcyawz", "&") == "x&cy&z"
assert replaceAll(unwrapResult(make("a(.)")), "xabcyawz", "\\") == "x\\cy\\z"
assert replaceAll(unwrapResult(make("a(.)")), "xabcyawz", "&$1\\$&$99=") == "x&b\\ab=cy&w\\aw=z"
assert replaceAll(unwrapResult(make("p")), "apple", "$0$.0") == "ap0p0le"
assert replaceAll(unwrapResult(make("b(ar)")), "bazbarfoo", "$`") == "bazbazfoo"
assert replaceAll(unwrapResult(make("b(ar)")), "bazbarfoo", "$'") == "bazfoofoo"
