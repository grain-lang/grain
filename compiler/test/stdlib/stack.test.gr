module StackTest

include "stack"
from Stack use { Immutable as ImmStack }

// Mutable stack tests

let empty = Stack.make()
assert Stack.isEmpty(empty)
assert Stack.size(empty) == 0
assert Stack.peek(empty) == None
assert Stack.pop(empty) == None
assert Stack.size(empty) == 0

let stack = Stack.make()
Stack.push(1, stack)
Stack.push(2, stack)
Stack.push(3, stack)

assert !Stack.isEmpty(stack)
assert Stack.size(stack) == 3
assert Stack.peek(stack) == Some(3)

assert Stack.pop(stack) == Some(3)
assert Stack.peek(stack) == Some(2)
assert Stack.size(stack) == 2

Stack.push(4, stack)
assert Stack.size(stack) == 3
assert Stack.peek(stack) == Some(4)
let copy = Stack.copy(stack)
Stack.pop(copy)
assert Stack.size(copy) == 2
assert Stack.size(stack) == 3
Stack.clear(stack)
assert Stack.size(stack) == 0
assert Stack.peek(stack) == None

let stack = Stack.makeSized(4)

Stack.push(1, stack)
Stack.push(2, stack)
Stack.push(3, stack)
Stack.push(4, stack)
Stack.push(5, stack)
assert Stack.size(stack) == 5
assert Stack.pop(stack) == Some(5)
assert Stack.pop(stack) == Some(4)
assert Stack.pop(stack) == Some(3)
assert Stack.pop(stack) == Some(2)
assert Stack.pop(stack) == Some(1)
assert Stack.pop(stack) == None

// Immutable Stack tests

// 1 <- 2 <- 3
let sampleStack = ImmStack.push(
  3,
  ImmStack.push(2, ImmStack.push(1, ImmStack.empty))
)

// ImmStack.isEmpty

assert ImmStack.isEmpty(ImmStack.empty)
assert !ImmStack.isEmpty(sampleStack)

// ImmStack.peek

assert ImmStack.peek(ImmStack.empty) == None
assert ImmStack.peek(sampleStack) == Some(3)

// ImmStack.push

assert ImmStack.peek(ImmStack.push(1, ImmStack.empty)) == Some(1)
assert ImmStack.peek(ImmStack.push(4, sampleStack)) == Some(4)

// ImmStack.pop

assert ImmStack.isEmpty(ImmStack.pop(ImmStack.empty))
assert ImmStack.isEmpty(ImmStack.pop(ImmStack.push(1, ImmStack.empty)))
assert ImmStack.isEmpty(ImmStack.pop(ImmStack.pop(ImmStack.pop(sampleStack))))
assert ImmStack.peek(ImmStack.pop(sampleStack)) == Some(2)
assert ImmStack.peek(
  ImmStack.pop(ImmStack.push(4, ImmStack.pop(sampleStack)))
) ==
  Some(2)

// ImmStack.size

assert ImmStack.size(ImmStack.empty) == 0
assert ImmStack.size(sampleStack) == 3
assert ImmStack.size(ImmStack.pop(ImmStack.pop(sampleStack))) == 1
