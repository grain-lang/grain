module StackTest

include "stack"

// Mutable stack tests

let empty = Stack.make()
assert Stack.isEmpty(empty)
assert Stack.size(empty) == 0
assert Stack.peek(empty) == None
assert Stack.pop(empty) == None
assert Stack.size(empty) == 0

let stack = Stack.make()
Stack.push(1, stack)
Stack.push(2, stack)
Stack.push(3, stack)

assert !Stack.isEmpty(stack)
assert Stack.size(stack) == 3
assert Stack.peek(stack) == Some(3)

assert Stack.pop(stack) == Some(3)
assert Stack.peek(stack) == Some(2)
assert Stack.size(stack) == 2

Stack.push(4, stack)
assert Stack.size(stack) == 3
assert Stack.peek(stack) == Some(4)
let copy = Stack.copy(stack)
Stack.pop(copy)
assert Stack.size(copy) == 2
assert Stack.size(stack) == 3
Stack.clear(stack)
assert Stack.size(stack) == 0
assert Stack.peek(stack) == None

let stack = Stack.make(size=4)

Stack.push(1, stack)
Stack.push(2, stack)
Stack.push(3, stack)
Stack.push(4, stack)
Stack.push(5, stack)
assert Stack.size(stack) == 5
assert Stack.pop(stack) == Some(5)
assert Stack.pop(stack) == Some(4)
assert Stack.pop(stack) == Some(3)
assert Stack.pop(stack) == Some(2)
assert Stack.pop(stack) == Some(1)
assert Stack.pop(stack) == None

let stack = Stack.make(size=0)
Stack.push(0, stack)
let stack2 = Stack.make(size=1)
Stack.push(0, stack2)
assert stack == stack2

module Immutable {
  from Stack use { module Immutable as Stack }

  // 1 <- 2 <- 3
  let sampleStack = Stack.push(3, Stack.push(2, Stack.push(1, Stack.empty)))

  // Stack.isEmpty

  assert Stack.isEmpty(Stack.empty)
  assert !Stack.isEmpty(sampleStack)

  // Stack.peek

  assert Stack.peek(Stack.empty) == None
  assert Stack.peek(sampleStack) == Some(3)

  // Stack.push

  assert Stack.peek(Stack.push(1, Stack.empty)) == Some(1)
  assert Stack.peek(Stack.push(4, sampleStack)) == Some(4)

  // Stack.pop

  assert Stack.isEmpty(Stack.pop(Stack.empty))
  assert Stack.isEmpty(Stack.pop(Stack.push(1, Stack.empty)))
  assert Stack.isEmpty(Stack.pop(Stack.pop(Stack.pop(sampleStack))))
  assert Stack.peek(Stack.pop(sampleStack)) == Some(2)
  assert Stack.peek(Stack.pop(Stack.push(4, Stack.pop(sampleStack)))) == Some(2)

  // Stack.size

  assert Stack.size(Stack.empty) == 0
  assert Stack.size(sampleStack) == 3
  assert Stack.size(Stack.pop(Stack.pop(sampleStack))) == 1
}
