module CharTest

include "char"
include "string"
include "array"

// isValid

assert Char.isValid(0x70)
assert Char.isValid(0x700)
assert Char.isValid(0x7000)
assert Char.isValid(0x70000)
assert !Char.isValid(-5)
assert !Char.isValid(0x11FFFF)
assert !Char.isValid(0xD8FF)

// code

// Each of these characters are represented by one, two, three, and four bytes respectively.
let testString = "\u{70}\u{700}\u{7000}\u{70000}"

let chars = String.explode(testString)
let codes = [> 0x70, 0x700, 0x7000, 0x70000]

assert Array.map(Char.code, chars) == codes

// fromCode

assert Array.map(Char.fromCode, codes) == chars

// succ
assert Char.code(Char.succ(Char.fromCode(0x70))) == 0x71
assert Char.code(Char.succ(Char.fromCode(0xD7FF))) == 0xE000

// pred
assert Char.code(Char.pred(Char.fromCode(0x70))) == 0x6F
assert Char.code(Char.pred(Char.fromCode(0xE000))) == 0xD7FF

// toString
assert Char.toString('f') == "f"
assert Char.toString('💯') == "💯"

// issue #927
let chars = [> '\u{1F3F4}', '\u{E0067}']
let mut charPosition = 0
let len = 2
let mut done = false

while (!done) {
  if (charPosition >= len) {
    break
  }

  Char.code(chars[charPosition])
  charPosition += 1
}

// <
from Char use { (<) }
assert 'a' < 'z'
assert 'a' < 'b'
assert 'A' < 'Z'
assert !('z' < 'a')

// <=
from Char use { (<=) }
assert 'a' <= 'z'
assert 'a' <= 'b'
assert 'A' <= 'Z'
assert !('z' <= 'a')
assert 'z' <= 'z'
assert 'Z' <= 'Z'

// >
from Char use { (>) }
assert 'z' > 'a'
assert 'b' > 'a'
assert 'Z' > 'A'
assert !('a' > 'b')

// >=
from Char use { (>=) }
assert 'z' >= 'a'
assert 'b' >= 'a'
assert 'Z' >= 'A'
assert !('a' >= 'b')
assert 'a' >= 'a'
assert 'B' >= 'B'

// isAsciiDigit
assert Char.isAsciiDigit('1')
assert !Char.isAsciiDigit('a')
assert !Char.isAsciiDigit('🌾')

// isAsciiAlpha
assert !Char.isAsciiAlpha('1')
assert Char.isAsciiAlpha('a')
assert Char.isAsciiAlpha('Z')
assert !Char.isAsciiAlpha('λ')

// toAsciiLowercase
assert Char.toAsciiLowercase('A') == 'a'
assert Char.toAsciiLowercase('a') == 'a'
assert Char.toAsciiLowercase('1') == '1'
assert Char.toAsciiLowercase('λ') == 'λ'

// toAsciiUppercase
assert Char.toAsciiUppercase('a') == 'A'
assert Char.toAsciiUppercase('A') == 'A'
assert Char.toAsciiUppercase('1') == '1'
assert Char.toAsciiUppercase('λ') == 'λ'
