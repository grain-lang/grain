module CharTest

from "char" include Char
from "string" include String
from "array" include Array

// isValid

assert Char.isValid(0x70)
assert Char.isValid(0x700)
assert Char.isValid(0x7000)
assert Char.isValid(0x70000)
assert !Char.isValid(-5)
assert !Char.isValid(0x11FFFF)
assert !Char.isValid(0xD8FF)

// code

// Each of these characters are represented by one, two, three, and four bytes respectively.
let testString = "\u{70}\u{700}\u{7000}\u{70000}"

let chars = String.explode(testString)
let codes = [> 0x70, 0x700, 0x7000, 0x70000]

assert Array.map(Char.code, chars) == codes

// fromCode

assert Array.map(Char.fromCode, codes) == chars

// succ
assert Char.code(Char.succ(Char.fromCode(0x70))) == 0x71
assert Char.code(Char.succ(Char.fromCode(0xD7FF))) == 0xE000

// pred
assert Char.code(Char.pred(Char.fromCode(0x70))) == 0x6F
assert Char.code(Char.pred(Char.fromCode(0xE000))) == 0xD7FF

// toString
assert Char.toString('f') == "f"
assert Char.toString('💯') == "💯"

// issue #927
let chars = [> '\u{1F3F4}', '\u{E0067}']
let mut charPosition = 0
let len = 2
let mut done = false

while (!done) {
  if (charPosition >= len) {
    break
  }

  Char.code(chars[charPosition])
  charPosition += 1
}

// <
use Char.{ (<) }
assert 'a' < 'z'
assert 'a' < 'b'
assert 'A' < 'Z'
assert !('z' < 'a')

// <=
use Char.{ (<=) }
assert 'a' <= 'z'
assert 'a' <= 'b'
assert 'A' <= 'Z'
assert !('z' <= 'a')
assert 'z' <= 'z'
assert 'Z' <= 'Z'

// >
use Char.{ (>) }
assert 'z' > 'a'
assert 'b' > 'a'
assert 'Z' > 'A'
assert !('a' > 'b')

// >=
use Char.{ (>=) }
assert 'z' >= 'a'
assert 'b' >= 'a'
assert 'Z' >= 'A'
assert !('a' >= 'b')
assert 'a' >= 'a'
assert 'B' >= 'B'

// Char.Ascii
module AsciiTest {
  use Char.{ module Ascii }

  // isValid
  assert Ascii.isValid('1')
  assert Ascii.isValid('a')
  assert Ascii.isValid(';')
  assert Ascii.isValid(' ')
  assert Ascii.isValid('\n')
  assert !Ascii.isValid('🌾')

  // isDigit
  assert Ascii.isDigit('1')
  assert !Ascii.isDigit('a')
  assert !Ascii.isDigit('🌾')

  // isAlpha
  assert !Ascii.isAlpha('1')
  assert Ascii.isAlpha('a')
  assert Ascii.isAlpha('Z')
  assert !Ascii.isAlpha('λ')

  // isControl
  assert Ascii.isControl('\n')
  assert Ascii.isControl('\t')
  assert Ascii.isControl('\u{007F}')
  assert !Ascii.isControl(' ')
  assert !Ascii.isControl('a')
  assert !Ascii.isControl('🌾')

  // isWhitespace
  assert Ascii.isWhitespace(' ')
  assert Ascii.isWhitespace('\t')
  assert Ascii.isWhitespace('\n')
  assert Ascii.isWhitespace('\r')
  assert Ascii.isWhitespace('\x0C')
  assert !Ascii.isWhitespace('a')
  assert !Ascii.isWhitespace('1')
  assert !Ascii.isWhitespace('🌾')

  // isPunctuation
  assert Ascii.isPunctuation('!')
  assert Ascii.isPunctuation('?')
  assert Ascii.isPunctuation('.')
  assert Ascii.isPunctuation(',')
  assert !Ascii.isPunctuation('1')
  assert !Ascii.isPunctuation('a')
  assert !Ascii.isPunctuation('🌾')

  // isGraphic
  assert Ascii.isGraphic('1')
  assert Ascii.isGraphic('a')
  assert Ascii.isGraphic('!')
  assert !Ascii.isGraphic('\n')
  assert !Ascii.isGraphic('\t')
  assert !Ascii.isGraphic('🌾')

  // toLowercase
  assert Ascii.toLowercase('A') == 'a'
  assert Ascii.toLowercase('a') == 'a'
  assert Ascii.toLowercase('1') == '1'
  assert Ascii.toLowercase('λ') == 'λ'

  // toUppercase
  assert Ascii.toUppercase('a') == 'A'
  assert Ascii.toUppercase('A') == 'A'
  assert Ascii.toUppercase('1') == '1'
  assert Ascii.toUppercase('λ') == 'λ'
}
