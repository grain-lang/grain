module RationalTest

include "rational"
from Rational use {
  fromNumber,
  toNumber,
  numerator,
  denominator,
  toIntegerRatio,
  fromIntegerRatio,
  (+),
  (-),
  (*),
  (/),
}

// Rational.fromNumber
assert fromNumber(1/2) == 1/2r
assert fromNumber(0) == 0/1r
assert fromNumber(1/1) == 1/1r
assert fromNumber(-1) == -1/1r

// Rational.toNumber
assert toNumber(1/2r) == 1/2
assert toNumber(0/1r) == 0
assert toNumber(1/1r) == 1
assert toNumber(-1/2r) == -1/2
assert toNumber(1/-2r) == -1/2

// Rational.numerator
assert numerator(123/23r) == 123
assert numerator(2/4r) == 1
assert numerator(1000000000/1r * 1000000000/1r) == 1000000000000000000

// Rational.denominator
assert denominator(123/23r) == 23
assert denominator(2/4r) == 2

// Rational.toIntegerRatio
assert toIntegerRatio(1/2r) == (1, 2)
assert toIntegerRatio(2/3r) == (2, 3)
assert toIntegerRatio(4/6r) == (2, 3)

// Rational.fromIntegerRatio
assert fromIntegerRatio(1, 2) == 1/2r
assert fromIntegerRatio(2, 3) == 2/3r
assert fromIntegerRatio(4, 6) == 2/3r

// Rational comparisons
assert 1/2r == 1/2r
assert 1/2r == 2/4r
assert 1/1r == 2/2r
assert 1/2r != 3/4r
assert -1/2r == 1/-2r

match (1/2r) {
  1/3r => fail "Impossible: 1/2r matched against 1/3r",
  1/2r => void,
  _ => fail "Impossible: 1/2r not matched against 1/2r",
}

assert compare(1/2r, 1/3r) > 0
assert compare(1/2r, 2/2r) < 0
assert compare(1/2r, 1/2r) == 0

from Rational use { (==), (!=), (<), (<=), (>), (>=) }

// Rational.(==)
assert 1/2r == 1/2r
assert 1/2r == 2/4r
assert 1/1r == 2/2r
assert 1/2r != 3/4r
assert -1/2r == 1/-2r

// Rational.(+)
assert 1/8r + 3/8r == 1/2r
assert 1/4r + 1/2r == 3/4r
assert 1/2r + 1/2r == 1/1r

// Rational.(-)
assert 1/4r - 1/4r == 0/1r
assert 3/4r - 1/4r == 1/2r

// Rational.(*)
assert 1/2r * 1/2r == 1/4r
assert 1/2r * 2/1r == 1/1r
assert 3/1r * 4/1r == 12/1r

// Rational.(/)
assert 1/2r / 1/2r == 1/1r
assert 1/4r / 1/2r == 1/2r

// Rational.(<)
assert 1/2r > 1/3r

// Rational.(>=)
assert 1/2r >= 1/3r
assert 1/2r >= 1/2r

// Rational.(<)
assert 1/3r < 1/2r

// Rational.(<=)
assert 1/3r <= 1/2r
assert 1/2r <= 1/2r
