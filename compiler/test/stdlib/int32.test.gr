module Int32Test

include "int32"
from Int32 use *

from Pervasives use { (==) }
// Suppress warnings about using `fromNumber` on constants, since that's what we want to test.
let fromNumber = fromNumber
assert fromNumber(5) == 5l
assert fromNumber(0) == 0l

assert toNumber(555l) == 555
assert toNumber(0x40000000l) == 0x40000000
assert toNumber(-0x40000001l) == -0x40000001
assert toNumber(0l) == 0

assert fromUint32(1ul) == 1l
assert fromUint32(0xfffffffful) == -1l

from Int32 use { (==) }

assert lnot(0xffffffffl) == 0l
assert lnot(0l) == 0xffffffffl
assert lnot(0xf0f0f0f0l) == 0x0f0f0f0fl

assert (0b1010l & 0b10l) == 0b10l
assert (0b1010l & 0l) == 0l

assert (0b1010l | 0b0101l) == 0b1111l
assert (0b1010l | 0l) == 0b1010l

assert (0b1010l ^ 0b1101l) == 0b0111l
assert (0b1010l ^ 0l) == 0b1010l

assert -1l << 1l == -2l
assert -1l << 2l == -4l
assert -1l << 3l == -8l
assert -2l << 63l == 0l
assert 24l << 1l == 48l

assert -1l >> 63l == -1l
assert -24l >> 1l == -12l

assert 5l > 4l
assert 5l >= 5l
assert 5l < 17l
assert 5l <= 5l
assert !(5l > 5l)
assert !(5l >= 22l)
assert !(5l < -17l)
assert !(5l <= 4l)

assert clz(0b11l) == 30l
assert ctz(0b11000l) == 3l
assert popcnt(0b1100110011l) == 6l
assert rotl(0b11l, 3l) == 0b11000l
assert rotr(0b110000l, 3l) == 0b110l

assert 5l == 5l
assert !(5l == 55l)
assert 5l != 55l
assert !(5l != 5l)
assert eqz(0l)
assert !eqz(-42l)

from Pervasives use { (==) }
// Regression #1339
let arr = [> 1, 2, 3]
assert arr[toNumber(1l)] == 2

// pow
assert 0l ** 3l == 0l
assert 0l ** 2l == 0l
assert 0l ** 1l == 0l
assert 0l ** 0l == 1l
assert 1l ** 0l == 1l
assert -1l ** 0l == 1l
assert 1l ** 1l == 1l
assert 2l ** 1l == 2l
assert 300l ** 1l == 300l
assert -1l ** 1l == -1l
assert -2l ** 1l == -2l
assert -300l ** 1l == -300l
assert 0l ** 1l == 0l
assert 1l ** 0l == 1l
assert 0l ** 0l == 1l
assert 1l ** 5l == 1l
assert 5l ** 5l == 3125l
assert -5l ** 5l == -3125l
assert 5l ** 6l == 15625l
assert -5l ** 6l == 15625l
assert 1l ** 1l == 1l
assert 2l ** 1l == 2l
assert 300l ** 1l == 300l
assert -1l ** 1l == -1l
assert -2l ** 1l == -2l
assert -300l ** 1l == -300l
