module RangeTest

include "range"

let exclusiveAscendingRange = { range_start: 1, range_end: 5 }
let exclusiveDescendingRange = { range_start: 5, range_end: 1 }
let exclusiveSameRange = { range_start: 1, range_end: 1 }

// Range.inRange
assert Range.inRange(1, exclusiveAscendingRange)
assert Range.inRange(3, exclusiveAscendingRange)
assert !Range.inRange(5, exclusiveAscendingRange)
assert !Range.inRange(10, exclusiveAscendingRange)
assert !Range.inRange(-1, exclusiveAscendingRange)

assert Range.inRange(1, exclusiveDescendingRange)
assert Range.inRange(3, exclusiveDescendingRange)
assert !Range.inRange(5, exclusiveDescendingRange)
assert !Range.inRange(10, exclusiveDescendingRange)
assert !Range.inRange(-1, exclusiveDescendingRange)

assert !Range.inRange(1, exclusiveSameRange)
assert !Range.inRange(3, exclusiveSameRange)

// Range.forEach
// Note: the lists in these tests are reverse the iteration
// order because we use `...results` to append the lists

let mut results = []
Range.forEach(idx => {
  results = [idx, ...results]
}, exclusiveAscendingRange)
assert results == [4, 3, 2, 1]

let mut results = []
Range.forEach(idx => {
  results = [idx, ...results]
}, exclusiveDescendingRange)
assert results == [2, 3, 4, 5]

Range.forEach(idx => {
  fail "Shouldn't be called"
}, exclusiveSameRange)

assert Range.map(toString, exclusiveAscendingRange) == ["1", "2", "3", "4"]
assert Range.map(toString, exclusiveDescendingRange) == ["5", "4", "3", "2"]
assert Range.map(toString, exclusiveSameRange) == []
