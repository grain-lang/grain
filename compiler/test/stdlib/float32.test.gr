module Float32Test

from "float32" include Float32
use Float32.*
use Pervasives.{ (-) as numberSub }

// Constants Test
// smoke test:
assert infinity > 100000000.0f
// test infinity-specific semantics:
assert toNumber(infinity) == toNumber(infinity)
assert toNumber(infinity) == numberSub(toNumber(infinity), 1)
assert nan != nan

assert pi == 3.1415927f

assert tau == 6.2831853f

assert e == 2.7182817f
// Operations Tests
// Suppress warnings about using `fromNumber` on constants, since that's what we want to test.
let fromNumber = fromNumber
assert fromNumber(5) == 5.0f
assert fromNumber(0) == 0.0f

assert toNumber(555.0f) == 555
assert toNumber(0.0f) == 0

assert 5.0f > 4.0f
assert 5.0f >= 5.0f
assert 5.0f < 17.0f
assert 5.0f <= 5.0f
assert !(5.0f > 5.0f)
assert !(5.0f >= 22.0f)
assert !(5.0f < -17.0f)
assert !(5.0f <= 4.0f)
use Pervasives.{ (<), (>) }
assert compare(1.0f, 2.0f) < 0
assert compare(3.0f, 2.0f) > 0
assert compare(1.0f, 1.0f) == 0
assert compare(nan, nan) == 0
assert compare(1.0f, nan) > 0
assert compare(nan, 1.0f) < 0

// isNaN
assert Float32.isNaN(NaNf)
assert Float32.isNaN(1.0f) == false
assert Float32.isNaN(0.0f) == false
assert Float32.isNaN(-1.0f) == false
assert Float32.isNaN(25.76f) == false
assert Float32.isNaN(-25.00f) == false
assert Float32.isNaN(Infinityf) == false
assert Float32.isNaN(-Infinityf) == false

// isInfinite
assert Float32.isInfinite(Infinityf)
assert Float32.isInfinite(-Infinityf)
assert Float32.isInfinite(NaNf) == false
assert Float32.isInfinite(1.0f) == false
assert Float32.isInfinite(0.0f) == false
assert Float32.isInfinite(-1.0f) == false
assert Float32.isInfinite(25.76f) == false
assert Float32.isInfinite(-25.00f) == false

// abs
assert Float32.abs(-25.5f) == 25.5f
assert Float32.abs(25.5f) == 25.5f
assert Float32.isNaN(Float32.abs(NaNf))
assert Float32.abs(Infinityf) == Infinityf

// neg
assert Float32.neg(-25.5f) == 25.5f
assert Float32.neg(25.5f) == -25.5f
assert Float32.isNaN(-NaNf)
assert Float32.neg(Infinityf) == -Infinityf
