export enum Opt<a> { None, Some(a) }

let z = box(None)
z := Some(z)

let y = box(None)

assert !(z == y)

y := Some(y)
assert z == y

export enum R { Atom, Recursive(Box<Opt<R>>) }

let t = box(None)
let u = box(None)
let x = Recursive(t)
let w = Recursive(u)

t := Some(x)

assert !(x == w)

u := Some(w)

assert x == w

export record Rec {
  int: Number,
  r: Box<Opt<Rec>>
}

let a = { int: 5, r: box(None) }
let b = { int: 5, r: box(None) }

a.r := Some(a)

assert a is a
assert a == a

assert !(a == b)

b.r := Some(b)

assert !(a is b)
assert a == b

print("OK")
