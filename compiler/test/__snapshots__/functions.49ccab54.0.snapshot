functions â€º curried_func
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (import \"_grainEnv\" \"mem\" (memory $0 0))
 (import \"_grainEnv\" \"tbl\" (table $tbl 0 funcref))
 (import \"_grainEnv\" \"relocBase\" (global $relocBase_0 i32))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$malloc\" (global $GRAIN$EXPORT$malloc_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$incRef\" (global $GRAIN$EXPORT$incRef_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$decRef\" (global $GRAIN$EXPORT$decRef_0 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$+\" (global $+_1134 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"malloc\" (func $malloc_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"incRef\" (func $incRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"decRef\" (func $decRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$pervasives\" \"+\" (func $+_1134 (param i32 i32 i32) (result i32)))
 (global $add_1131 (mut i32) (i32.const 0))
 (global $GRAIN$TABLE_SIZE i32 (i32.const 1))
 (elem $elem (global.get $relocBase_0) $func_1141)
 (export \"memory\" (memory $0))
 (export \"_gmain\" (func $_gmain))
 (export \"_start\" (func $_start))
 (export \"GRAIN$TABLE_SIZE\" (global $GRAIN$TABLE_SIZE))
 (func $func_1141 (; has Stack IR ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (tuple.extract 0
    (tuple.make
     (call $+_1134
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $+_1134)
      )
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (i32.load offset=16
        (local.get $0)
       )
      )
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $1)
      )
     )
     (i32.const 0)
    )
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (local.get $2)
 )
 (func $_gmain (; has Stack IR ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (i32.store
   (local.tee $0
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 16)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $0)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $0)
   (i32.const -1)
  )
  (i32.store offset=12
   (local.get $0)
   (i32.const 0)
  )
  (global.set $add_1131
   (tuple.extract 0
    (tuple.make
     (local.get $0)
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (global.get $add_1131)
     )
    )
   )
  )
  (local.set $1
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (global.get $add_1131)
   )
  )
  (i32.store
   (local.tee $0
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 20)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $0)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $0)
   (global.get $relocBase_0)
  )
  (i32.store offset=12
   (local.get $0)
   (i32.const 1)
  )
  (i32.store offset=16
   (local.get $0)
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (i32.const 5)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (i32.const 5)
   )
  )
  (local.set $0
   (tuple.extract 0
    (tuple.make
     (tuple.extract 0
      (tuple.make
       (local.get $0)
       (local.get $0)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $1
   (call_indirect (type $i32_i32_=>_i32)
    (local.tee $1
     (call $incRef_0
      (global.get $GRAIN$EXPORT$incRef_0)
      (local.get $0)
     )
    )
    (i32.const 7)
    (i32.load offset=8
     (local.get $1)
    )
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (local.get $1)
 )
 (func $_start (; has Stack IR ;)
  (drop
   (call $_gmain)
  )
 )
 ;; custom section \"cmi\", size 244
)
