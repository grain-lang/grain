basic functionality â€º heap_number_i32_wrapper
(module
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (import \"_grainEnv\" \"mem\" (memory $0 0))
 (import \"_grainEnv\" \"relocBase\" (global $import__grainEnv_0_relocBase_0 i32))
 (import \"GRAIN$MODULE$runtime/dataStructures\" \"GRAIN$EXPORT$newInt32\" (global $import_GRAIN$MODULE$runtime/dataStructures_0_GRAIN$EXPORT$newInt32_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/dataStructures\" \"newInt32\" (func $import_GRAIN$MODULE$runtime/dataStructures_0_newInt32_0 (param i32 i32) (result i32)))
 (global $global_1 i32 (i32.const 0))
 (export \"memory\" (memory $0))
 (export \"_gmain\" (func $_gmain))
 (export \"_start\" (func $_start))
 (export \"GRAIN$TABLE_SIZE\" (global $global_1))
 (func $_gmain (; has Stack IR ;) (result i32)
  (tuple.extract 0
   (tuple.make
    (call $import_GRAIN$MODULE$runtime/dataStructures_0_newInt32_0
     (global.get $import_GRAIN$MODULE$runtime/dataStructures_0_GRAIN$EXPORT$newInt32_0)
     (i32.const 1073741824)
    )
    (i32.const 0)
   )
  )
 )
 (func $_start (; has Stack IR ;)
  (drop
   (call $_gmain)
  )
 )
 ;; custom section \"cmi\", size 255
)
