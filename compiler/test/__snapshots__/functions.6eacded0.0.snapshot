functions â€º func_recursive_closure
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import \"_grainEnv\" \"mem\" (memory $0 0))
 (import \"_grainEnv\" \"tbl\" (table $tbl 0 funcref))
 (import \"_grainEnv\" \"relocBase\" (global $relocBase_0 i32))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$malloc\" (global $GRAIN$EXPORT$malloc_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$incRef\" (global $GRAIN$EXPORT$incRef_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$decRef\" (global $GRAIN$EXPORT$decRef_0 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$-\" (global $-_1157 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$==\" (global $==_1152 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$+\" (global $+_1142 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"malloc\" (func $malloc_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"incRef\" (func $incRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"decRef\" (func $decRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$pervasives\" \"-\" (func $-_1157 (param i32 i32 i32) (result i32)))
 (import \"GRAIN$MODULE$pervasives\" \"==\" (func $==_1152 (param i32 i32 i32) (result i32)))
 (import \"GRAIN$MODULE$pervasives\" \"+\" (func $+_1142 (param i32 i32 i32) (result i32)))
 (global $truc_1134 (mut i32) (i32.const 0))
 (global $makeAdder_1131 (mut i32) (i32.const 0))
 (global $GRAIN$TABLE_SIZE i32 (i32.const 1))
 (elem $elem (global.get $relocBase_0) $func_1165)
 (export \"memory\" (memory $0))
 (export \"truc\" (func $truc_1134))
 (export \"GRAIN$EXPORT$truc\" (global $truc_1134))
 (export \"_gmain\" (func $_gmain))
 (export \"_start\" (func $_start))
 (export \"GRAIN$TABLE_SIZE\" (global $GRAIN$TABLE_SIZE))
 (func $truc_1134 (; has Stack IR ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (i32.store
   (local.tee $1
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 16)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $1)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $1)
   (i32.const -1)
  )
  (i32.store offset=12
   (local.get $1)
   (i32.const 0)
  )
  (local.set $1
   (tuple.extract 0
    (tuple.make
     (local.get $1)
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $2
   (tuple.extract 0
    (tuple.make
     (call $foo_1135
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $1)
      )
      (i32.const 11)
     )
     (local.get $1)
    )
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (local.get $2)
 )
 (func $func_1165 (; has Stack IR ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (tuple.extract 0
    (tuple.make
     (call $+_1142
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $+_1142)
      )
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $1)
      )
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (i32.load offset=16
        (local.get $0)
       )
      )
     )
     (i32.const 0)
    )
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (local.get $2)
 )
 (func $foo_1135 (; has Stack IR ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local.set $3
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (global.get $makeAdder_1131)
   )
  )
  (i32.store
   (local.tee $2
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 20)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $2)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $2)
   (global.get $relocBase_0)
  )
  (i32.store offset=12
   (local.get $2)
   (i32.const 1)
  )
  (i32.store offset=16
   (local.get $2)
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (i32.const 3)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $3)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (i32.const 3)
   )
  )
  (local.set $5
   (tuple.extract 0
    (tuple.make
     (tuple.extract 0
      (tuple.make
       (local.get $2)
       (local.get $2)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (i32.store
   (local.tee $2
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 24)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $2)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $2)
   (i32.const -1)
  )
  (i32.store offset=12
   (local.get $2)
   (i32.const 2)
  )
  (i32.store offset=16
   (local.tee $2
    (tuple.extract 0
     (tuple.make
      (local.get $2)
      (call $decRef_0
       (global.get $GRAIN$EXPORT$decRef_0)
       (i32.const 0)
      )
     )
    )
   )
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (local.get $0)
   )
  )
  (i32.store offset=20
   (local.get $2)
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (local.get $5)
   )
  )
  (local.set $3
   (tuple.extract 0
    (tuple.make
     (if (result i32)
      (i32.shr_u
       (call $==_1152
        (call $incRef_0
         (global.get $GRAIN$EXPORT$incRef_0)
         (global.get $==_1152)
        )
        (call $incRef_0
         (global.get $GRAIN$EXPORT$incRef_0)
         (local.get $1)
        )
        (i32.const 1)
       )
       (i32.const 31)
      )
      (i32.const 1)
      (if (result i32)
       (i32.shr_u
        (call $==_1152
         (call $incRef_0
          (global.get $GRAIN$EXPORT$incRef_0)
          (global.get $==_1152)
         )
         (call $incRef_0
          (global.get $GRAIN$EXPORT$incRef_0)
          (local.get $1)
         )
         (i32.const 3)
        )
        (i32.const 31)
       )
       (block (result i32)
        (local.set $3
         (call $incRef_0
          (global.get $GRAIN$EXPORT$incRef_0)
          (local.get $2)
         )
        )
        (local.set $6
         (tuple.extract 0
          (tuple.make
           (call $foo_1135
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (i32.load offset=16
              (local.get $3)
             )
            )
            (i32.const 1)
           )
           (call $decRef_0
            (global.get $GRAIN$EXPORT$decRef_0)
            (i32.const 0)
           )
          )
         )
        )
        (local.set $7
         (tuple.extract 0
          (tuple.make
           (call_indirect (type $i32_i32_=>_i32)
            (local.tee $4
             (call $incRef_0
              (global.get $GRAIN$EXPORT$incRef_0)
              (i32.load offset=20
               (local.get $3)
              )
             )
            )
            (i32.const 3)
            (i32.load offset=8
             (local.get $4)
            )
           )
           (call $decRef_0
            (global.get $GRAIN$EXPORT$decRef_0)
            (i32.const 0)
           )
          )
         )
        )
        (local.set $4
         (tuple.extract 0
          (tuple.make
           (call $+_1142
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (global.get $+_1142)
            )
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (local.get $6)
            )
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (local.get $7)
            )
           )
           (local.get $4)
          )
         )
        )
        (drop
         (call $decRef_0
          (global.get $GRAIN$EXPORT$decRef_0)
          (local.get $3)
         )
        )
        (drop
         (call $decRef_0
          (global.get $GRAIN$EXPORT$decRef_0)
          (i32.const 3)
         )
        )
        (drop
         (call $decRef_0
          (global.get $GRAIN$EXPORT$decRef_0)
          (local.get $6)
         )
        )
        (drop
         (call $decRef_0
          (global.get $GRAIN$EXPORT$decRef_0)
          (local.get $7)
         )
        )
        (local.get $4)
       )
       (block (result i32)
        (local.set $8
         (tuple.extract 0
          (tuple.make
           (call $-_1157
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (global.get $-_1157)
            )
            (call $incRef_0
             (global.get $GRAIN$EXPORT$incRef_0)
             (local.get $1)
            )
            (i32.const 3)
           )
           (call $decRef_0
            (global.get $GRAIN$EXPORT$decRef_0)
            (i32.const 0)
           )
          )
         )
        )
        (call $foo_1135
         (call $incRef_0
          (global.get $GRAIN$EXPORT$incRef_0)
          (local.get $0)
         )
         (call $incRef_0
          (global.get $GRAIN$EXPORT$incRef_0)
          (local.get $8)
         )
        )
       )
      )
     )
     (local.get $2)
    )
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $5)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $2)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $8)
   )
  )
  (local.get $3)
 )
 (func $_gmain (; has Stack IR ;) (result i32)
  (local $0 i32)
  (i32.store
   (local.tee $0
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 16)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $0)
   (i32.const 2)
  )
  (i32.store offset=8
   (local.get $0)
   (i32.const -1)
  )
  (i32.store offset=12
   (local.get $0)
   (i32.const 0)
  )
  (global.set $makeAdder_1131
   (tuple.extract 0
    (tuple.make
     (local.get $0)
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (global.get $makeAdder_1131)
     )
    )
   )
  )
  (i32.store
   (local.tee $0
    (call $malloc_0
     (global.get $GRAIN$EXPORT$malloc_0)
     (i32.const 16)
    )
   )
   (i32.const 6)
  )
  (i32.store offset=4
   (local.get $0)
   (i32.const 1)
  )
  (i32.store offset=8
   (local.get $0)
   (i32.const -1)
  )
  (i32.store offset=12
   (local.get $0)
   (i32.const 0)
  )
  (global.set $truc_1134
   (tuple.extract 0
    (tuple.make
     (local.get $0)
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (global.get $truc_1134)
     )
    )
   )
  )
  (call $truc_1134
   (call $incRef_0
    (global.get $GRAIN$EXPORT$incRef_0)
    (global.get $truc_1134)
   )
  )
 )
 (func $_start (; has Stack IR ;)
  (drop
   (call $_gmain)
  )
 )
 ;; custom section \"cmi\", size 712
)
