basic functionality â€º comp19
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (import \"_grainEnv\" \"mem\" (memory $0 0))
 (import \"_grainEnv\" \"relocBase\" (global $relocBase_0 i32))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$incRef\" (global $GRAIN$EXPORT$incRef_0 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"GRAIN$EXPORT$decRef\" (global $GRAIN$EXPORT$decRef_0 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$[]\" (global $[]_1136 (mut i32)))
 (import \"GRAIN$MODULE$pervasives\" \"GRAIN$EXPORT$[...]\" (global $[...]_1132 (mut i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"incRef\" (func $incRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$runtime/gc\" \"decRef\" (func $decRef_0 (param i32 i32) (result i32)))
 (import \"GRAIN$MODULE$pervasives\" \"[...]\" (func $[...]_1132 (param i32 i32 i32) (result i32)))
 (global $GRAIN$TABLE_SIZE i32 (i32.const 0))
 (export \"memory\" (memory $0))
 (export \"_gmain\" (func $_gmain))
 (export \"_start\" (func $_start))
 (export \"GRAIN$TABLE_SIZE\" (global $GRAIN$TABLE_SIZE))
 (func $_gmain (; has Stack IR ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local.set $0
   (tuple.extract 0
    (tuple.make
     (call $[...]_1132
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[...]_1132)
      )
      (i32.const 5)
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[]_1136)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $1
   (tuple.extract 0
    (tuple.make
     (call $[...]_1132
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[...]_1132)
      )
      (i32.const 3)
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $0)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $2
   (tuple.extract 0
    (tuple.make
     (call $[...]_1132
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[...]_1132)
      )
      (i32.const 5)
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[]_1136)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $3
   (tuple.extract 0
    (tuple.make
     (call $[...]_1132
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (global.get $[...]_1132)
      )
      (i32.const 3)
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $2)
      )
     )
     (call $decRef_0
      (global.get $GRAIN$EXPORT$decRef_0)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $4
   (i32.or
    (i32.shl
     (i32.eq
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $1)
      )
      (call $incRef_0
       (global.get $GRAIN$EXPORT$incRef_0)
       (local.get $3)
      )
     )
     (i32.const 31)
    )
    (i32.const 2147483646)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $0)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $1)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $2)
   )
  )
  (drop
   (call $decRef_0
    (global.get $GRAIN$EXPORT$decRef_0)
    (local.get $3)
   )
  )
  (local.get $4)
 )
 (func $_start (; has Stack IR ;)
  (drop
   (call $_gmain)
  )
 )
 ;; custom section \"cmi\", size 238
)
