import Array from "array"

let empty = [>]

let mut someNums = Array.init(5, n => n + 3)

let second = someNums[1]

someNums[2] = 3

Array.set(1, 3, someNums)

let instructions = Array.map(instruct => {
  match (String.split(" ", instruct)) {
    [> "acc", arg] => Acc(parseIntWithSign(arg)),
    [> "jmp", arg] => Jmp(parseIntWithSign(arg)),
    [> "nop", _] => Nop,
    x => fail "Can't handle: " ++ toString(x),
  }
}, String.split("\n", data))

// code snippet to check assignment stays on the same line after =
let addRepeatedGroup = (groupN, state, pos, n, backAmt, callback) => {
  match (groupN) {
    Some(groupN) when Array.length(state) > 0 => {
      let oldSpan = state[groupN]
      state[groupN] = if (n == 0) None else Some((pos - backAmt, pos))
      let groupRevert = () => {
        state[groupN] = oldSpan
      }
      callback(groupRevert)
    },
    _ => {
      let groupRevert = () => void
      callback(groupRevert)
    },
  }
}

export let getBefore = (array, index) => if (array == [>]) "nope"
else array[index - 1]
