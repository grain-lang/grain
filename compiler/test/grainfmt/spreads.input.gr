module Spreads

let rec filter = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => if (fn(first)) [first, ...filter(fn, rest)] else filter(fn, rest)
  }
}

let filteri = (fn, list) => {
  let rec iter = (fn, list, index22) => {
    match (list) {
      [] => [],
      [first, ...rest] => if (fn(first, index22)) [first, ...iter(fn, rest, index22 + 1)] else iter(fn, rest, index22 + 1)
    }
  }
  iter(fn, list, 0)
}

let rec reject = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => if (!fn(first)) [first, ...reject(fn, rest)] else reject(fn, rest)
  }
}

let rec reject2 = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => { let x = []; x
    }
  }
}

let l = ["a", "b", "c"]
let a = [...l, "a", "b", ...l, "d"]
let a = [...l, "secondInAVeryLongString", "thirdInAStringThatWillBreakLine", ...l]

let a = [
...l /* before first */, // first comment
"second", // second comment
"third" /* before third */, // third comment
...l // fourth comment
] // after comment

let a = [> "a", "b", "c"]
let arr = [>...a,"second","third",...a]
let arr = [>
...a /* before comment 1 */, // comment 1
"second", // comment 2
"third" /* before comment 3 */, // comment 3
...a /* comment 4 */] // after comment
