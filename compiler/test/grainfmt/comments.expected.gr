// Comment before first attr
/* Block comment before attr */
@noPervasives // Line comment on attr
// Comment after first attr
@runtimeMode
// Comment after second attr
module Comments

/* Let's start with a block 
 the line above ends with a space that we preserve
 followed by a blank line
*/

let myfun = (/* a */ x, /*post*/ y) => 10

let myfun1a = /*special*/ (x, /*lead*/ y /*follow*/) => x + 5

/**
 * Then a doc
 */
// Then a line
let myfun1 = (/* a */ x, y) => 10

let myfun2 = (x, /*post*/ y) => 10

/**
 * Slices an array given zero-based start and end indexes. The value
 * at the end index will not be included in the result.
 *
 * If either index is a negative number, it will be treated as a reverse index from
 * the end of the array. e.g. `slice(1, -1, [> 'a', 'b', 'c']) == [> 'b']`.
 *
 * @param startIndex: The index of the array where the slice will begin (inclusive)
 * @param endIndex: The index of the array where the slice will end (exclusive)
 * @param array: The array to be sliced
 * @returns The subset of the array that was sliced
 */
provide let slice = (startIndex, endIndex, array) => {
  "no code"
}

// leading

if (/*before*/ true /*whyt*/) {
  // 1
  //a

  true // b

  true
  // c
  // d
  6
  // trail
} else {
  /* before */
  7 /* arf*/
  /* after*/
}
// trailing

// starting comment

let x = 7 // another comment 1
let y = 9 // another comment 2

/* stand alone block */

// trailing comment

let a = false

let zee = "zer"

if (a /*why*/) {
  /* block
   in here */
  // inner comment
  5 // trail 5

  6 /* block 6a */
  /* block 6 b */
  // ending comment
} else {
  7 // on time
  let x = 55 /* ppost*/
  9
  // end block
}

let myfun = /*special*/ (/*lead*/ x, /*follow*/ y) => x + 5

if (true) {
  let noval = 5

  // Tell the host where the key and value are located and their lengths.
  // No empty line beneath this please
  let _KEY_LEN = 32
  let _KEY_LEN2 = 64

  let _KEY_LEN23 = 64
}

let noval = 5

// Tell the host where the key and value are located and their lengths.
// No empty line beneath this please
let _KEY_LEN = 32
let _KEY_LEN2 = 64

/* ending block 2 */
// trailing comment 2

if (
  true // comment
) true else false

if (
  true
  // comment
) true else false

if (true /* hey */) true else false

if (true) {
  // comment
  true
} else {
  false
}

Result.expect(
  "Unexpected error when writing to stdout",
  // Is stdout correct here?
  File.fdWrite(File.stdout, "Status: 500\n\nInternal Server Error")
)
// this comment stays outside

// For debugging:

// provide let getRefCount = (value) => {
//   let userPtr = WasmI32.fromGrain(value)
//   let ret = if (WasmI32.eqz(userPtr & Tags._GRAIN_GENERIC_TAG_MASK) && WasmI32.ne(userPtr, 0n)) {
//     WasmI32.toGrain((getRefCount(userPtr) * 2n) + 1n) : Number
//   } else {
//     0
//   }
//   decRef(userPtr)
//   ret
// }

// provide let rec setDebug = (enabled: Bool) => {
//   _DEBUG = enabled
//   decRef(WasmI32.fromGrain(setDebug))
//   void
// }

let { foo: /* yoyo */ bar } = 5
let foo = (foo=/* yoyo */5) => 5
let Foo(foo as /* yoyo */ bar) = 5
let Foo(foo | /*yoyo*/ /*jaja*/ bar) = 5

let Foo{
  foo,
  // comment
  bar, /*2*/
  baz, /*3*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  // trailer
} = 5

let Foo{
  foo,
  // comment
  bar, /*2*/
  baz, /*3*/
  qux, /*4*/
  // trailer
} = 5

let Foo{
  // comment
  foo,
  // comment
  bar,
} = 5

let { foo: Foo{
  qux: quux, // comment
}, cccc, bar: baz } = 6

let Foo( // yo
  foo, // bar
  baz, // heh
) = 1

let foo: /* int */ Int32 = 1l
let foo: /* int */ Int32 = 1l

let {
  foo,
  // comment
  bar, /*2*/
  baz, /*3*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  // trailer
} = 5

let {
  foo,
  // comment
  bar, /*2*/
  baz, /*3*/
  qux, /*4*/
  // trailer
} = 5

let {
  // comment
  foo,
  // comment
  bar,
} = 5

let [> /* foo */ foo, /* bar */ bar /* bar2 */] = 5
let [> /* foo */
  foo, /* bar */
  bar, // bar2
] = 5

let [/* foo */ foo, /* bar */ bar /* bar2 */] = 5
let [ /* foo */
  foo, /* bar */
  bar, // bar2
] = 5
let [ /* foo */
  foo, /* bar */
  bar, // bar2
  ...rest
] = 5
let [ /* foo */
  foo, /* bar */
  bar, // bar2
  ...rest // trailer
] = 5

let ( // yo
  foo, // bar
  baz, // heh
) = 1

{ /* foo */ foo, }
{ foo: /* foo */ bar, }

let { /* foo */ foo } = void
let { foo: /* foo */ bar } = void

use Mod.{ module /* Foo */ Foo, type /* Foo */ Foo, foo }
use Mod.*

match (5) {
  1 /* when */ when false => 5,
  1 /* when */ when false => 5,
  1 => // branch
    5,
  1 => /* branch */ {
    5
  },
  1 => /* branch */ {
    5
  },
  1 => /* branch1 */ /* branch2 */ {
    5
  },
}

// comment before attr
@attr("foo", "bar") // line comment on attr
// comment after attr
/* block comment attr2 */
@attr2
// comment after second attr
let _ = 1
@attr(/* foo */ "foo", /* bar */ "bar")
let _ = 1
@attr( // foo
  "foo", /* bar */
  "bar",
)
let _ = 1

foo(foo=/*foo*/5)
foo(foo=/*foo*/5)

if (/* if */ cond) {
  5
} else {
  6
}
if (/* if */ cond) {
  5
} else {
  6
}
if (cond /* if */) {
  5
} else {
  6
}
if (cond /* if */) {
  5
} else {
  6
}
if (cond) {
  5
} /* if */ else {
  6
}
if (cond) {
  5
} /* if */ else {
  6
}
if (cond)
  5 /* longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong */
else
  5

foo += /* foo */ 1
foo += /* foo */ 1
foo += /* foo */ 1
foo += /* foo */ 1
foo += /* foo */ /* foo */ 1
foo += /* foo */ /* foo */ 1

{
  @attr // foo
  let // foo
  _ = 1
  @attr(
    "foo", /* doo */
    "foo",
    // foo
    // goo
  ) // bar
  let /* doo */ // foo
  // goo
  // bar
  _ = 1
}

Foo( // yo
  foo, // bar
  baz, // heh
)
Foo{
  // comment
  foo,
  // comment
  bar
}

{
  // foo
  foo
  foo

  foo

  foo // same line foo
  // next line foo

  // trailer
}

{
  let rec mut /* let */ /* rec */ /* mut */ foo = 5

  let foo = 5 // foo
  and foo = 6

  let foo = 5
  // foo
  and foo = 6

  let foo = 5

  // foo
  and foo = 6
}

!/* foo */true

fail /* fail */ "fail"

foo( // yo
  foo, // bar
  baz // heh
)
foo(/*a*/ 1 /*b*/)

x => /* foo */ /* foo */ 5
x => /* foo */
// foo
 5

( // yo
  foo, // bar
  baz, // heh
  /* lambda */
) => 5

( // yo
  foo, // bar
  baz, // heh
)

foo/* arr */[1]
foo/* arr */[1] = /* arr */ 1

{
  // comment
  foo,
  // comment
  bar,
}
{
  foo,
  // comment
  bar, /*2*/
  baz, /*3*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  qux, /*4*/
  // trailer
}
{
  ...old,
  // comment
  foo,
  // comment
  bar,
}
{ // old
  ...old,
  // comment
  foo,
  // comment
  bar,
}
{ /* old */
  ...old,
  // comment
  foo,
  // comment
  bar,
}

foo./* bar */bar
foo.// bar
bar

foo := /* foo */ /* foo */ foo

return /* return */ foo

use /* use */ Mod./* Mod */ /* dot */ *
use /* use */ Mod.{ /* Mod */ /* dot */ foo }

while (/* true */ true) {
  void
}
while (/* true */ true) {
  void
}
while (true /* true */) {
  void
}
while (true /* true */) {
  void
}
while (true /* true */) void

for (/* for */
  /* init */
  let mut i = 1; /*cond*/
  i < 1; /*inc*/
  i += 1 /* more */
  /* and more */
) {
  void
}
for (; /* for */
  /* init */
  /*cond*/
  i < 1; /*inc*/
  i += 1 /* more */
  /* and more */
) {
  void
}
for (/* for */
  /* init */
  let mut i = 1;
  ; /*cond*/
  /*inc*/
  i += 1 /* more */
  /* and more */
) {
  void
}
for (/* for */
  /* init */
  let mut i = 1; /*cond*/
  i < 1; /*inc*/
  /* more */
  /* and more */
) {
  void
}
for (;; /* for */ /* init */ /*cond*/ /*inc*/ /* more */ /* and more */) {
  void
}
for (;; /* for */ /* init */ /*cond*/ /*inc*/ /* more */ /* and more */) void

match (/* match */ /*foo*/ foo /* post foo */ /* post foo 2 */) { /* mr branch */
  _ => /* void */ void, /* post void */
}

foo: /* foo*/ Number
foo: /* foo*/ Number

let foo = /* foo */ 5
let foo = /* foo */ 5

let foo: (a: /* a */ Number) => a = void
let foo: (a: /* a */ Number) => a = void

let foo: Box</* Box */ /* a */ a /* after a */> = void

foo: (/*Number*/ Number, /*post Number*/ /* String */ String /*post String */)

foo: Number => /* Number */ Void
foo: Number => /* Number */ Void
foo:
  (Number, /* Number */ String /* String */ /* More String */ /* Void */) => Void

record Rec {
  foo: /* foo */ /* more foo */ Void,
  mut bar: /*pre-bar*/ /* bar */ Void,
}

enum Enum {
  Foo/* Foo */(/* Number */ Number, /* String */ String /*post-string*/),
}

enum Enum {
  Foo/* Foo */{ /* Number */
    foo: Number, /* String */
    bar: String, /*post-string*/
  },
}

exception /* except */ Foo
exception /* except */ Foo/*Foo*/(Number)

type /* type */ Foo = /* Foo */ /* Number */ Number
type /* type */ Foo</* Foo */
  /* a */
  a, /* post-a */
  b /* post-b */
  /* Foo */
  /* Number */
> = Number

primitive /* prim */ foo = /* foo */ /* hello */ "@hello"

from /* from */ "foo" /* foo */ /* include */ include Foo
from /* from */ "foo" /* foo */ /* include */ include Foo as /* as */ /* alias */ Foo

module /* module */ Foo { /* Foo */
  foo /* foo */
  bar
}

module /* module */ Foo { /* Foo */
  foo /* foo */

  // bar

  bar
}

foreign wasm foo: /* foo1 */ /* foo2 */ Number from /* type */ /* from */ ""
foreign wasm foo: /* foo1 */
  /* foo2 */
  Number as /* pre-alias */ /* as */ bar from /* bar */ /* from */ ""

provide {
  foo as /* foo */ /* as */ bar,
  type Foo as /* Foo */ /* as */ Bar,
  module Foo as /* Foo */ /* as */ Bar,
}

@attr // foo
let _ = 1
@attr(
  "foo", /* doo */
  "foo",
  // foo
  // goo
) // bar
let _ = 1

provide /* provide */ enum Foo {
  Foo,
}
abstract /* abstract */ enum Foo {
  Foo,
}

let foo = bar
and baz = qux
let foo = bar
and baz = qux
let foo = bar /*and1*/ /*and2*/
and baz = qux
let foo = bar

// and
and baz = qux

provide /* provide */ primitive /* prim */ foo = /* foo */ /* hello */ "@hello"

provide { /*header*/ foo, /* foo */ type Foo /*trailer*/ }

[>]
[> /*foo */]
let [>] = 5
let [> /*foo */] = 5
[]
[/*foo */]
let [] = 5
let [/*foo */] = 5

1 /* abc */ /2
1/ /* abc */ 2
1/ // abc
2
1 /* abc */ /2
1 /* abc */ / /* xyz */ 2

partial /* a */ f(/* b */
  /* c */
  _, /* d */
  1, /* e */
  a=/* f */ /* g */_ /* h */
) // i
