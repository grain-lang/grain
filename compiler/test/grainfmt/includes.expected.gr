module Includes

from "runtime/unsafe/memory" include Memory
from "runtime/unsafe/tags" include Tags
from "list" include List
from "option" include Option as Opt
from "option" include Option as Opt
from /* special include */ "array" include Array
from "array" include Array as /* special include */ Foo
use List.{ length, map, forEach as each }
use Opt.{
  module MutableOpt,
  module ImmutableOpt as Imm,
  type Opt,
  type Opt as OptAlias,
}
use Opt.{
  module MutableOpt, /* comment1 */
  module ImmutableOpt as /* comment2 */ /* comment3 */ Imm, /* comment4 */
  /* comment5 */
  type /* comment6 */ Opt,
  type Opt as /* comment7 */ OptAlias,
  exception Exc as /* comment8 */ E,
  exception Exc2, /* comment9 */
}

from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ add as (+), mul as (*), xor as (^), shl as (<<) }

provide foreign wasm storage_read:
  (WasmI64, WasmI64, WasmI64) => WasmI64 as storageRead from "env"

from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{
  eq, // comment1
  // comment 3
  and_ as (&), // comment 2
  or as (|),
  // no signed imports, as care should be taken to use signed or unsigned operators
}

provide foreign wasm promise_results_count:
  () => WasmI64 as promiseResultsCount from "env"

provide { exception MyExc as E2 }
