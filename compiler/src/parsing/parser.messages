program: ASSERT WHEN
##
## Ends in an error in state: 38.
##
## stmt_expr -> ASSERT . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ASSERT
##

Expected an expression after `assert`.

program: AT LIDENT EOL WHILE
##
## Ends in an error in state: 439.
##
## list(attribute) -> attribute . list(attribute) [ TYPE RECORD LET IMPORT EXPORT ENUM ]
##
## The known suffix of the stack is as follows:
## attribute
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 195, spurious reduction of production attribute -> AT id_str loption(attribute_arguments) eols
##
program: AT LIDENT WHILE
##
## Ends in an error in state: 185.
##
## attribute -> AT id_str . loption(attribute_arguments) [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
## attribute -> AT id_str . loption(attribute_arguments) eols [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
##
## The known suffix of the stack is as follows:
## AT id_str
##
program: AT WHILE
##
## Ends in an error in state: 184.
##
## attribute -> AT . id_str loption(attribute_arguments) [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
## attribute -> AT . id_str loption(attribute_arguments) eols [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
##
## The known suffix of the stack is as follows:
## AT
##
program: AT LIDENT LPAREN RPAREN WHILE
##
## Ends in an error in state: 194.
##
## attribute -> AT id_str loption(attribute_arguments) . [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
## attribute -> AT id_str loption(attribute_arguments) . eols [ TYPE RECORD LET IMPORT EXPORT ENUM AT ]
##
## The known suffix of the stack is as follows:
## AT id_str loption(attribute_arguments)
##

Attributes are only allowed on let bindings, data declarations, and foreign statements.

program: AT LIDENT LPAREN STRING COMMA WHILE
##
## Ends in an error in state: 191.
##
## lseparated_nonempty_list_inner(comma,attribute_argument) -> lseparated_nonempty_list_inner(comma,attribute_argument) comma . attribute_argument [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,attribute_argument) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
##
program: AT LIDENT LPAREN WHILE
##
## Ends in an error in state: 186.
##
## attribute_arguments -> lparen . rparen [ TYPE RECORD LET IMPORT EXPORT EOL ENUM AT ]
## attribute_arguments -> lparen . lseparated_nonempty_list_inner(comma,attribute_argument) rparen [ TYPE RECORD LET IMPORT EXPORT EOL ENUM AT ]
##
## The known suffix of the stack is as follows:
## lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a string.

program: AT LIDENT LPAREN STRING WHILE
##
## Ends in an error in state: 189.
##
## attribute_arguments -> lparen lseparated_nonempty_list_inner(comma,attribute_argument) . rparen [ TYPE RECORD LET IMPORT EXPORT EOL ENUM AT ]
## lseparated_nonempty_list_inner(comma,attribute_argument) -> lseparated_nonempty_list_inner(comma,attribute_argument) . comma attribute_argument [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lparen lseparated_nonempty_list_inner(comma,attribute_argument)
##

Expected a comma followed by more attribute parameters or `)` to complete the attribute.

program: DASH WHILE
##
## Ends in an error in state: 50.
##
## const -> option(DASH) . NUMBER_INT [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . NUMBER_FLOAT [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . INT32 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . INT64 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . FLOAT32 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . FLOAT64 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . WASMI32 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . WASMI64 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . WASMF32 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . WASMF64 [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## const -> option(DASH) . BIGINT [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## option(DASH)
##

Expected a number to follow the minus sign.

program: ENUM UIDENT LBRACE LBRACK ELLIPSIS RBRACK LPAREN UIDENT RCARET
##
## Ends in an error in state: 961.
##
## data_constructor -> lbrack ELLIPSIS rbrack lparen option(typs) . rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack ELLIPSIS rbrack lparen option(typs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
## In state 94, spurious reduction of production option(comma) ->
## In state 97, spurious reduction of production typs -> lseparated_nonempty_list_inner(comma,typ) option(comma)
## In state 119, spurious reduction of production option(typs) -> typs
##
program: ENUM UIDENT LBRACE LBRACK ELLIPSIS RBRACK LPAREN WHILE
##
## Ends in an error in state: 960.
##
## data_constructor -> lbrack ELLIPSIS rbrack lparen . option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack ELLIPSIS rbrack lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: ENUM UIDENT LBRACE LBRACK ELLIPSIS RBRACK WHILE
##
## Ends in an error in state: 959.
##
## data_constructor -> lbrack ELLIPSIS rbrack . lparen option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack ELLIPSIS rbrack
##
program: ENUM UIDENT LBRACE LBRACK ELLIPSIS WHILE
##
## Ends in an error in state: 958.
##
## data_constructor -> lbrack ELLIPSIS . rbrack lparen option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack ELLIPSIS
##
program: ENUM UIDENT LBRACE LBRACK RBRACK WHILE
##
## Ends in an error in state: 953.
##
## data_constructors -> lbrace lseparated_nonempty_list_inner(comma,data_constructor) . option(comma) rbrace [ SEMI EOL EOF COMMA ]
## lseparated_nonempty_list_inner(comma,data_constructor) -> lseparated_nonempty_list_inner(comma,data_constructor) . comma data_constructor [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrace lseparated_nonempty_list_inner(comma,data_constructor)
##
program: ENUM UIDENT LBRACE LBRACK WHILE
##
## Ends in an error in state: 957.
##
## data_constructor -> lbrack . rbrack [ RBRACE EOL COMMA ]
## data_constructor -> lbrack . ELLIPSIS rbrack lparen option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##

Expected a list enum declaration using the syntax `enum List<a> { [], [...](a, List<a>) }`.

program: ENUM UIDENT LBRACE UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 956.
##
## lseparated_nonempty_list_inner(comma,data_constructor) -> lseparated_nonempty_list_inner(comma,data_constructor) comma . data_constructor [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,data_constructor) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected a variant definition or `}` to complete the enum declaration.

program: ENUM UIDENT LBRACE UIDENT LPAREN UIDENT RCARET
##
## Ends in an error in state: 951.
##
## data_constructor -> UIDENT lparen option(typs) . rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## UIDENT lparen option(typs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
## In state 94, spurious reduction of production option(comma) ->
## In state 97, spurious reduction of production typs -> lseparated_nonempty_list_inner(comma,typ) option(comma)
## In state 119, spurious reduction of production option(typs) -> typs
##

Expected type parameters surrounded by `<`/`>`, a comma followed by more types, a dot followed by an identifier, or `)` to complete the variant definition.

program: ENUM UIDENT LBRACE UIDENT LPAREN WHILE
##
## Ends in an error in state: 950.
##
## data_constructor -> UIDENT lparen . option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## UIDENT lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a type or `)` to complete the variant definition.

program: ENUM UIDENT LBRACE UIDENT RBRACE COMMA EOL WHILE
##
## Ends in an error in state: 986.
##
## separated_nonempty_list(comma,data_declaration_stmt) -> data_declaration_stmt comma . separated_nonempty_list(comma,data_declaration_stmt) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## data_declaration_stmt comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: ENUM UIDENT LBRACE UIDENT RBRACE COMMA EXPORT WHILE
##
## Ends in an error in state: 987.
##
## data_declaration_stmt -> EXPORT . data_declaration [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## EXPORT
##

Mutually recursive data declarations are separated by commas, but cannot be mixed with other kinds of expressions.

program: ENUM UIDENT LBRACE UIDENT WHILE
##
## Ends in an error in state: 949.
##
## data_constructor -> UIDENT . [ RBRACE EOL COMMA ]
## data_constructor -> UIDENT . lparen option(typs) rparen [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## UIDENT
##

Expected `(` followed by comma-separated types, a comma followed by more variants, or `}` to complete the enum declaration.

program: ENUM UIDENT LBRACE WHILE
##
## Ends in an error in state: 948.
##
## data_constructors -> lbrace . lseparated_nonempty_list_inner(comma,data_constructor) option(comma) rbrace [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a capitalized variant name.

program: ENUM UIDENT LBRACE UIDENT RBRACE WHILE
##
## Ends in an error in state: 985.
##
## separated_nonempty_list(comma,data_declaration_stmt) -> data_declaration_stmt . [ SEMI EOL EOF ]
## separated_nonempty_list(comma,data_declaration_stmt) -> data_declaration_stmt . comma separated_nonempty_list(comma,data_declaration_stmt) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## data_declaration_stmt
##

Expected a comma followed by more mutually-recursive data declarations or a newline character to complete the current one.

program: ENUM UIDENT LCARET LIDENT RCARET INFIX_80
##
## Ends in an error in state: 947.
##
## data_declaration -> ENUM UIDENT option(id_vec) . data_constructors [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM UIDENT option(id_vec)
##

Expected `{` followed by comma-separated variants.

program: ENUM UIDENT WHILE
##
## Ends in an error in state: 946.
##
## data_declaration -> ENUM UIDENT . option(id_vec) data_constructors [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM UIDENT
##

Expected type parameters surrounded by angle brackets or `{` followed by comma-separated variants.

program: TYPE UIDENT WHILE
##
## Ends in an error in state: 831.
##
## data_declaration -> TYPE UIDENT . option(id_vec) equal typ [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE UIDENT
##

Expected type parameters surrounded by angle brackets or `=` followed by a type.

program: ENUM WHILE
##
## Ends in an error in state: 945.
##
## data_declaration -> ENUM . UIDENT option(id_vec) data_constructors [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Expected a capitalized name for the enum declaration.

program: TYPE WHILE
##
## Ends in an error in state: 830.
##
## data_declaration -> TYPE . UIDENT option(id_vec) equal typ [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expected a capitalized name for the type alias.

program: EOL UNDERSCORE
##
## Ends in an error in state: 990.
##
## program -> eols . toplevel_stmts EOF [ # ]
## program -> eols . EOF [ # ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: EOL WASMI64 SEMI RBRACE
##
## Ends in an error in state: 824.
##
## lseparated_nonempty_list_inner(eos,toplevel_stmt) -> lseparated_nonempty_list_inner(eos,toplevel_stmt) eos . toplevel_stmt [ SEMI EOL EOF ]
## option(eos) -> eos . [ EOF ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(eos,toplevel_stmt) eos
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 340, spurious reduction of production eos -> SEMI
##
program: WHEN
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected an import, export, expression, or type declaration.

program: EOL WASMI64 THICKARROW
##
## Ends in an error in state: 822.
##
## lseparated_nonempty_list_inner(eos,toplevel_stmt) -> lseparated_nonempty_list_inner(eos,toplevel_stmt) . eos toplevel_stmt [ SEMI EOL EOF ]
## toplevel_stmts -> lseparated_nonempty_list_inner(eos,toplevel_stmt) . option(eos) [ EOF ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(eos,toplevel_stmt)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 826, spurious reduction of production toplevel_stmt -> expr
## In state 819, spurious reduction of production lseparated_nonempty_list_inner(eos,toplevel_stmt) -> toplevel_stmt
##

Expected an infix operator to continue the expression or a newline character to terminate it.

program: LBRACE BREAK RBRACE DOT EOL LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 310.
##
## record_set -> braced_expr DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LBRACE BREAK RBRACE DOT LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 302.
##
## record_set -> braced_expr DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LBRACE BREAK RBRACE GETS EOL UNDERSCORE
##
## Ends in an error in state: 227.
##
## assign_expr -> braced_expr GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LBRACE BREAK RBRACE GETS WHEN
##
## Ends in an error in state: 225.
##
## assign_expr -> braced_expr GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> braced_expr GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr GETS
##
program: LBRACE BREAK RBRACE LBRACK WASMI64 RBRACK EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 325.
##
## array_set -> braced_expr lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LBRACE UIDENT COLON EOL UNDERSCORE
##
## Ends in an error in state: 332.
##
## non_punned_record_field -> id COLON eols . expr [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LBRACE UIDENT COLON WHEN
##
## Ends in an error in state: 212.
##
## non_punned_record_field -> id COLON . expr [ RBRACE EOL COMMA ]
## non_punned_record_field -> id COLON . eols expr [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON
##
program: LBRACK ELLIPSIS WHEN
##
## Ends in an error in state: 182.
##
## list_item -> ELLIPSIS . expr [ RBRACK EOL COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##
program: LET WASMI64 EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 430.
##
## value_bind -> pattern equal . expr [ SEMI RBRACE EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## pattern equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LPAREN BREAK RPAREN DOT EOL LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 602.
##
## record_set -> paren_expr DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LPAREN BREAK RPAREN DOT LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 594.
##
## record_set -> paren_expr DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LPAREN BREAK RPAREN GETS EOL UNDERSCORE
##
## Ends in an error in state: 590.
##
## assign_expr -> paren_expr GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LPAREN BREAK RPAREN GETS WHEN
##
## Ends in an error in state: 49.
##
## assign_expr -> paren_expr GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> paren_expr GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr GETS
##
program: LPAREN BREAK RPAREN LBRACK UNDERSCORE
##
## Ends in an error in state: 608.
##
## array_get -> paren_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> paren_expr lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: LPAREN BREAK RPAREN LBRACK WASMI64 RBRACK EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 611.
##
## array_set -> paren_expr lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: LPAREN UNDERSCORE
##
## Ends in an error in state: 157.
##
## id_str -> lparen . special_op rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EQUAL EOL EOF ELSE DOT DASH COMMA COLON ]
## paren_expr -> lparen . expr rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## simple_expr -> lparen . tuple_exprs rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: LPAREN WASMI64 COMMA EOL UNDERSCORE
##
## Ends in an error in state: 523.
##
## tuple_exprs -> expr COMMA eols . lseparated_nonempty_list_inner(comma,expr) option(comma) [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## expr COMMA eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: MATCH LPAREN UNDERSCORE
##
## Ends in an error in state: 15.
##
## match_expr -> MATCH lparen . expr rparen lbrace match_branches rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MATCH lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 THICKARROW EOL UNDERSCORE
##
## Ends in an error in state: 775.
##
## match_branch -> pattern thickarrow . expr [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## pattern thickarrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 28, spurious reduction of production thickarrow -> THICKARROW eols
##
program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 WHEN WHEN
##
## Ends in an error in state: 770.
##
## when_guard -> WHEN . expr [ THICKARROW ]
##
## The known suffix of the stack is as follows:
## WHEN
##
program: PREFIX_150 WHEN
##
## Ends in an error in state: 13.
##
## prim1_expr -> PREFIX_150 . non_assign_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## PREFIX_150
##
program: THROW WHEN
##
## Ends in an error in state: 11.
##
## stmt_expr -> THROW . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## THROW
##
program: WASMI64 INFIX_70 EOL UNDERSCORE
##
## Ends in an error in state: 569.
##
## binop_expr -> non_stmt_expr INFIX_70 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_70 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WHILE LPAREN WASMI64 RPAREN LBRACE UNDERSCORE
##
## Ends in an error in state: 669.
##
## block -> lbrace . block_body rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##
program: MATCH LPAREN FLOAT32 RPAREN LBRACE NUMBER_INT WHEN FLOAT32 THICKARROW WHEN
##
## Ends in an error in state: 773.
##
## match_branch -> pattern when_guard thickarrow . expr [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## pattern when_guard thickarrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 27, spurious reduction of production thickarrow -> THICKARROW
##
program: MATCH LPAREN FLOAT32 RPAREN LBRACE NUMBER_INT EOL WHEN WHEN
##
## Ends in an error in state: 778.
##
## when_guard -> eols WHEN . expr [ THICKARROW ]
##
## The known suffix of the stack is as follows:
## eols WHEN
##

Expected an expression.

program: EXCEPTION UIDENT LPAREN UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 98.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) comma . typ [ RPAREN RCARET EOL COMMA ]
## option(comma) -> comma . [ RPAREN RCARET EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,typ) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: EXCEPTION UIDENT LPAREN WHILE
##
## Ends in an error in state: 813.
##
## exception_stmt -> EXCEPTION type_id_str lparen . option(typs) rparen [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## EXCEPTION type_id_str lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: LET WASMI64 COLON EOL WHILE
##
## Ends in an error in state: 368.
##
## pattern -> pattern COLON eols . typ [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LET WASMI64 COLON WHILE
##
## Ends in an error in state: 366.
##
## pattern -> pattern COLON . typ [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> pattern COLON . eols typ [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern COLON
##
program: PRIMITIVE LIDENT COLON EOL WHILE
##
## Ends in an error in state: 807.
##
## primitive_stmt -> PRIMITIVE id_str COLON eols . typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PRIMITIVE LIDENT COLON WHILE
##
## Ends in an error in state: 803.
##
## primitive_stmt -> PRIMITIVE id_str COLON . typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE id_str COLON . eols typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON
##
program: PRIMITIVE THROW COLON EOL WHILE
##
## Ends in an error in state: 798.
##
## primitive_stmt -> PRIMITIVE prim COLON eols . typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PRIMITIVE THROW COLON WHILE
##
## Ends in an error in state: 794.
##
## primitive_stmt -> PRIMITIVE prim COLON . typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE prim COLON . eols typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON
##
program: RECORD UIDENT LBRACE LIDENT COLON EOL WHILE
##
## Ends in an error in state: 857.
##
## data_label -> simple_id COLON eols . typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## simple_id COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: RECORD UIDENT LBRACE LIDENT COLON WHILE
##
## Ends in an error in state: 855.
##
## data_label -> simple_id COLON . typ [ RBRACE EOL COMMA ]
## data_label -> simple_id COLON . eols typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## simple_id COLON
##

Expected a type.

program: EXCEPTION UIDENT LPAREN UIDENT RCARET
##
## Ends in an error in state: 814.
##
## exception_stmt -> EXCEPTION type_id_str lparen option(typs) . rparen [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## EXCEPTION type_id_str lparen option(typs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
## In state 94, spurious reduction of production option(comma) ->
## In state 97, spurious reduction of production typs -> lseparated_nonempty_list_inner(comma,typ) option(comma)
## In state 119, spurious reduction of production option(typs) -> typs
##

Expected `)` to complete the exception declaration.

program: EXCEPTION UIDENT LPAREN UIDENT WHEN
##
## Ends in an error in state: 94.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) . comma typ [ RPAREN RCARET EOL COMMA ]
## typs -> lseparated_nonempty_list_inner(comma,typ) . option(comma) [ RPAREN RCARET EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,typ)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
##

Expected type parameters surrounded by angle brackets or a comma followed by more types.

program: EXCEPTION UIDENT WHILE
##
## Ends in an error in state: 812.
##
## exception_stmt -> EXCEPTION type_id_str . [ SEMI EOL EOF ]
## exception_stmt -> EXCEPTION type_id_str . lparen option(typs) rparen [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## EXCEPTION type_id_str
##

Expected `(` followed by comma-separated types or a newline to complete the exception declaration.

program: EXCEPTION WHILE
##
## Ends in an error in state: 811.
##
## exception_stmt -> EXCEPTION . type_id_str [ SEMI EOL EOF ]
## exception_stmt -> EXCEPTION . type_id_str lparen option(typs) rparen [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## EXCEPTION
##

Expected a capitalized name for the exception.

program: EXPORT LET MUT WHILE
##
## Ends in an error in state: 942.
##
## export_stmt -> attributes EXPORT LET MUT . value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT LET MUT
##
program: EXPORT LET REC MUT WHILE
##
## Ends in an error in state: 939.
##
## export_stmt -> attributes EXPORT LET REC MUT . value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT LET REC MUT
##
program: EXPORT LET REC WHILE
##
## Ends in an error in state: 938.
##
## export_stmt -> attributes EXPORT LET REC . value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT LET REC . MUT value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT LET REC
##
program: LBRACE LET MUT WHILE
##
## Ends in an error in state: 436.
##
## let_expr -> attributes LET MUT . value_binds [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## attributes LET MUT
##
program: LBRACE LET REC MUT WHILE
##
## Ends in an error in state: 352.
##
## let_expr -> attributes LET REC MUT . value_binds [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## attributes LET REC MUT
##
program: LET MUT WHILE
##
## Ends in an error in state: 871.
##
## toplevel_stmt -> attributes LET MUT . value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes LET MUT
##
program: LET REC MUT WHILE
##
## Ends in an error in state: 868.
##
## toplevel_stmt -> attributes LET REC MUT . value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes LET REC MUT
##

Expected a binding pattern, such as an identifier.

program: EXPORT LET WHILE
##
## Ends in an error in state: 937.
##
## export_stmt -> attributes EXPORT LET . REC value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT LET . value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT LET . REC MUT value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT LET . MUT value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT LET
##
program: LBRACE LET WHILE
##
## Ends in an error in state: 348.
##
## let_expr -> attributes LET . REC value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes LET . value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes LET . REC MUT value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes LET . MUT value_binds [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## attributes LET
##
program: LET WHILE
##
## Ends in an error in state: 866.
##
## toplevel_stmt -> attributes LET . REC value_binds [ SEMI EOL EOF ]
## toplevel_stmt -> attributes LET . value_binds [ SEMI EOL EOF ]
## toplevel_stmt -> attributes LET . REC MUT value_binds [ SEMI EOL EOF ]
## toplevel_stmt -> attributes LET . MUT value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes LET
##

Expected the keyword `rec`, the keyword `mut`, or a binding pattern, such as an identifier.

program: EXPORT STAR EXCEPT UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 931.
##
## lseparated_nonempty_list_inner(comma,export_id_str) -> lseparated_nonempty_list_inner(comma,export_id_str) comma . export_id_str [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,export_id_str) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected an identifier to exclude from the export.

program: EXPORT STAR EXCEPT UIDENT COMMA UIDENT WHILE
##
## Ends in an error in state: 930.
##
## export_exception -> EXCEPT lseparated_nonempty_list_inner(comma,export_id_str) . [ SEMI EOL EOF ]
## lseparated_nonempty_list_inner(comma,export_id_str) -> lseparated_nonempty_list_inner(comma,export_id_str) . comma export_id_str [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## EXCEPT lseparated_nonempty_list_inner(comma,export_id_str)
##

Expected a comma followed by another identifier to exclude or a newline character to complete the export statement.

program: EXPORT STAR EXCEPT WHILE
##
## Ends in an error in state: 928.
##
## export_exception -> EXCEPT . lseparated_nonempty_list_inner(comma,export_id_str) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## EXCEPT
##

Expected an identifier to exclude from the export.

program: EXPORT STAR WHILE
##
## Ends in an error in state: 927.
##
## export_stmt -> attributes EXPORT STAR . option(export_exception) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT STAR
##

Expected the keyword `except` followed by comma-separated identifiers to exclude or a newline character to complete the statement.

program: EXPORT UIDENT AS UIDENT WHILE
##
## Ends in an error in state: 979.
##
## separated_nonempty_list(comma,aliasable(any_id_str)) -> aliasable(any_id_str) . [ SEMI EOL EOF ]
## separated_nonempty_list(comma,aliasable(any_id_str)) -> aliasable(any_id_str) . comma separated_nonempty_list(comma,aliasable(any_id_str)) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## aliasable(any_id_str)
##

Expected a comma followed by another identifier to export or a newline character to complete the statement.

program: EXPORT UIDENT AS WHILE
##
## Ends in an error in state: 975.
##
## as_prefix(any_id_str) -> AS . any_id_str [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## AS
##
program: LET NUMBER_INT AS WHILE
##
## Ends in an error in state: 386.
##
## pattern -> pattern AS . id_str [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> pattern AS . eols id_str [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern AS
##
program: LET NUMBER_INT AS EOL WHILE
##
## Ends in an error in state: 388.
##
## pattern -> pattern AS eols . id_str [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern AS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected an identifier to use as an alias.

program: EXPORT UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 980.
##
## separated_nonempty_list(comma,aliasable(any_id_str)) -> aliasable(any_id_str) comma . separated_nonempty_list(comma,aliasable(any_id_str)) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## aliasable(any_id_str) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another identifier to export.

program: EXPORT UIDENT WHILE
##
## Ends in an error in state: 974.
##
## aliasable(any_id_str) -> any_id_str . option(as_prefix(any_id_str)) [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## any_id_str
##

Expected a comma followed by another identifier to export or a newline character to complete the statement.

program: EXPORT WHILE
##
## Ends in an error in state: 926.
##
## data_declaration_stmt -> EXPORT . data_declaration [ SEMI EOL EOF COMMA ]
## export_stmt -> attributes EXPORT . LET REC value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . LET value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . LET REC MUT value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . LET MUT value_binds [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . foreign_stmt [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . primitive_stmt [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . exception_stmt [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . separated_nonempty_list(comma,aliasable(any_id_str)) [ SEMI EOL EOF ]
## export_stmt -> attributes EXPORT . STAR option(export_exception) [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes EXPORT
##

Expected a let binding, data declaration, exception, comma-separated list of identifiers, or `*` to export all values.

program: FAIL WHEN
##
## Ends in an error in state: 33.
##
## stmt_expr -> FAIL . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FAIL
##

Expected the `fail` keyword followed by an expression.

program: FOR LPAREN SEMI EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 695.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr rparen
##
program: FOR LPAREN SEMI EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 691.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr rparen
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 704.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 700.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr rparen
##
program: FOR LPAREN SEMI SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 676.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr rparen
##
program: FOR LPAREN SEMI SEMI RPAREN WHILE
##
## Ends in an error in state: 668.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr rparen
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 685.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr rparen
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 681.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 734.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 730.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 743.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 739.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 715.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI RPAREN WHILE
##
## Ends in an error in state: 711.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI EOL RPAREN WHILE
##
## Ends in an error in state: 724.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr rparen
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI RPAREN WHILE
##
## Ends in an error in state: 720.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr rparen
##

Expected `{` to start a block.

program: FOR LPAREN SEMI EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 694.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 690.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 702.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 703.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 699.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 675.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI SEMI WASMI64 RBRACK
##
## Ends in an error in state: 667.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 684.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 680.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 733.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 729.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 742.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 738.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 714.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI WASMI64 RBRACK
##
## Ends in an error in state: 710.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI EOL WASMI64 RBRACK
##
## Ends in an error in state: 723.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI WASMI64 RBRACK
##
## Ends in an error in state: 719.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##

Expected `)` followed by `{` to start a block.

program: FOR LPAREN SEMI EOL SEMI WHEN
##
## Ends in an error in state: 689.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI
##
program: FOR LPAREN SEMI EOL WASMI64 EOL SEMI WHEN
##
## Ends in an error in state: 698.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI
##
program: FOR LPAREN SEMI SEMI EOL UNDERSCORE
##
## Ends in an error in state: 674.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI SEMI WHEN
##
## Ends in an error in state: 666.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr SEMI
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 683.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI WASMI64 EOL SEMI WHEN
##
## Ends in an error in state: 679.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols SEMI
##
program: FOR LPAREN SEMI EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 693.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 732.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI EOL SEMI WHEN
##
## Ends in an error in state: 728.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 741.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL SEMI WHEN
##
## Ends in an error in state: 737.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI EOL UNDERSCORE
##
## Ends in an error in state: 713.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI SEMI WHEN
##
## Ends in an error in state: 709.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr SEMI
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 722.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL SEMI WHEN
##
## Ends in an error in state: 718.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI . for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI . eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI
##

Expected an expression or an immediate `)` to skip the increment expression.

program: FOR LPAREN SEMI EOL UNDERSCORE
##
## Ends in an error in state: 687.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols . for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols . for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols . for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols . for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI EOL WASMI64 EOL WHILE
##
## Ends in an error in state: 697.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI WHEN
##
## Ends in an error in state: 664.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI . for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI . eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI
##
program: FOR LPAREN WASMI64 EOL SEMI EOL UNDERSCORE
##
## Ends in an error in state: 726.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols . for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols . for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols . for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols . for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected an expression or an immediate semicolon to skip the condition expression.

program: FOR LPAREN SEMI EOL WASMI64 RPAREN
##
## Ends in an error in state: 688.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr . eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI eols for_inner_expr . eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN SEMI WASMI64 EOL WHILE
##
## Ends in an error in state: 678.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr eols . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN SEMI WASMI64 RPAREN
##
## Ends in an error in state: 665.
##
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr . eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) SEMI for_inner_expr . eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 EOL WHILE
##
## Ends in an error in state: 736.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI EOL WASMI64 RPAREN
##
## Ends in an error in state: 727.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr . eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr . eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI eols for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 EOL WHILE
##
## Ends in an error in state: 717.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 EOL SEMI WASMI64 RPAREN
##
## Ends in an error in state: 708.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr . SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr . SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr . eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI for_inner_expr . eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI for_inner_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 673, spurious reduction of production for_inner_expr -> expr
##

Expected a semicolon to complete the loop condition.

program: FOR LPAREN UNDERSCORE
##
## Ends in an error in state: 31.
##
## for_expr -> FOR lparen . option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen . option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: FOR LPAREN WASMI64 EOL SEMI WHEN
##
## Ends in an error in state: 707.
##
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols SEMI . eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols SEMI
##

Expected an expression or an immediate semicolon to skip the loop initializer expression.

program: FOR LPAREN WASMI64 EOL WHILE
##
## Ends in an error in state: 706.
##
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) eols . SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr) eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: FOR LPAREN WASMI64 RPAREN
##
## Ends in an error in state: 663.
##
## for_expr -> FOR lparen option(block_body_expr) . SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR lparen option(block_body_expr) . eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR lparen option(block_body_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 345, spurious reduction of production block_body_expr -> expr
## In state 745, spurious reduction of production option(block_body_expr) -> block_body_expr
##

Expected a semicolon to complete the loop initializer expression.

program: FOR WHILE
##
## Ends in an error in state: 30.
##
## for_expr -> FOR . lparen option(block_body_expr) SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI eols for_inner_expr SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## for_expr -> FOR . lparen option(block_body_expr) eols SEMI eols for_inner_expr eols SEMI eols for_inner_expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FOR
##

Expected `(` to set the for loop parameters.

program: FUN LIDENT THICKARROW WHEN
##
## Ends in an error in state: 29.
##
## lam_expr -> FUN LIDENT thickarrow . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN LIDENT thickarrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 27, spurious reduction of production thickarrow -> THICKARROW
##
program: WHILE LPAREN WASMI64 RPAREN WHILE
##
## Ends in an error in state: 789.
##
## while_expr -> WHILE lparen expr rparen . block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## WHILE lparen expr rparen
##

Expected an expression or `{` to start a block.

program: FUN LIDENT WHILE
##
## Ends in an error in state: 26.
##
## lam_expr -> FUN LIDENT . thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN LIDENT
##
program: FUN LPAREN RPAREN WHILE
##
## Ends in an error in state: 750.
##
## lam_expr -> FUN lparen option(patterns) rparen . thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(patterns) rparen
##

# This message can never appear since the FUN token is injected _because_ of the arrow.
Expected `=>` after the function argument.

program: FUN LPAREN RPAREN THICKARROW EOL UNDERSCORE
##
## Ends in an error in state: 751.
##
## lam_expr -> FUN lparen option(patterns) rparen thickarrow . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(patterns) rparen thickarrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 28, spurious reduction of production thickarrow -> THICKARROW eols
##

Expected a function body—a block surrounded by `{`/`}` or a single expression.

program: FUN LPAREN WASMI64 COMMA EOL WASMI64 WHILE
##
## Ends in an error in state: 385.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) comma pattern . [ RPAREN RBRACK EOL COMMA ]
## pattern -> pattern . COLON typ [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,pattern) comma pattern
##
program: FUN LPAREN WASMI64 WHILE
##
## Ends in an error in state: 363.
##
## lseparated_nonempty_list_inner(comma,pattern) -> pattern . [ RPAREN RBRACK EOL COMMA ]
## pattern -> pattern . COLON typ [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RPAREN RBRACK PIPE EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expected a type annotation, a comma followed by more patterns, `)`, or `]`.

program: FUN LPAREN WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 396.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) comma . pattern [ RPAREN RBRACK EOL COMMA ]
## option(comma) -> comma . [ RPAREN RBRACK EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,pattern) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another pattern, `)`, or `]`.

program: FUN LPAREN WASMI64 RBRACK
##
## Ends in an error in state: 749.
##
## lam_expr -> FUN lparen option(patterns) . rparen thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(patterns)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 363, spurious reduction of production lseparated_nonempty_list_inner(comma,pattern) -> pattern
## In state 394, spurious reduction of production option(comma) ->
## In state 395, spurious reduction of production patterns -> lseparated_nonempty_list_inner(comma,pattern) option(comma)
## In state 748, spurious reduction of production option(patterns) -> patterns
##

Expected `)` to complete the function arguments.

program: FUN LPAREN WHILE
##
## Ends in an error in state: 747.
##
## lam_expr -> FUN lparen . option(patterns) rparen thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a function argument or `)` for a function with no arguments.

program: FUN WHILE
##
## Ends in an error in state: 25.
##
## lam_expr -> FUN . lparen option(patterns) rparen thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## lam_expr -> FUN . LIDENT thickarrow expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## FUN
##

# This message can never appear since the FUN token is injected because this is already syntactically correct.
Expected an identifier for a single argument function or `(` for a multiple argument function.

program: IF LPAREN UNDERSCORE
##
## Ends in an error in state: 24.
##
## if_expr -> IF lparen . expr rparen expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen . expr rparen expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen . expr rparen expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen . expr rparen eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen . expr rparen eols expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen . expr rparen eols expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a condition expression.

program: IF LPAREN WASMI64 RPAREN CONTINUE WHILE
##
## Ends in an error in state: 755.
##
## if_expr -> IF lparen expr rparen expr . [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen expr . ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen expr . ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen expr
##
program: IF LPAREN WASMI64 RPAREN EOL CONTINUE WHILE
##
## Ends in an error in state: 761.
##
## if_expr -> IF lparen expr rparen eols expr . [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen eols expr . ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen eols expr . ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen eols expr
##

Expected a newline character to end the `if` statement or `else` to provide an “else” branch.

program: IF LPAREN WASMI64 RPAREN EOL UNDERSCORE
##
## Ends in an error in state: 760.
##
## if_expr -> IF lparen expr rparen eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen eols . expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen eols . expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: IF LPAREN WASMI64 RPAREN EOL WASMI64 ELSE EOL UNDERSCORE
##
## Ends in an error in state: 764.
##
## if_expr -> IF lparen expr rparen eols expr ELSE eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen eols expr ELSE eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: IF LPAREN WASMI64 RPAREN EOL WASMI64 ELSE WHEN
##
## Ends in an error in state: 762.
##
## if_expr -> IF lparen expr rparen eols expr ELSE . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen eols expr ELSE . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen eols expr ELSE
##
program: IF LPAREN WASMI64 RPAREN WASMI64 ELSE EOL UNDERSCORE
##
## Ends in an error in state: 758.
##
## if_expr -> IF lparen expr rparen expr ELSE eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen expr ELSE eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: IF LPAREN WASMI64 RPAREN WASMI64 ELSE WHEN
##
## Ends in an error in state: 756.
##
## if_expr -> IF lparen expr rparen expr ELSE . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen expr ELSE . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen expr ELSE
##
program: IF LPAREN WASMI64 RPAREN WHEN
##
## Ends in an error in state: 754.
##
## if_expr -> IF lparen expr rparen . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen . expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen . expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen . eols expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr rparen . eols expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr rparen
##

Expected a block surrounded by `{`/`}` or a single expression.

program: IF LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 753.
##
## if_expr -> IF lparen expr . rparen expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr . rparen expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr . rparen expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr . rparen eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr . rparen eols expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF lparen expr . rparen eols expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF lparen expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `)` to complete the if condition.

program: IF WHILE
##
## Ends in an error in state: 23.
##
## if_expr -> IF . lparen expr rparen expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF . lparen expr rparen expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF . lparen expr rparen expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF . lparen expr rparen eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF . lparen expr rparen eols expr ELSE expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## if_expr -> IF . lparen expr rparen eols expr ELSE eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IF
##

Expected `(` followed by a condition expression.

program: IMPORT FOREIGN WASM LIDENT COLON EOL UIDENT AS LIDENT WHILE
##
## Ends in an error in state: 900.
##
## foreign_stmt -> FOREIGN WASM id_str COLON eols typ option(as_prefix(id_str)) . FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON eols typ option(as_prefix(id_str))
##
program: IMPORT FOREIGN WASM LIDENT COLON UIDENT AS LIDENT WHILE
##
## Ends in an error in state: 893.
##
## foreign_stmt -> FOREIGN WASM id_str COLON typ option(as_prefix(id_str)) . FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON typ option(as_prefix(id_str))
##

Expected the keyword `from` followed by a file path.

program: IMPORT FOREIGN WASM LIDENT COLON EOL UIDENT FROM WHILE
##
## Ends in an error in state: 901.
##
## foreign_stmt -> FOREIGN WASM id_str COLON eols typ option(as_prefix(id_str)) FROM . file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON eols typ option(as_prefix(id_str)) FROM
##
program: IMPORT FOREIGN WASM LIDENT COLON UIDENT FROM WHILE
##
## Ends in an error in state: 894.
##
## foreign_stmt -> FOREIGN WASM id_str COLON typ option(as_prefix(id_str)) FROM . file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON typ option(as_prefix(id_str)) FROM
##
program: IMPORT UIDENT FROM WHILE
##
## Ends in an error in state: 905.
##
## import_stmt -> IMPORT lseparated_nonempty_list_inner(comma,import_shape) option(comma) FROM . file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## IMPORT lseparated_nonempty_list_inner(comma,import_shape) option(comma) FROM
##

Expected a file path surrounded by `”`.

program: IMPORT FOREIGN WASM LIDENT COLON EOL UIDENT WHEN
##
## Ends in an error in state: 899.
##
## foreign_stmt -> FOREIGN WASM id_str COLON eols typ . option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON eols typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##
program: IMPORT FOREIGN WASM LIDENT COLON UIDENT WHEN
##
## Ends in an error in state: 890.
##
## foreign_stmt -> FOREIGN WASM id_str COLON typ . option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##

Expected an alias, like `as foo`, for the foreign value's name or the keyword `from` followed by a file path.

program: IMPORT FOREIGN WASM LIDENT COLON EOL WHILE
##
## Ends in an error in state: 898.
##
## foreign_stmt -> FOREIGN WASM id_str COLON eols . typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: IMPORT FOREIGN WASM LIDENT COLON WHILE
##
## Ends in an error in state: 889.
##
## foreign_stmt -> FOREIGN WASM id_str COLON . typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
## foreign_stmt -> FOREIGN WASM id_str COLON . eols typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str COLON
##

Expected a type for the foreign value.

program: IMPORT FOREIGN WASM LIDENT COLON UIDENT AS WHILE
##
## Ends in an error in state: 891.
##
## as_prefix(id_str) -> AS . id_str [ FROM ]
##
## The known suffix of the stack is as follows:
## AS
##

Expected an identifier to use as the alias.

program: IMPORT FOREIGN WASM LIDENT WHILE
##
## Ends in an error in state: 888.
##
## foreign_stmt -> FOREIGN WASM id_str . COLON typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
## foreign_stmt -> FOREIGN WASM id_str . COLON eols typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM id_str
##

Expected a type annotation for the foreign value.

program: IMPORT FOREIGN WASM WHILE
##
## Ends in an error in state: 887.
##
## foreign_stmt -> FOREIGN WASM . id_str COLON typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
## foreign_stmt -> FOREIGN WASM . id_str COLON eols typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN WASM
##

Expected an identifier for the foreign value.

program: IMPORT FOREIGN WHILE
##
## Ends in an error in state: 886.
##
## foreign_stmt -> FOREIGN . WASM id_str COLON typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
## foreign_stmt -> FOREIGN . WASM id_str COLON eols typ option(as_prefix(id_str)) FROM file_path [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## FOREIGN
##

Expected the keyword `wasm`.

program: IMPORT LBRACE UIDENT AS LIDENT WHILE
##
## Ends in an error in state: 911.
##
## import_ids -> lseparated_nonempty_list_inner(comma,aliasable(id)) . option(comma) [ RBRACE EOL ]
## lseparated_nonempty_list_inner(comma,aliasable(id)) -> lseparated_nonempty_list_inner(comma,aliasable(id)) . comma aliasable(id) [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,aliasable(id))
##

Expected a comma followed by more imports or `}` to complete the imports block.

program: IMPORT LBRACE UIDENT AS WHILE
##
## Ends in an error in state: 915.
##
## as_prefix(id) -> AS . id [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## AS
##

Expected an identifier to use as an alias.

program: IMPORT LBRACE UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 913.
##
## lseparated_nonempty_list_inner(comma,aliasable(id)) -> lseparated_nonempty_list_inner(comma,aliasable(id)) comma . aliasable(id) [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,aliasable(id)) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected an identifier to import or `}` to complete the imports block.

program: IMPORT LBRACE UIDENT EOL WHILE
##
## Ends in an error in state: 200.
##
## rbrace -> eols . RBRACE [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected `}` to complete the block.

program: IMPORT LBRACE UIDENT THICKARROW
##
## Ends in an error in state: 914.
##
## aliasable(id) -> id . option(as_prefix(id)) [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
##

Expected an alias like`as foo`, a comma followed by another identifier, or `}` to complete the block.

program: IMPORT LBRACE WHILE
##
## Ends in an error in state: 908.
##
## import_shape -> lbrace . option(import_ids) rbrace [ FROM COMMA ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a list of comma-separated identifiers.

program: IMPORT LPAREN WHILE
##
## Ends in an error in state: 132.
##
## id_str -> lparen . special_op rparen [ WHEN TYPE THICKARROW STAR SLASH SEMI RPAREN RECORD RCARET RBRACK RBRACE PIPE LPAREN LET LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 IMPORT GETS FROM EXPORT EQUAL EOL EOF ENUM ELSE DOT DASH COMMA COLON AT AS ]
##
## The known suffix of the stack is as follows:
## lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected an infix or prefix operator, e.g. `+`, `-`, `!`.

program: IMPORT STAR EXCEPT LBRACE UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 881.
##
## lseparated_nonempty_list_inner(comma,id) -> lseparated_nonempty_list_inner(comma,id) comma . id [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,id) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected an identifier or `}` to complete the block.

program: IMPORT STAR EXCEPT LBRACE UIDENT THICKARROW
##
## Ends in an error in state: 878.
##
## import_exception -> EXCEPT lbrace lseparated_nonempty_list_inner(comma,id) . option(comma) rbrace [ FROM COMMA ]
## lseparated_nonempty_list_inner(comma,id) -> lseparated_nonempty_list_inner(comma,id) . comma id [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## EXCEPT lbrace lseparated_nonempty_list_inner(comma,id)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 883, spurious reduction of production lseparated_nonempty_list_inner(comma,id) -> id
##

Expected a comma followed by an identifier or `}` to end the block.

program: IMPORT STAR EXCEPT LBRACE WHILE
##
## Ends in an error in state: 877.
##
## import_exception -> EXCEPT lbrace . lseparated_nonempty_list_inner(comma,id) option(comma) rbrace [ FROM COMMA ]
##
## The known suffix of the stack is as follows:
## EXCEPT lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a comma-separated list of identifiers to exclude from the import.

program: IMPORT STAR EXCEPT WHILE
##
## Ends in an error in state: 876.
##
## import_exception -> EXCEPT . lbrace lseparated_nonempty_list_inner(comma,id) option(comma) rbrace [ FROM COMMA ]
##
## The known suffix of the stack is as follows:
## EXCEPT
##

Expected `{` followed by a comma-separated list of identifiers to exclude from the import, followed by `}` to complete the block.

program: IMPORT STAR WHILE
##
## Ends in an error in state: 875.
##
## import_shape -> STAR . option(import_exception) [ FROM COMMA ]
##
## The known suffix of the stack is as follows:
## STAR
##

Expected the keyword `except` followed by comma-separated identifiers surrounded by `{`/`}`, a comma followed by a module name, or the keyword `from` followed by a file path.

program: IMPORT UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 907.
##
## lseparated_nonempty_list_inner(comma,import_shape) -> lseparated_nonempty_list_inner(comma,import_shape) comma . import_shape [ FROM COMMA ]
## option(comma) -> comma . [ FROM ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,import_shape) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another import or the `from` keyword followed by a file path.

program: IMPORT UIDENT THICKARROW
##
## Ends in an error in state: 903.
##
## import_stmt -> IMPORT lseparated_nonempty_list_inner(comma,import_shape) . option(comma) FROM file_path [ SEMI EOL EOF ]
## lseparated_nonempty_list_inner(comma,import_shape) -> lseparated_nonempty_list_inner(comma,import_shape) . comma import_shape [ FROM COMMA ]
##
## The known suffix of the stack is as follows:
## IMPORT lseparated_nonempty_list_inner(comma,import_shape)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 923, spurious reduction of production import_shape -> id
## In state 924, spurious reduction of production lseparated_nonempty_list_inner(comma,import_shape) -> import_shape
##

Expected a comma followed by a module identifier, `*`, a list of comma-separated identifiers surrounded by `{`/`}`, or the `from` keyword followed by a file path.

program: IMPORT WHILE
##
## Ends in an error in state: 874.
##
## import_stmt -> IMPORT . lseparated_nonempty_list_inner(comma,import_shape) option(comma) FROM file_path [ SEMI EOL EOF ]
## toplevel_stmt -> attributes IMPORT . foreign_stmt [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes IMPORT
##

Expected a module identifier, `*`, a list of comma-separated identifiers surrounded by `{`/`}`, or the `foreign` keyword.

program: LBRACE AT LIDENT RECORD
##
## Ends in an error in state: 347.
##
## let_expr -> attributes . LET REC value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes . LET value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes . LET REC MUT value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes . LET MUT value_binds [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## attributes
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 185, spurious reduction of production loption(attribute_arguments) ->
## In state 194, spurious reduction of production attribute -> AT id_str loption(attribute_arguments)
## In state 439, spurious reduction of production list(attribute) ->
## In state 440, spurious reduction of production list(attribute) -> attribute list(attribute)
## In state 343, spurious reduction of production attributes -> list(attribute)
##

Expected a let binding.

program: LBRACE BREAK RBRACE DOT EOL WHILE
##
## Ends in an error in state: 308.
##
## record_get -> braced_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> braced_expr DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LBRACE BREAK RBRACE DOT WHILE
##
## Ends in an error in state: 300.
##
## record_get -> braced_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> braced_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> braced_expr DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT
##

Expected a record field name.

program: LBRACE BREAK RBRACE LBRACK UNDERSCORE
##
## Ends in an error in state: 322.
##
## array_get -> braced_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> braced_expr lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: WASMI64 LBRACK WASMI64 RBRACK LBRACK WHEN
##
## Ends in an error in state: 295.
##
## array_get -> array_get lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> array_get lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##

Expected an array index expression.

program: LBRACE BREAK RBRACE LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 323.
##
## array_get -> braced_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> braced_expr lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `]` to complete the array index expression.

program: LBRACE BREAK RBRACE LPAREN COMMA EOL WHILE
##
## Ends in an error in state: 317.
##
## app_expr -> braced_expr lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
## In state 267, spurious reduction of production option(comma) -> comma
##
program: LBRACE BREAK RBRACE LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 320.
##
## app_expr -> braced_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##
program: LPAREN BREAK RPAREN LPAREN COMMA EOL WHILE
##
## Ends in an error in state: 483.
##
## app_expr -> paren_expr lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
## In state 267, spurious reduction of production option(comma) -> comma
##
program: LPAREN BREAK RPAREN LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 486.
##
## app_expr -> paren_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##

Expected `)` to complete the function call.

program: LBRACE BREAK RBRACE LPAREN UNDERSCORE
##
## Ends in an error in state: 316.
##
## app_expr -> braced_expr lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> braced_expr lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: LBRACE BREAK RBRACE LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 319.
##
## app_expr -> braced_expr lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## braced_expr lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##
program: LPAREN BREAK RPAREN LPAREN UNDERSCORE
##
## Ends in an error in state: 482.
##
## app_expr -> paren_expr lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> paren_expr lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a comma-separated list of expressions or an immediate `)` to complete the function call.

program: LBRACE LET REC WHILE
##
## Ends in an error in state: 351.
##
## let_expr -> attributes LET REC . value_binds [ SEMI RBRACE EOL ]
## let_expr -> attributes LET REC . MUT value_binds [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## attributes LET REC
##
program: LET REC WHILE
##
## Ends in an error in state: 867.
##
## toplevel_stmt -> attributes LET REC . value_binds [ SEMI EOL EOF ]
## toplevel_stmt -> attributes LET REC . MUT value_binds [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## attributes LET REC
##

Expected the keyword `mut` or a binding pattern, like an identifier.

program: LBRACE UIDENT COLON BREAK COMMA EOL UIDENT COLON BREAK WHILE
##
## Ends in an error in state: 337.
##
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) . comma punned_record_field [ RBRACE EOL COMMA ]
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) . comma non_punned_record_field [ RBRACE EOL COMMA ]
## record_exprs -> non_punned_record_field comma lseparated_nonempty_list_inner(comma,record_field) . option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## non_punned_record_field comma lseparated_nonempty_list_inner(comma,record_field)
##
program: LBRACE UIDENT COLON BREAK WHILE
##
## Ends in an error in state: 334.
##
## record_exprs -> non_punned_record_field . option(comma) [ RBRACE EOL ]
## record_exprs -> non_punned_record_field . comma lseparated_nonempty_list_inner(comma,record_field) option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## non_punned_record_field
##
program: LBRACE UIDENT COMMA EOL UIDENT COLON BREAK WHILE
##
## Ends in an error in state: 206.
##
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) . comma punned_record_field [ RBRACE EOL COMMA ]
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) . comma non_punned_record_field [ RBRACE EOL COMMA ]
## record_exprs -> punned_record_field comma lseparated_nonempty_list_inner(comma,record_field) . option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## punned_record_field comma lseparated_nonempty_list_inner(comma,record_field)
##

Expected a comma followed by more record fields or an immediate `}` to complete the record expression.

program: LBRACE UIDENT COLON BREAK COMMA EOL WHILE
##
## Ends in an error in state: 336.
##
## option(comma) -> comma . [ RBRACE EOL ]
## record_exprs -> non_punned_record_field comma . lseparated_nonempty_list_inner(comma,record_field) option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## non_punned_record_field comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: LBRACE UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 203.
##
## record_exprs -> punned_record_field comma . [ RBRACE EOL ]
## record_exprs -> punned_record_field comma . lseparated_nonempty_list_inner(comma,record_field) option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## punned_record_field comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: LBRACE UIDENT COMMA UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 208.
##
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) comma . punned_record_field [ RBRACE EOL COMMA ]
## lseparated_nonempty_list_inner(comma,record_field) -> lseparated_nonempty_list_inner(comma,record_field) comma . non_punned_record_field [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,record_field) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected more record fields or an immediate `}` to complete the record expression.

program: LBRACE UIDENT COMMA UIDENT THICKARROW
##
## Ends in an error in state: 211.
##
## non_punned_record_field -> id . COLON expr [ RBRACE EOL COMMA ]
## non_punned_record_field -> id . COLON eols expr [ RBRACE EOL COMMA ]
## punned_record_field -> id . [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
##

Expected a colon followed by an expression, a comma followed by more record fields, or an immediate `}` to complete the record.

program: LBRACE UIDENT THICKARROW
##
## Ends in an error in state: 339.
##
## block_body -> lseparated_nonempty_list_inner(eos,block_body_expr) . [ RBRACE EOL ]
## block_body -> lseparated_nonempty_list_inner(eos,block_body_expr) . eos [ RBRACE EOL ]
## lseparated_nonempty_list_inner(eos,block_body_expr) -> lseparated_nonempty_list_inner(eos,block_body_expr) . eos block_body_expr [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(eos,block_body_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 442, spurious reduction of production id_expr -> id
## In state 215, spurious reduction of production simple_expr -> id_expr
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 345, spurious reduction of production block_body_expr -> expr
## In state 443, spurious reduction of production lseparated_nonempty_list_inner(eos,block_body_expr) -> block_body_expr
##

Expected a newline character followed by more statements or `}` to complete the block.

program: LBRACE UNDERSCORE
##
## Ends in an error in state: 183.
##
## braced_expr -> lbrace . block_body rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## braced_expr -> lbrace . record_exprs rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected an expression or a record field.

program: LBRACE WASMI64 SEMI RECORD
##
## Ends in an error in state: 342.
##
## block_body -> lseparated_nonempty_list_inner(eos,block_body_expr) eos . [ RBRACE EOL ]
## lseparated_nonempty_list_inner(eos,block_body_expr) -> lseparated_nonempty_list_inner(eos,block_body_expr) eos . block_body_expr [ SEMI RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(eos,block_body_expr) eos
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 340, spurious reduction of production eos -> SEMI
##

Expected another statement or `}` to complete the block.

program: LBRACK UNDERSCORE
##
## Ends in an error in state: 181.
##
## list_expr -> lbrack . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## list_expr -> lbrack . lseparated_nonempty_list_inner(comma,list_item) option(comma) rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##

Expected a comma-separated list of expressions or `]` to complete the list expression.

program: LBRACK WASMI64 COMMA EOL UNDERSCORE
##
## Ends in an error in state: 451.
##
## lseparated_nonempty_list_inner(comma,list_item) -> lseparated_nonempty_list_inner(comma,list_item) comma . list_item [ RBRACK EOL COMMA ]
## option(comma) -> comma . [ RBRACK EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,list_item) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected an expression,  `...` followed by an expression, or `]` to complete the list expression.

program: LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 448.
##
## list_expr -> lbrack lseparated_nonempty_list_inner(comma,list_item) . option(comma) rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,list_item) -> lseparated_nonempty_list_inner(comma,list_item) . comma list_item [ RBRACK EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrack lseparated_nonempty_list_inner(comma,list_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 453, spurious reduction of production list_item -> expr
## In state 454, spurious reduction of production lseparated_nonempty_list_inner(comma,list_item) -> list_item
##

Expected a comma followed by an expression, `...` followed by an expression, or `]` to complete the list expression.

program: LBRACKRCARET UNDERSCORE
##
## Ends in an error in state: 173.
##
## array_expr -> lbrackrcaret . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## array_expr -> lbrackrcaret . lseparated_nonempty_list_inner(comma,expr) option(comma) rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## array_expr -> lbrackrcaret . eols lseparated_nonempty_list_inner(comma,expr) option(comma) rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lbrackrcaret
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production lbrackrcaret -> LBRACKRCARET
##

Expected a comma-separated list of expressions or `]` to complete the array expression.

program: LBRACKRCARET WASMI64 COMMA EOL UNDERSCORE
##
## Ends in an error in state: 171.
##
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) comma . expr [ RPAREN RBRACK EOL COMMA ]
## option(comma) -> comma . [ RPAREN RBRACK EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,expr) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected an expression or `]` to complete the array expression.

program: LBRACKRCARET WASMI64 COMMA RPAREN
##
## Ends in an error in state: 177.
##
## array_expr -> lbrackrcaret lseparated_nonempty_list_inner(comma,expr) option(comma) . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lbrackrcaret lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##

Expected `]` to complete the array expression.

program: LBRACKRCARET WASMI64 EOL WHILE
##
## Ends in an error in state: 179.
##
## rbrack -> eols . RBRACK [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected `]` to complete the array expression.

program: LBRACKRCARET WASMI64 THICKARROW
##
## Ends in an error in state: 176.
##
## array_expr -> lbrackrcaret lseparated_nonempty_list_inner(comma,expr) . option(comma) rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RBRACK EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrackrcaret lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##

Expected a comma followed by an expression or `]` to complete the array expression.

program: LET DASH WHILE
##
## Ends in an error in state: 370.
##
## const -> option(DASH) . NUMBER_INT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . NUMBER_FLOAT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . INT32 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . INT64 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . FLOAT32 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . FLOAT64 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . WASMI32 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . WASMI64 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . WASMF32 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . WASMF64 [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## const -> option(DASH) . BIGINT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> option(DASH) . NUMBER_INT SLASH option(DASH) NUMBER_INT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## option(DASH)
##
program: LET NUMBER_INT SLASH DASH WHILE
##
## Ends in an error in state: 373.
##
## pattern -> option(DASH) NUMBER_INT SLASH option(DASH) . NUMBER_INT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## option(DASH) NUMBER_INT SLASH option(DASH)
##

Expected a number.

program: LET LBRACE UIDENT COLON EOL WASMI64 WHILE
##
## Ends in an error in state: 413.
##
## pattern -> pattern . COLON typ [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RBRACE PIPE EOL COMMA COLON AS ]
## record_pattern -> id COLON eols pattern . [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON eols pattern
##
program: LET LBRACE UIDENT COLON WASMI64 WHILE
##
## Ends in an error in state: 411.
##
## pattern -> pattern . COLON typ [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RBRACE PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RBRACE PIPE EOL COMMA COLON AS ]
## record_pattern -> id COLON pattern . [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON pattern
##

Expected a type annotation, a comma followed by more record field patterns, or `}` to complete the record pattern.

program: LET LBRACE UIDENT COLON EOL WHILE
##
## Ends in an error in state: 412.
##
## record_pattern -> id COLON eols . pattern [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LET LBRACE UIDENT COLON WHILE
##
## Ends in an error in state: 410.
##
## record_pattern -> id COLON . pattern [ RBRACE EOL COMMA ]
## record_pattern -> id COLON . eols pattern [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id COLON
##
program: LET LPAREN WHILE
##
## Ends in an error in state: 375.
##
## pattern -> lparen . special_op rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> lparen . tuple_patterns rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> lparen . pattern rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: LET LBRACK ELLIPSIS WHILE
##
## Ends in an error in state: 398.
##
## list_item_pat -> ELLIPSIS . pattern [ RBRACK EOL COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##
program: LET LPAREN WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 423.
##
## tuple_patterns -> pattern COMMA eols . lseparated_nonempty_list_inner(comma,pattern) [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA eols . lseparated_nonempty_list_inner(comma,pattern) comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LET NUMBER_INT PIPE WHILE
##
## Ends in an error in state: 364.
##
## pattern -> pattern PIPE . pattern [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> pattern PIPE . eols pattern [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern PIPE
##
program: LET NUMBER_INT PIPE EOL WHILE
##
## Ends in an error in state: 427.
##
## pattern -> pattern PIPE eols . pattern [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern PIPE eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected a pattern.

program: LET LBRACE UIDENT THICKARROW
##
## Ends in an error in state: 409.
##
## record_pattern -> id . COLON pattern [ RBRACE EOL COMMA ]
## record_pattern -> id . COLON eols pattern [ RBRACE EOL COMMA ]
## record_pattern -> id . [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## id
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production id -> lseparated_nonempty_list_inner(dot,type_id_str)
##

Expected `:` followed by a pattern, a comma followed by another record field pattern, or `}` to complete the record pattern.

program: LET LBRACE UNDERSCORE COMMA EOL WHILE
##
## Ends in an error in state: 407.
##
## lseparated_nonempty_list_inner(comma,record_pattern) -> lseparated_nonempty_list_inner(comma,record_pattern) comma . record_pattern [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,record_pattern) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another record field pattern or `}` to complete the record pattern.

program: LET LBRACE UNDERSCORE WHILE
##
## Ends in an error in state: 405.
##
## lseparated_nonempty_list_inner(comma,record_pattern) -> lseparated_nonempty_list_inner(comma,record_pattern) . comma record_pattern [ RBRACE EOL COMMA ]
## record_patterns -> lseparated_nonempty_list_inner(comma,record_pattern) . option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,record_pattern)
##

Expected a comma followed by more record field patterns or `}` to complete the record pattern.

program: LET LBRACE WHILE
##
## Ends in an error in state: 400.
##
## pattern -> lbrace . record_patterns rbrace [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a comma-separated list of record field patterns.

program: LET LBRACK ELLIPSIS WASMI64 WHILE
##
## Ends in an error in state: 399.
##
## list_item_pat -> ELLIPSIS pattern . [ RBRACK EOL COMMA ]
## pattern -> pattern . COLON typ [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RBRACK PIPE EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS pattern
##

Expected a type annotation, a comma followed by more patterns, or `]` to complete the list pattern.

program: LET LBRACK WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 420.
##
## lseparated_nonempty_list_inner(comma,list_item_pat) -> lseparated_nonempty_list_inner(comma,list_item_pat) comma . list_item_pat [ RBRACK EOL COMMA ]
## option(comma) -> comma . [ RBRACK EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,list_item_pat) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected a pattern, `...` followed by a pattern, or `]` to complete the list pattern.

program: LET LBRACK WASMI64 WHILE
##
## Ends in an error in state: 416.
##
## list_item_pat -> pattern . [ RBRACK EOL COMMA ]
## pattern -> pattern . COLON typ [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RBRACK PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RBRACK PIPE EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expected a type annotation, a comma followed by another pattern, or `]` to complete the list pattern.

program: LET LBRACK WHILE
##
## Ends in an error in state: 397.
##
## pattern -> lbrack . rbrack [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> lbrack . lseparated_nonempty_list_inner(comma,list_item_pat) option(comma) rbrack [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##

Expected a comma-separated list of patterns or `]` to complete the list pattern.

program: LET LBRACKRCARET WASMI64 RPAREN
##
## Ends in an error in state: 392.
##
## pattern -> lbrackrcaret patterns . rbrack [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lbrackrcaret patterns
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 363, spurious reduction of production lseparated_nonempty_list_inner(comma,pattern) -> pattern
## In state 394, spurious reduction of production option(comma) ->
## In state 395, spurious reduction of production patterns -> lseparated_nonempty_list_inner(comma,pattern) option(comma)
##

Expected `]` to complete the array pattern.

program: LET LBRACKRCARET WHILE
##
## Ends in an error in state: 390.
##
## pattern -> lbrackrcaret . patterns rbrack [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> lbrackrcaret . rbrack [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lbrackrcaret
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production lbrackrcaret -> LBRACKRCARET
##

Expected a comma-separated list of patterns or `]` to complete the array pattern.

program: LET LPAREN STAR WHILE
##
## Ends in an error in state: 379.
##
## pattern -> lparen special_op . rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lparen special_op
##

Expected `)` to complete the pattern.

program: LET LPAREN WASMI64 COMMA EOL WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 425.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) comma . pattern [ RPAREN EOL COMMA ]
## tuple_patterns -> pattern COMMA eols lseparated_nonempty_list_inner(comma,pattern) comma . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA eols lseparated_nonempty_list_inner(comma,pattern) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected a pattern or `)` to complete the tuple pattern.

program: LET LPAREN WASMI64 COMMA EOL WASMI64 RBRACK
##
## Ends in an error in state: 424.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) . comma pattern [ RPAREN EOL COMMA ]
## tuple_patterns -> pattern COMMA eols lseparated_nonempty_list_inner(comma,pattern) . [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA eols lseparated_nonempty_list_inner(comma,pattern) . comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA eols lseparated_nonempty_list_inner(comma,pattern)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 363, spurious reduction of production lseparated_nonempty_list_inner(comma,pattern) -> pattern
##

Expected a comma followed by another pattern or `)` to complete the tuple pattern.

program: LET LPAREN WASMI64 COMMA WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 384.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) comma . pattern [ RPAREN EOL COMMA ]
## tuple_patterns -> pattern COMMA lseparated_nonempty_list_inner(comma,pattern) comma . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA lseparated_nonempty_list_inner(comma,pattern) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another pattern or `)` to complete the tuple pattern.

program: LET LPAREN WASMI64 COMMA WASMI64 RBRACK
##
## Ends in an error in state: 383.
##
## lseparated_nonempty_list_inner(comma,pattern) -> lseparated_nonempty_list_inner(comma,pattern) . comma pattern [ RPAREN EOL COMMA ]
## tuple_patterns -> pattern COMMA lseparated_nonempty_list_inner(comma,pattern) . [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA lseparated_nonempty_list_inner(comma,pattern) . comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA lseparated_nonempty_list_inner(comma,pattern)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 363, spurious reduction of production lseparated_nonempty_list_inner(comma,pattern) -> pattern
##

Expected a comma followed by another pattern or `)` to complete the tuple pattern.

program: LET LPAREN WASMI64 COMMA WHILE
##
## Ends in an error in state: 382.
##
## tuple_patterns -> pattern COMMA . [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA . lseparated_nonempty_list_inner(comma,pattern) [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA . lseparated_nonempty_list_inner(comma,pattern) comma [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA . eols lseparated_nonempty_list_inner(comma,pattern) [ RPAREN EOL ]
## tuple_patterns -> pattern COMMA . eols lseparated_nonempty_list_inner(comma,pattern) comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Expected a pattern or an immediate `)` for a single-argument tuple pattern.

program: LET LPAREN WASMI64 WHILE
##
## Ends in an error in state: 381.
##
## pattern -> pattern . COLON typ [ RPAREN PIPE EOL COMMA COLON AS ]
## pattern -> pattern . COLON eols typ [ RPAREN PIPE EOL COMMA COLON AS ]
## pattern -> lparen pattern . rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
## pattern -> pattern . PIPE pattern [ RPAREN PIPE EOL COMMA COLON AS ]
## pattern -> pattern . PIPE eols pattern [ RPAREN PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS id_str [ RPAREN PIPE EOL COMMA COLON AS ]
## pattern -> pattern . AS eols id_str [ RPAREN PIPE EOL COMMA COLON AS ]
## tuple_patterns -> pattern . COMMA [ RPAREN EOL ]
## tuple_patterns -> pattern . COMMA lseparated_nonempty_list_inner(comma,pattern) [ RPAREN EOL ]
## tuple_patterns -> pattern . COMMA lseparated_nonempty_list_inner(comma,pattern) comma [ RPAREN EOL ]
## tuple_patterns -> pattern . COMMA eols lseparated_nonempty_list_inner(comma,pattern) [ RPAREN EOL ]
## tuple_patterns -> pattern . COMMA eols lseparated_nonempty_list_inner(comma,pattern) comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## lparen pattern
##

Expected a type annotation, `)` for a grouped pattern, or a comma for a tuple pattern.

program: LET NUMBER_INT SLASH WHILE
##
## Ends in an error in state: 372.
##
## pattern -> option(DASH) NUMBER_INT SLASH . option(DASH) NUMBER_INT [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## option(DASH) NUMBER_INT SLASH
##

Expected a number or a minus sign followed by a number.

program: LET NUMBER_INT WHILE
##
## Ends in an error in state: 429.
##
## pattern -> pattern . COLON typ [ PIPE EQUAL COLON AS ]
## pattern -> pattern . COLON eols typ [ PIPE EQUAL COLON AS ]
## pattern -> pattern . PIPE pattern [ PIPE EQUAL COLON AS ]
## pattern -> pattern . PIPE eols pattern [ PIPE EQUAL COLON AS ]
## pattern -> pattern . AS id_str [ PIPE EQUAL COLON AS ]
## pattern -> pattern . AS eols id_str [ PIPE EQUAL COLON AS ]
## value_bind -> pattern . equal expr [ SEMI RBRACE EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 371, spurious reduction of production const -> option(DASH) NUMBER_INT
## In state 414, spurious reduction of production pattern -> const
##

Expected a type annotation or `=`.

program: LET UIDENT DOT EOL WHILE
##
## Ends in an error in state: 92.
##
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT eols . type_id_str [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ARROW ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(dot,type_id_str) DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LET UIDENT DOT WHILE
##
## Ends in an error in state: 90.
##
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . type_id_str [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ARROW ]
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . eols type_id_str [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ARROW ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(dot,type_id_str) DOT
##

Expected a capitalized identifier.

program: LET UIDENT LPAREN WASMI64 RBRACK
##
## Ends in an error in state: 361.
##
## pattern -> type_id lparen patterns . rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## type_id lparen patterns
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 363, spurious reduction of production lseparated_nonempty_list_inner(comma,pattern) -> pattern
## In state 394, spurious reduction of production option(comma) ->
## In state 395, spurious reduction of production patterns -> lseparated_nonempty_list_inner(comma,pattern) option(comma)
##

Expected `)` to complete the variant pattern.

program: LET UIDENT LPAREN WHILE
##
## Ends in an error in state: 359.
##
## pattern -> type_id lparen . patterns rparen [ WHEN THICKARROW RPAREN RBRACK RBRACE PIPE EQUAL EOL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## type_id lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a comma-separated list of patterns.

program: LET WASMI64 EQUAL WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 433.
##
## lseparated_nonempty_list_inner(comma,value_bind) -> lseparated_nonempty_list_inner(comma,value_bind) comma . value_bind [ SEMI RBRACE EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,value_bind) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected a binding, e.g. `foo = 5`.

program: LPAREN BREAK RPAREN DOT EOL WHILE
##
## Ends in an error in state: 600.
##
## record_get -> paren_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> paren_expr DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LPAREN BREAK RPAREN DOT WHILE
##
## Ends in an error in state: 592.
##
## record_get -> paren_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> paren_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> paren_expr DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT
##

Expected a record field identifier.

program: LPAREN BREAK RPAREN LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 609.
##
## array_get -> paren_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> paren_expr lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `]` to complete the array access expression.

program: LPAREN BREAK RPAREN LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 485.
##
## app_expr -> paren_expr lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## paren_expr lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##

Expected a comma followed by an expression or `)` to complete the function call.

program: LPAREN DASH WHILE
##
## Ends in an error in state: 376.
##
## option(DASH) -> DASH . [ WASMI64 WASMI32 WASMF64 WASMF32 NUMBER_INT NUMBER_FLOAT INT64 INT32 FLOAT64 FLOAT32 BIGINT ]
## special_op -> DASH . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## DASH
##

Expected a number to create a negative number or `)` to reference the minus function.

program: LPAREN PREFIX_150 WHEN
##
## Ends in an error in state: 158.
##
## prim1_expr -> PREFIX_150 . non_assign_expr [ STAR SLASH RPAREN RCARET PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL DASH COMMA COLON ]
## special_op -> PREFIX_150 . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## PREFIX_150
##

Expected an expression or `)` to reference the `!` operator.

program: LPAREN RCARET RCARET WHILE
##
## Ends in an error in state: 153.
##
## lnonempty_list_inner(RCARET) -> lnonempty_list_inner(RCARET) RCARET . [ RCARET ]
## special_op -> lnonempty_list_inner(RCARET) RCARET . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## lnonempty_list_inner(RCARET) RCARET
##

Expected `)` to complete infix or prefix operator reference.

program: LPAREN WASMI64 COMMA BREAK COMMA RBRACK
##
## Ends in an error in state: 517.
##
## simple_expr -> lparen tuple_exprs . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## lparen tuple_exprs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
## In state 522, spurious reduction of production tuple_exprs -> expr COMMA lseparated_nonempty_list_inner(comma,expr) option(comma)
##

Expected `)` to complete the tuple expression.

program: LPAREN WASMI64 COMMA EOL WASMI64 THICKARROW
##
## Ends in an error in state: 524.
##
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
## tuple_exprs -> expr COMMA eols lseparated_nonempty_list_inner(comma,expr) . option(comma) [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## expr COMMA eols lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##
program: LPAREN WASMI64 COMMA WASMI64 THICKARROW
##
## Ends in an error in state: 521.
##
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
## tuple_exprs -> expr COMMA lseparated_nonempty_list_inner(comma,expr) . option(comma) [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## expr COMMA lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##

Expected a comma followed by an expression or `)` to complete the tuple expression.

program: LPAREN WASMI64 COMMA WHEN
##
## Ends in an error in state: 520.
##
## tuple_exprs -> expr COMMA . [ RPAREN EOL ]
## tuple_exprs -> expr COMMA . lseparated_nonempty_list_inner(comma,expr) option(comma) [ RPAREN EOL ]
## tuple_exprs -> expr COMMA . eols lseparated_nonempty_list_inner(comma,expr) option(comma) [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Expected an expression or `)` for a single-argument tuple.

program: LPAREN WASMI64 EOL WHILE
##
## Ends in an error in state: 113.
##
## rparen -> eols . RPAREN [ WHILE WHEN WASMI64 WASMI32 WASMF64 WASMF32 VOID UIDENT TYPE TRUE THROW THICKARROW STRING STAR SLASH SEMI RPAREN RECORD RCARET RBRACK RBRACE PREFIX_150 PIPE NUMBER_INT NUMBER_FLOAT MATCH LPAREN LIDENT LET LCARET LBRACKRCARET LBRACK LBRACE INT64 INT32 INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 IMPORT IF GETS FUN FROM FOR FLOAT64 FLOAT32 FALSE FAIL EXPORT EQUAL EOL EOF ENUM ELSE DOT DASH CONTINUE COMMA COLON CHAR BREAK BIGINT AT ASSERT AS ARROW ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected `)`.

program: LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 519.
##
## paren_expr -> lparen expr . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## tuple_exprs -> expr . COMMA [ RPAREN EOL ]
## tuple_exprs -> expr . COMMA lseparated_nonempty_list_inner(comma,expr) option(comma) [ RPAREN EOL ]
## tuple_exprs -> expr . COMMA eols lseparated_nonempty_list_inner(comma,expr) option(comma) [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## lparen expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `)` for a grouped expression or a comma for a tuple expression.

program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 THICKARROW CONTINUE WHILE
##
## Ends in an error in state: 783.
##
## lseparated_nonempty_list_inner(comma,match_branch) -> lseparated_nonempty_list_inner(comma,match_branch) . comma match_branch [ RBRACE EOL COMMA ]
## match_branches -> lseparated_nonempty_list_inner(comma,match_branch) . option(comma) [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,match_branch)
##

Expected a comma followed by another match branch or `}` to complete the match expression.

program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 THICKARROW WASMI64 COMMA EOL WHILE
##
## Ends in an error in state: 785.
##
## lseparated_nonempty_list_inner(comma,match_branch) -> lseparated_nonempty_list_inner(comma,match_branch) comma . match_branch [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,match_branch) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another match branch or `}` to complete the match expression.

program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 WHEN VOID EOF
##
## Ends in an error in state: 772.
##
## match_branch -> pattern when_guard . thickarrow expr [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## pattern when_guard
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 771, spurious reduction of production when_guard -> WHEN expr
##

Expected `=>` followed by an expression.

program: MATCH LPAREN WASMI64 RPAREN LBRACE WASMI64 WHILE
##
## Ends in an error in state: 769.
##
## match_branch -> pattern . thickarrow expr [ RBRACE EOL COMMA ]
## match_branch -> pattern . when_guard thickarrow expr [ RBRACE EOL COMMA ]
## pattern -> pattern . COLON typ [ WHEN THICKARROW PIPE EOL COLON AS ]
## pattern -> pattern . COLON eols typ [ WHEN THICKARROW PIPE EOL COLON AS ]
## pattern -> pattern . PIPE pattern [ WHEN THICKARROW PIPE EOL COLON AS ]
## pattern -> pattern . PIPE eols pattern [ WHEN THICKARROW PIPE EOL COLON AS ]
## pattern -> pattern . AS id_str [ WHEN THICKARROW PIPE EOL COLON AS ]
## pattern -> pattern . AS eols id_str [ WHEN THICKARROW PIPE EOL COLON AS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expected a type annotation, the keyword `when` followed by a guard expression, or `=>` followed by an expression.

program: MATCH LPAREN WASMI64 RPAREN LBRACE WHILE
##
## Ends in an error in state: 768.
##
## match_expr -> MATCH lparen expr rparen lbrace . match_branches rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MATCH lparen expr rparen lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a pattern.

program: MATCH LPAREN WASMI64 RPAREN WHILE
##
## Ends in an error in state: 767.
##
## match_expr -> MATCH lparen expr rparen . lbrace match_branches rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MATCH lparen expr rparen
##

Expected `{` to start the body of the match statement.

program: MATCH LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 766.
##
## match_expr -> MATCH lparen expr . rparen lbrace match_branches rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MATCH lparen expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `)` after the match value.

program: MATCH WHILE
##
## Ends in an error in state: 14.
##
## match_expr -> MATCH . lparen expr rparen lbrace match_branches rbrace [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MATCH
##

Expected `(` after the `match` keyword.

program: PREFIX_150 LBRACE BREAK RBRACE DOT EOL WHILE
##
## Ends in an error in state: 496.
##
## record_get -> braced_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 LBRACE BREAK RBRACE DOT WHILE
##
## Ends in an error in state: 494.
##
## record_get -> braced_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> braced_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT
##
program: PREFIX_150 LPAREN BREAK RPAREN DOT EOL WHILE
##
## Ends in an error in state: 480.
##
## record_get -> paren_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 LPAREN BREAK RPAREN DOT WHILE
##
## Ends in an error in state: 478.
##
## record_get -> paren_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> paren_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT
##
program: PREFIX_150 WASMI64 DOT EOL WHILE
##
## Ends in an error in state: 163.
##
## record_get -> simple_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 WASMI64 DOT LIDENT DOT EOL WHILE
##
## Ends in an error in state: 466.
##
## record_get -> record_get DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 WASMI64 DOT LIDENT DOT WHILE
##
## Ends in an error in state: 464.
##
## record_get -> record_get DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> record_get DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT
##
program: PREFIX_150 WASMI64 DOT WHILE
##
## Ends in an error in state: 160.
##
## record_get -> simple_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> simple_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT
##
program: PREFIX_150 WASMI64 LPAREN RPAREN DOT EOL WHILE
##
## Ends in an error in state: 512.
##
## record_get -> app_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 WASMI64 LPAREN RPAREN DOT WHILE
##
## Ends in an error in state: 510.
##
## record_get -> app_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> app_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT
##
program: WASMI64 DOT EOL WHILE
##
## Ends in an error in state: 648.
##
## record_get -> simple_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> simple_expr DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 DOT LIDENT DOT EOL WHILE
##
## Ends in an error in state: 624.
##
## record_get -> record_get DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> record_get DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 DOT LIDENT DOT WHILE
##
## Ends in an error in state: 616.
##
## record_get -> record_get DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> record_get DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> record_get DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT
##
program: WASMI64 DOT WHILE
##
## Ends in an error in state: 640.
##
## record_get -> simple_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> simple_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> simple_expr DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT
##
program: WASMI64 LPAREN RPAREN DOT EOL WHILE
##
## Ends in an error in state: 252.
##
## record_get -> app_expr DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> app_expr DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 LPAREN RPAREN DOT WHILE
##
## Ends in an error in state: 244.
##
## record_get -> app_expr DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> app_expr DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> app_expr DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT
##
program: PREFIX_150 WASMI64 LBRACK WASMI64 RBRACK DOT EOL WHILE
##
## Ends in an error in state: 504.
##
## record_get -> array_get DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: PREFIX_150 WASMI64 LBRACK WASMI64 RBRACK DOT WHILE
##
## Ends in an error in state: 502.
##
## record_get -> array_get DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> array_get DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT
##
program: WASMI64 LBRACK WASMI64 RBRACK DOT EOL WHILE
##
## Ends in an error in state: 281.
##
## record_get -> array_get DOT eols . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> array_get DOT eols . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT eols . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT eols . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 LBRACK WASMI64 RBRACK DOT WHILE
##
## Ends in an error in state: 273.
##
## record_get -> array_get DOT . simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_get -> array_get DOT . eols simple_id [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## record_set -> array_get DOT . simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT . eols simple_id equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT . simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT . simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT . eols simple_id assign_binop_op expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT . eols simple_id assign_binop_op eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT
##

Expected a record field identifier.

program: PREFIX_150 LBRACE BREAK RBRACE LBRACK UNDERSCORE
##
## Ends in an error in state: 498.
##
## array_get -> braced_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: PREFIX_150 LPAREN BREAK RPAREN LBRACK UNDERSCORE
##
## Ends in an error in state: 488.
##
## array_get -> paren_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: PREFIX_150 WASMI64 DOT LIDENT LBRACK UNDERSCORE
##
## Ends in an error in state: 474.
##
## array_get -> record_get lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: PREFIX_150 WASMI64 LBRACK UNDERSCORE
##
## Ends in an error in state: 460.
##
## array_get -> simple_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: WASMI64 DOT LIDENT LBRACK UNDERSCORE
##
## Ends in an error in state: 632.
##
## array_get -> record_get lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> record_get lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: WASMI64 LPAREN RPAREN LBRACK UNDERSCORE
##
## Ends in an error in state: 268.
##
## array_get -> app_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> app_expr lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: PREFIX_150 WASMI64 LBRACK WASMI64 RBRACK LBRACK WHEN
##
## Ends in an error in state: 506.
##
## array_get -> array_get lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##

Expected an array index expression.

program: PREFIX_150 LBRACE BREAK RBRACE LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 499.
##
## array_get -> braced_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: PREFIX_150 LPAREN BREAK RPAREN LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 489.
##
## array_get -> paren_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: PREFIX_150 WASMI64 DOT LIDENT LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 475.
##
## array_get -> record_get lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: PREFIX_150 WASMI64 LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 461.
##
## array_get -> simple_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: PREFIX_150 WASMI64 LPAREN RPAREN LBRACK UNDERSCORE
##
## Ends in an error in state: 514.
##
## array_get -> app_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: PREFIX_150 WASMI64 LPAREN RPAREN LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 515.
##
## array_get -> app_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: WASMI64 DOT LIDENT LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 633.
##
## array_get -> record_get lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> record_get lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: WASMI64 LBRACK UNDERSCORE
##
## Ends in an error in state: 656.
##
## array_get -> simple_expr lbrack . expr rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> simple_expr lbrack . expr rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lbrack
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production lbrack -> LBRACK
##
program: WASMI64 LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 657.
##
## array_get -> simple_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> simple_expr lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: WASMI64 LPAREN RPAREN LBRACK WASMI64 THICKARROW
##
## Ends in an error in state: 269.
##
## array_get -> app_expr lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> app_expr lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: PREFIX_150 WASMI64 LBRACK WASMI64 RBRACK LBRACK WASMI64 WHILE
##
## Ends in an error in state: 507.
##
## array_get -> array_get lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##
program: WASMI64 LBRACK WASMI64 RBRACK LBRACK WASMI64 WHILE
##
## Ends in an error in state: 296.
##
## array_get -> array_get lbrack expr . rbrack [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## array_set -> array_get lbrack expr . rbrack equal expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lbrack expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `]` to complete the array index expression.

program: PRIMITIVE LIDENT COLON EOL UIDENT EQUAL WHILE
##
## Ends in an error in state: 809.
##
## primitive_stmt -> PRIMITIVE id_str COLON eols typ equal . STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON eols typ equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: PRIMITIVE LIDENT COLON UIDENT EQUAL WHILE
##
## Ends in an error in state: 805.
##
## primitive_stmt -> PRIMITIVE id_str COLON typ equal . STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON typ equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: PRIMITIVE THROW COLON EOL UIDENT EQUAL WHILE
##
## Ends in an error in state: 800.
##
## primitive_stmt -> PRIMITIVE prim COLON eols typ equal . STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON eols typ equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: PRIMITIVE THROW COLON UIDENT EQUAL WHILE
##
## Ends in an error in state: 796.
##
## primitive_stmt -> PRIMITIVE prim COLON typ equal . STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON typ equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##

Expected a string declaring the primitive's internal name.

program: PRIMITIVE LIDENT COLON EOL UIDENT WHEN
##
## Ends in an error in state: 808.
##
## primitive_stmt -> PRIMITIVE id_str COLON eols typ . equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON eols typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##
program: PRIMITIVE LIDENT COLON UIDENT WHEN
##
## Ends in an error in state: 804.
##
## primitive_stmt -> PRIMITIVE id_str COLON typ . equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str COLON typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##
program: PRIMITIVE THROW COLON EOL UIDENT WHEN
##
## Ends in an error in state: 799.
##
## primitive_stmt -> PRIMITIVE prim COLON eols typ . equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON eols typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##
program: PRIMITIVE THROW COLON UIDENT WHEN
##
## Ends in an error in state: 795.
##
## primitive_stmt -> PRIMITIVE prim COLON typ . equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim COLON typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##

Expected `=` followed by a string declaring the primitive's internal name.

program: PRIMITIVE LIDENT WHILE
##
## Ends in an error in state: 802.
##
## primitive_stmt -> PRIMITIVE id_str . COLON typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE id_str . COLON eols typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE id_str
##
program: PRIMITIVE THROW WHILE
##
## Ends in an error in state: 793.
##
## primitive_stmt -> PRIMITIVE prim . COLON typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE prim . COLON eols typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE prim
##

Expected a type annotation—a colon followed by a type.

program: PRIMITIVE WHILE
##
## Ends in an error in state: 791.
##
## primitive_stmt -> PRIMITIVE . id_str COLON typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE . id_str COLON eols typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE . prim COLON typ equal STRING [ SEMI EOL EOF ]
## primitive_stmt -> PRIMITIVE . prim COLON eols typ equal STRING [ SEMI EOL EOF ]
##
## The known suffix of the stack is as follows:
## PRIMITIVE
##

Expected an identifier for the primitive.

program: RECORD UIDENT LBRACE LIDENT COLON LIDENT COMMA EOL WHILE
##
## Ends in an error in state: 862.
##
## lseparated_nonempty_list_inner(comma,data_label) -> lseparated_nonempty_list_inner(comma,data_label) comma . data_label [ RBRACE EOL COMMA ]
## option(comma) -> comma . [ RBRACE EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,data_label) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another record field definition or an immediate `}` to complete the record declaration.

program: RECORD UIDENT LBRACE LIDENT COLON LIDENT WHILE
##
## Ends in an error in state: 859.
##
## data_labels -> lbrace lseparated_nonempty_list_inner(comma,data_label) . option(comma) rbrace [ SEMI EOL EOF COMMA ]
## lseparated_nonempty_list_inner(comma,data_label) -> lseparated_nonempty_list_inner(comma,data_label) . comma data_label [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lbrace lseparated_nonempty_list_inner(comma,data_label)
##

Expected a comma followed by another record field definition or an immediate `}` to complete the record declaration.

program: RECORD UIDENT LBRACE LIDENT WHILE
##
## Ends in an error in state: 854.
##
## data_label -> simple_id . COLON typ [ RBRACE EOL COMMA ]
## data_label -> simple_id . COLON eols typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## simple_id
##
program: RECORD UIDENT LBRACE MUT LIDENT WHILE
##
## Ends in an error in state: 849.
##
## data_label -> MUT simple_id . COLON typ [ RBRACE EOL COMMA ]
## data_label -> MUT simple_id . COLON eols typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## MUT simple_id
##

Expected `:` followed by a type.

program: RECORD UIDENT LBRACE MUT LIDENT COLON EOL WHILE
##
## Ends in an error in state: 852.
##
## data_label -> MUT simple_id COLON eols . typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## MUT simple_id COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: RECORD UIDENT LBRACE MUT LIDENT COLON WHILE
##
## Ends in an error in state: 850.
##
## data_label -> MUT simple_id COLON . typ [ RBRACE EOL COMMA ]
## data_label -> MUT simple_id COLON . eols typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## MUT simple_id COLON
##
program: WASMI64 COLON LPAREN WHILE
##
## Ends in an error in state: 100.
##
## typ -> lparen . tuple_typs rparen [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
## typ -> lparen . typ rparen [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: TYPE UIDENT EQUAL WHILE
##
## Ends in an error in state: 833.
##
## data_declaration -> TYPE UIDENT option(id_vec) equal . typ [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE UIDENT option(id_vec) equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##

Expected a type.

program: TYPE UIDENT LCARET LIDENT RCARET INFIX_80
##
## Ends in an error in state: 832.
##
## data_declaration -> TYPE UIDENT option(id_vec) . equal typ [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE UIDENT option(id_vec)
##

Expected `=` followed by a type.

program: RECORD UIDENT LBRACE MUT WHILE
##
## Ends in an error in state: 848.
##
## data_label -> MUT . simple_id COLON typ [ RBRACE EOL COMMA ]
## data_label -> MUT . simple_id COLON eols typ [ RBRACE EOL COMMA ]
##
## The known suffix of the stack is as follows:
## MUT
##

Expected an identifier for the record field.

program: RECORD UIDENT LBRACE WHILE
##
## Ends in an error in state: 847.
##
## data_labels -> lbrace . lseparated_nonempty_list_inner(comma,data_label) option(comma) rbrace [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## lbrace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 21, spurious reduction of production lbrace -> LBRACE
##

Expected a comma-separated list of record field declarations.

program: RECORD UIDENT LCARET LIDENT COMMA EOL WHILE
##
## Ends in an error in state: 840.
##
## lseparated_nonempty_list_inner(comma,id_typ) -> lseparated_nonempty_list_inner(comma,id_typ) comma . id_typ [ RCARET EOL COMMA ]
## option(comma) -> comma . [ RCARET EOL ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(comma,id_typ) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##

Expected another type variable or `>` to complete the type arguments.

program: RECORD UIDENT LCARET LIDENT COMMA LIDENT WHILE
##
## Ends in an error in state: 837.
##
## id_vec -> lcaret lseparated_nonempty_list_inner(comma,id_typ) . option(comma) rcaret [ LBRACE EQUAL ]
## lseparated_nonempty_list_inner(comma,id_typ) -> lseparated_nonempty_list_inner(comma,id_typ) . comma id_typ [ RCARET EOL COMMA ]
##
## The known suffix of the stack is as follows:
## lcaret lseparated_nonempty_list_inner(comma,id_typ)
##

Expected a comma followed by more type variables or `>` to complete the type arguments.

program: RECORD UIDENT LCARET LIDENT EOL WHILE
##
## Ends in an error in state: 86.
##
## rcaret -> eols . RCARET [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET LBRACE INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ARROW ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected `>` to complete the type arguments.

program: RECORD UIDENT LCARET LIDENT RCARET INFIX_80
##
## Ends in an error in state: 846.
##
## data_declaration -> RECORD UIDENT option(id_vec) . data_labels [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## RECORD UIDENT option(id_vec)
##

Expected `{` to list record fields.

program: RECORD UIDENT LCARET UIDENT
##
## Ends in an error in state: 835.
##
## id_vec -> lcaret . lseparated_nonempty_list_inner(comma,id_typ) option(comma) rcaret [ LBRACE EQUAL ]
##
## The known suffix of the stack is as follows:
## lcaret
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 80, spurious reduction of production lcaret -> LCARET
##

Expected a comma-separated list of type variables.

program: RECORD UIDENT WHILE
##
## Ends in an error in state: 845.
##
## data_declaration -> RECORD UIDENT . option(id_vec) data_labels [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## RECORD UIDENT
##

Expected a comma-separated list of type variables surrounded by `<`/`>`, or `{` to list record fields.

program: RECORD WHILE
##
## Ends in an error in state: 844.
##
## data_declaration -> RECORD . UIDENT option(id_vec) data_labels [ SEMI EOL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## RECORD
##

Expected a capitalized identifier for the record type.

program: UIDENT DOT EOL WHILE
##
## Ends in an error in state: 155.
##
## id -> lseparated_nonempty_list_inner(dot,type_id_str) DOT eols . non_modid [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT eols . type_id_str [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(dot,type_id_str) DOT eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: UIDENT DOT WHILE
##
## Ends in an error in state: 130.
##
## id -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . non_modid [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
## id -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . eols non_modid [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . type_id_str [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
## lseparated_nonempty_list_inner(dot,type_id_str) -> lseparated_nonempty_list_inner(dot,type_id_str) DOT . eols type_id_str [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS FROM EQUAL EOL EOF ELSE DOT DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lseparated_nonempty_list_inner(dot,type_id_str) DOT
##

Expected an identifier.

program: UIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 219.
##
## assign_expr -> id_expr equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## id_expr equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: UIDENT INFIX_ASSIGNMENT_10 EOL UNDERSCORE
##
## Ends in an error in state: 329.
##
## assign_expr -> id_expr assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## id_expr assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: UIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 327.
##
## assign_expr -> id_expr assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> id_expr assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## id_expr assign_binop_op
##
program: WASMI64 DOT EOL LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 650.
##
## record_set -> simple_expr DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 DOT LIDENT DOT EOL LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 626.
##
## record_set -> record_get DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 DOT LIDENT DOT LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 618.
##
## record_set -> record_get DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 DOT LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 642.
##
## record_set -> simple_expr DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 DOT LIDENT GETS EOL UNDERSCORE
##
## Ends in an error in state: 614.
##
## assign_expr -> record_get GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 DOT LIDENT GETS WHEN
##
## Ends in an error in state: 46.
##
## assign_expr -> record_get GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> record_get GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get GETS
##
program: WASMI64 DOT LIDENT LBRACK WASMI64 RBRACK EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 635.
##
## array_set -> record_get lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 GETS WHEN
##
## Ends in an error in state: 43.
##
## assign_expr -> simple_expr GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> simple_expr GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr GETS
##
program: WASMI64 LBRACK WASMI64 RBRACK EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 659.
##
## array_set -> simple_expr lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 LPAREN RPAREN DOT EOL LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 254.
##
## record_set -> app_expr DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 LPAREN RPAREN DOT LIDENT EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 246.
##
## record_set -> app_expr DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 LPAREN RPAREN GETS EOL UNDERSCORE
##
## Ends in an error in state: 241.
##
## assign_expr -> app_expr GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 LPAREN RPAREN GETS WHEN
##
## Ends in an error in state: 239.
##
## assign_expr -> app_expr GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> app_expr GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr GETS
##
program: WASMI64 LPAREN RPAREN LBRACK WASMI64 RBRACK EQUAL EOL UNDERSCORE
##
## Ends in an error in state: 271.
##
## array_set -> app_expr lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 218, spurious reduction of production equal -> EQUAL eols
##
program: WASMI64 LBRACK WASMI64 RBRACK DOT EOL LIDENT EQUAL WHEN
##
## Ends in an error in state: 283.
##
## record_set -> array_get DOT eols simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT eols simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: WASMI64 LBRACK WASMI64 RBRACK DOT LIDENT EQUAL WHEN
##
## Ends in an error in state: 275.
##
## record_set -> array_get DOT simple_id equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT simple_id equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: WASMI64 LBRACK WASMI64 RBRACK GETS EOL UNDERSCORE
##
## Ends in an error in state: 235.
##
## assign_expr -> array_get GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 LBRACK WASMI64 RBRACK GETS WHEN
##
## Ends in an error in state: 233.
##
## assign_expr -> array_get GETS . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## assign_expr -> array_get GETS . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get GETS
##
program: WASMI64 LBRACK WASMI64 RBRACK LBRACK WASMI64 RBRACK EQUAL WHEN
##
## Ends in an error in state: 298.
##
## array_set -> array_get lbrack expr rbrack equal . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lbrack expr rbrack equal
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 217, spurious reduction of production equal -> EQUAL
##
program: BIGINT DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 652.
##
## record_set -> simple_expr DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT eols simple_id assign_binop_op
##
program: BIGINT DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 654.
##
## record_set -> simple_expr DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 644.
##
## record_set -> simple_expr DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> simple_expr DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT simple_id assign_binop_op
##
program: BIGINT DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 646.
##
## record_set -> simple_expr DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT DOT LIDENT DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 628.
##
## record_set -> record_get DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT eols simple_id assign_binop_op
##
program: BIGINT DOT LIDENT DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 630.
##
## record_set -> record_get DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT DOT LIDENT DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 620.
##
## record_set -> record_get DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> record_get DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT simple_id assign_binop_op
##
program: BIGINT DOT LIDENT DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 622.
##
## record_set -> record_get DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LPAREN BIGINT RPAREN DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 604.
##
## record_set -> paren_expr DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT eols simple_id assign_binop_op
##
program: LPAREN BIGINT RPAREN DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 606.
##
## record_set -> paren_expr DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LPAREN BIGINT RPAREN DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 596.
##
## record_set -> paren_expr DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> paren_expr DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT simple_id assign_binop_op
##
program: LPAREN BIGINT RPAREN DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 598.
##
## record_set -> paren_expr DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## paren_expr DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LBRACE BIGINT RBRACE DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 312.
##
## record_set -> braced_expr DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT eols simple_id assign_binop_op
##
program: LBRACE BIGINT RBRACE DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 314.
##
## record_set -> braced_expr DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LBRACE BIGINT RBRACE DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 304.
##
## record_set -> braced_expr DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> braced_expr DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT simple_id assign_binop_op
##
program: LBRACE BIGINT RBRACE DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 306.
##
## record_set -> braced_expr DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## braced_expr DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT LBRACK BIGINT RBRACK DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 285.
##
## record_set -> array_get DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT eols simple_id assign_binop_op
##
program: BIGINT LBRACK BIGINT RBRACK DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 287.
##
## record_set -> array_get DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT LBRACK BIGINT RBRACK DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 277.
##
## record_set -> array_get DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> array_get DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT simple_id assign_binop_op
##
program: BIGINT LBRACK BIGINT RBRACK DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 279.
##
## record_set -> array_get DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT LPAREN RPAREN DOT EOL LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 256.
##
## record_set -> app_expr DOT eols simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT eols simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT eols simple_id assign_binop_op
##
program: BIGINT LPAREN RPAREN DOT EOL LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 258.
##
## record_set -> app_expr DOT eols simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT eols simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT LPAREN RPAREN DOT LIDENT INFIX_ASSIGNMENT_10 WHEN
##
## Ends in an error in state: 248.
##
## record_set -> app_expr DOT simple_id assign_binop_op . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## record_set -> app_expr DOT simple_id assign_binop_op . eols expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT simple_id assign_binop_op
##
program: BIGINT LPAREN RPAREN DOT LIDENT INFIX_ASSIGNMENT_10 EOL WHEN
##
## Ends in an error in state: 250.
##
## record_set -> app_expr DOT simple_id assign_binop_op eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr DOT simple_id assign_binop_op eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected an expression to assign.

program: WASMI64 INFIX_70 WHEN
##
## Ends in an error in state: 567.
##
## binop_expr -> non_stmt_expr INFIX_70 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_70 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_70
##
program: WASMI64 INFIX_40 EOL UNDERSCORE
##
## Ends in an error in state: 583.
##
## binop_expr -> non_stmt_expr INFIX_40 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_40 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_40 WHEN
##
## Ends in an error in state: 581.
##
## binop_expr -> non_stmt_expr INFIX_40 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_40 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_40
##
program: WASMI64 INFIX_60 EOL UNDERSCORE
##
## Ends in an error in state: 573.
##
## binop_expr -> non_stmt_expr INFIX_60 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_60 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_60 WHEN
##
## Ends in an error in state: 571.
##
## binop_expr -> non_stmt_expr INFIX_60 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_60 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_60
##
program: WASMI64 DASH EOL UNDERSCORE
##
## Ends in an error in state: 541.
##
## binop_expr -> non_stmt_expr DASH eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr DASH eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 DASH WHEN
##
## Ends in an error in state: 539.
##
## binop_expr -> non_stmt_expr DASH . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr DASH . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr DASH
##
program: WASMI64 INFIX_80 EOL UNDERSCORE
##
## Ends in an error in state: 565.
##
## binop_expr -> non_stmt_expr INFIX_80 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_80 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_80 WHEN
##
## Ends in an error in state: 563.
##
## binop_expr -> non_stmt_expr INFIX_80 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_80 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_80
##
program: WASMI64 GETS EOL UNDERSCORE
##
## Ends in an error in state: 638.
##
## assign_expr -> simple_expr GETS eols . expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr GETS eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_90 EOL UNDERSCORE
##
## Ends in an error in state: 561.
##
## binop_expr -> non_stmt_expr INFIX_90 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_90 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_90 WHEN
##
## Ends in an error in state: 559.
##
## binop_expr -> non_stmt_expr INFIX_90 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_90 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_90
##
program: WASMI64 LCARET EOL UNDERSCORE
##
## Ends in an error in state: 557.
##
## binop_expr -> non_stmt_expr LCARET eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr LCARET eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 LCARET WHEN
##
## Ends in an error in state: 555.
##
## binop_expr -> non_stmt_expr LCARET . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr LCARET . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr LCARET
##
program: WASMI64 INFIX_100 EOL UNDERSCORE
##
## Ends in an error in state: 543.
##
## binop_expr -> non_stmt_expr INFIX_100 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_100 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_100 WHEN
##
## Ends in an error in state: 537.
##
## binop_expr -> non_stmt_expr INFIX_100 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_100 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_100
##
program: WASMI64 INFIX_120 EOL UNDERSCORE
##
## Ends in an error in state: 531.
##
## binop_expr -> non_stmt_expr INFIX_120 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_120 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_120 WHEN
##
## Ends in an error in state: 529.
##
## binop_expr -> non_stmt_expr INFIX_120 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_120 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_120
##
program: WASMI64 PIPE EOL UNDERSCORE
##
## Ends in an error in state: 575.
##
## binop_expr -> non_stmt_expr PIPE eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr PIPE eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 PIPE WHEN
##
## Ends in an error in state: 553.
##
## binop_expr -> non_stmt_expr PIPE . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr PIPE . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr PIPE
##
program: WASMI64 INFIX_30 EOL UNDERSCORE
##
## Ends in an error in state: 587.
##
## binop_expr -> non_stmt_expr INFIX_30 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_30 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_30 WHEN
##
## Ends in an error in state: 585.
##
## binop_expr -> non_stmt_expr INFIX_30 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_30 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_30
##
program: WASMI64 INFIX_110 EOL UNDERSCORE
##
## Ends in an error in state: 535.
##
## binop_expr -> non_stmt_expr INFIX_110 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_110 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 INFIX_110 WHEN
##
## Ends in an error in state: 533.
##
## binop_expr -> non_stmt_expr INFIX_110 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_110 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_110
##
program: WASMI64 RCARET EOL UNDERSCORE
##
## Ends in an error in state: 551.
##
## binop_expr -> non_stmt_expr RCARET eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr RCARET eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 RCARET RCARET RCARET WHEN
##
## Ends in an error in state: 66.
##
## binop_expr -> non_stmt_expr lnonempty_list_inner(RCARET) RCARET . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr lnonempty_list_inner(RCARET) RCARET . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## lnonempty_list_inner(RCARET) -> lnonempty_list_inner(RCARET) RCARET . [ RCARET ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr lnonempty_list_inner(RCARET) RCARET
##
program: WASMI64 SLASH EOL UNDERSCORE
##
## Ends in an error in state: 527.
##
## binop_expr -> non_stmt_expr SLASH eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr SLASH eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 SLASH WHEN
##
## Ends in an error in state: 68.
##
## binop_expr -> non_stmt_expr SLASH . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr SLASH . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr SLASH
##
program: WASMI64 STAR EOL UNDERSCORE
##
## Ends in an error in state: 547.
##
## binop_expr -> non_stmt_expr STAR eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr STAR eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 STAR WHEN
##
## Ends in an error in state: 63.
##
## binop_expr -> non_stmt_expr STAR . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr STAR . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr STAR
##
program: BIGINT INFIX_50 EOL WHEN
##
## Ends in an error in state: 579.
##
## binop_expr -> non_stmt_expr INFIX_50 eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_50 eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: BIGINT INFIX_50 WHEN
##
## Ends in an error in state: 577.
##
## binop_expr -> non_stmt_expr INFIX_50 . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr INFIX_50 . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr INFIX_50
##
program: BIGINT RCARET WHEN
##
## Ends in an error in state: 549.
##
## binop_expr -> non_stmt_expr RCARET . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## binop_expr -> non_stmt_expr RCARET . eols non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## lnonempty_list_inner(RCARET) -> RCARET . [ RCARET ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr RCARET
##
program: BIGINT RCARET RCARET EOL WHEN
##
## Ends in an error in state: 545.
##
## binop_expr -> non_stmt_expr lnonempty_list_inner(RCARET) RCARET eols . non_stmt_expr [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_stmt_expr lnonempty_list_inner(RCARET) RCARET eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: LPAREN INFIX_100 WHILE
##
## Ends in an error in state: 150.
##
## id_str -> lparen special_op . rparen [ WHEN TYPE THICKARROW STAR SLASH SEMI RPAREN RECORD RCARET RBRACK RBRACE PIPE LPAREN LET LCARET LBRACK INFIX_ASSIGNMENT_10 INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 IMPORT GETS FROM EXPORT EQUAL EOL EOF ENUM ELSE DOT DASH COMMA COLON AT AS ]
##
## The known suffix of the stack is as follows:
## lparen special_op
##
program: LPAREN RCARET WHILE
##
## Ends in an error in state: 135.
##
## lnonempty_list_inner(RCARET) -> RCARET . [ RCARET ]
## special_op -> RCARET . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## RCARET
##

Expected an expression on the right side of the operator.

program: WASMI64 COLON EOL WHILE
##
## Ends in an error in state: 125.
##
## annotated_expr -> non_binop_expr COLON eols . typ [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_binop_expr COLON eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##
program: WASMI64 COLON WHILE
##
## Ends in an error in state: 72.
##
## annotated_expr -> non_binop_expr COLON . typ [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
## annotated_expr -> non_binop_expr COLON . eols typ [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## non_binop_expr COLON
##

Expected a type to complete the type annotation.

program: WASMI64 COLON FUN LIDENT ARROW EOL WHILE
##
## Ends in an error in state: 78.
##
## typ -> FUN LIDENT arrow . typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN LIDENT arrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 77, spurious reduction of production arrow -> ARROW eols
##
program: WASMI64 COLON FUN LPAREN RPAREN ARROW EOL WHILE
##
## Ends in an error in state: 122.
##
## typ -> FUN lparen option(typs) rparen arrow . typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(typs) rparen arrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 77, spurious reduction of production arrow -> ARROW eols
##

Expected a type for the result of the function type.

program: WASMI64 COLON FUN LIDENT WHILE
##
## Ends in an error in state: 75.
##
## typ -> FUN LIDENT . arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN LIDENT
##
program: WASMI64 COLON FUN LPAREN RPAREN WHILE
##
## Ends in an error in state: 121.
##
## typ -> FUN lparen option(typs) rparen . arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(typs) rparen
##

# This error message could never appear, as we only inject the FUN token _because_ there's an arrow
Expected an arrow (->) followed by a type.

program: WASMI64 COLON FUN LPAREN UIDENT RCARET
##
## Ends in an error in state: 120.
##
## typ -> FUN lparen option(typs) . rparen arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN lparen option(typs)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
## In state 94, spurious reduction of production option(comma) ->
## In state 97, spurious reduction of production typs -> lseparated_nonempty_list_inner(comma,typ) option(comma)
## In state 119, spurious reduction of production option(typs) -> typs
##

# This message could never appear as the user will get an unbalanced paren error
Expected `)` to complete the function type parameters.

program: WASMI64 COLON FUN LPAREN WHILE
##
## Ends in an error in state: 118.
##
## typ -> FUN lparen . option(typs) rparen arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a comma-separated list of types or an immediate `)` for a function type with no arguments.

program: WASMI64 COLON FUN WHILE
##
## Ends in an error in state: 74.
##
## typ -> FUN . LIDENT arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
## typ -> FUN . lparen option(typs) rparen arrow typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## FUN
##

# This error can't appear as the FUN token wouldn't have been injected.
Expected an identifier for a single-argument function or a comma-separated list of types surrounded by `(`/`)`.

program: WASMI64 COLON LPAREN UIDENT COMMA EOL UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 111.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) comma . typ [ RPAREN EOL COMMA ]
## tuple_typs -> typ COMMA eols lseparated_nonempty_list_inner(comma,typ) comma . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA eols lseparated_nonempty_list_inner(comma,typ) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: WASMI64 COLON LPAREN UIDENT COMMA UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 105.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) comma . typ [ RPAREN EOL COMMA ]
## tuple_typs -> typ COMMA lseparated_nonempty_list_inner(comma,typ) comma . [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA lseparated_nonempty_list_inner(comma,typ) comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
##
program: WASMI64 COLON LPAREN UIDENT COMMA WHILE
##
## Ends in an error in state: 103.
##
## tuple_typs -> typ COMMA . [ RPAREN EOL ]
## tuple_typs -> typ COMMA . lseparated_nonempty_list_inner(comma,typ) [ RPAREN EOL ]
## tuple_typs -> typ COMMA . lseparated_nonempty_list_inner(comma,typ) comma [ RPAREN EOL ]
## tuple_typs -> typ COMMA . eols lseparated_nonempty_list_inner(comma,typ) [ RPAREN EOL ]
## tuple_typs -> typ COMMA . eols lseparated_nonempty_list_inner(comma,typ) comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA
##

Expected a type or an immediate `)` to complete the tuple type.

program: WASMI64 COLON LPAREN UIDENT COMMA EOL UIDENT WHEN
##
## Ends in an error in state: 110.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) . comma typ [ RPAREN EOL COMMA ]
## tuple_typs -> typ COMMA eols lseparated_nonempty_list_inner(comma,typ) . [ RPAREN EOL ]
## tuple_typs -> typ COMMA eols lseparated_nonempty_list_inner(comma,typ) . comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA eols lseparated_nonempty_list_inner(comma,typ)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
##
program: WASMI64 COLON LPAREN UIDENT COMMA UIDENT WHEN
##
## Ends in an error in state: 104.
##
## lseparated_nonempty_list_inner(comma,typ) -> lseparated_nonempty_list_inner(comma,typ) . comma typ [ RPAREN EOL COMMA ]
## tuple_typs -> typ COMMA lseparated_nonempty_list_inner(comma,typ) . [ RPAREN EOL ]
## tuple_typs -> typ COMMA lseparated_nonempty_list_inner(comma,typ) . comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA lseparated_nonempty_list_inner(comma,typ)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
##

Expected a comma followed by another type or `)` to complete the tuple type.

program: WASMI64 COLON LPAREN UIDENT COMMA EOL WHILE
##
## Ends in an error in state: 109.
##
## tuple_typs -> typ COMMA eols . lseparated_nonempty_list_inner(comma,typ) [ RPAREN EOL ]
## tuple_typs -> typ COMMA eols . lseparated_nonempty_list_inner(comma,typ) comma [ RPAREN EOL ]
##
## The known suffix of the stack is as follows:
## typ COMMA eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected a comma-separated list of types.

program: WASMI64 COLON LPAREN UIDENT WHEN
##
## Ends in an error in state: 101.
##
## tuple_typs -> typ . COMMA [ RPAREN EOL ]
## tuple_typs -> typ . COMMA lseparated_nonempty_list_inner(comma,typ) [ RPAREN EOL ]
## tuple_typs -> typ . COMMA lseparated_nonempty_list_inner(comma,typ) comma [ RPAREN EOL ]
## tuple_typs -> typ . COMMA eols lseparated_nonempty_list_inner(comma,typ) [ RPAREN EOL ]
## tuple_typs -> typ . COMMA eols lseparated_nonempty_list_inner(comma,typ) comma [ RPAREN EOL ]
## typ -> lparen typ . rparen [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## lparen typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
##

Expected `)` for a grouped type or a comma followed by more types for a tuple type.

program: WASMI64 COLON UIDENT ARROW EOL WHILE
##
## Ends in an error in state: 107.
##
## typ -> data_typ arrow . typ [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## data_typ arrow
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 77, spurious reduction of production arrow -> ARROW eols
##

Expected a type for the result of the function type.

program: WASMI64 COLON UIDENT LCARET EOL WHILE
##
## Ends in an error in state: 82.
##
## data_typ -> type_id lcaret . typs rcaret [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ARROW ]
##
## The known suffix of the stack is as follows:
## type_id lcaret
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 81, spurious reduction of production lcaret -> LCARET eols
##

Expected a comma-separated list of types.

program: WASMI64 COLON UIDENT LCARET UIDENT RPAREN
##
## Ends in an error in state: 83.
##
## data_typ -> type_id lcaret typs . rcaret [ WHEN THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 FROM EQUAL EOL EOF ELSE DASH COMMA COLON AS ARROW ]
##
## The known suffix of the stack is as follows:
## type_id lcaret typs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 89, spurious reduction of production type_id -> lseparated_nonempty_list_inner(dot,type_id_str)
## In state 79, spurious reduction of production data_typ -> type_id
## In state 106, spurious reduction of production typ -> data_typ
## In state 88, spurious reduction of production lseparated_nonempty_list_inner(comma,typ) -> typ
## In state 94, spurious reduction of production option(comma) ->
## In state 97, spurious reduction of production typs -> lseparated_nonempty_list_inner(comma,typ) option(comma)
##

Expected `>` to complete the type.

program: WASMI64 DOT LIDENT LPAREN COMMA EOL WHILE
##
## Ends in an error in state: 469.
##
## app_expr -> record_get lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
## In state 267, spurious reduction of production option(comma) -> comma
##
program: WASMI64 DOT LIDENT LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 472.
##
## app_expr -> record_get lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LPAREN COMMA EOL WHILE
##
## Ends in an error in state: 166.
##
## app_expr -> simple_expr lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
## In state 267, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LPAREN RPAREN LPAREN COMMA EOL WHILE
##
## Ends in an error in state: 261.
##
## app_expr -> app_expr lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
## In state 96, spurious reduction of production comma -> COMMA eols
## In state 267, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LPAREN RPAREN LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 264.
##
## app_expr -> app_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 169.
##
## app_expr -> simple_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LBRACK WASMI64 RBRACK LPAREN COMMA WHILE
##
## Ends in an error in state: 290.
##
## app_expr -> array_get lparen option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lparen option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 267, spurious reduction of production option(comma) -> comma
##
program: WASMI64 LBRACK WASMI64 RBRACK LPAREN WASMI64 COMMA RBRACK
##
## Ends in an error in state: 293.
##
## app_expr -> array_get lparen lseparated_nonempty_list_inner(comma,expr) option(comma) . rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lparen lseparated_nonempty_list_inner(comma,expr) option(comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production comma -> COMMA
## In state 171, spurious reduction of production option(comma) -> comma
##

Expected `)` to complete the function call.

program: WASMI64 DOT LIDENT LPAREN UNDERSCORE
##
## Ends in an error in state: 468.
##
## app_expr -> record_get lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> record_get lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## record_get lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: WASMI64 LPAREN RPAREN LPAREN UNDERSCORE
##
## Ends in an error in state: 260.
##
## app_expr -> app_expr lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> app_expr lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## app_expr lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: WASMI64 LPAREN UNDERSCORE
##
## Ends in an error in state: 165.
##
## app_expr -> simple_expr lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> simple_expr lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## simple_expr lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##
program: WASMI64 LBRACK WASMI64 RBRACK LPAREN WHEN
##
## Ends in an error in state: 289.
##
## app_expr -> array_get lparen . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## app_expr -> array_get lparen . lseparated_nonempty_list_inner(comma,expr) option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## array_get lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected a comma-separated list of expressions or `)` to complete the function call.

program: WASMI64 DOT LIDENT LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 471.
##
## app_expr -> record_get lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## record_get lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##
program: WASMI64 LPAREN RPAREN LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 263.
##
## app_expr -> app_expr lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## app_expr lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##
program: WASMI64 LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 168.
##
## app_expr -> simple_expr lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## simple_expr lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##
program: WASMI64 LBRACK WASMI64 RBRACK LPAREN WASMI64 WHILE
##
## Ends in an error in state: 292.
##
## app_expr -> array_get lparen lseparated_nonempty_list_inner(comma,expr) . option(comma) rparen [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LPAREN LCARET LBRACK INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 GETS EOL EOF ELSE DOT DASH COMMA COLON ]
## lseparated_nonempty_list_inner(comma,expr) -> lseparated_nonempty_list_inner(comma,expr) . comma expr [ RPAREN EOL COMMA ]
##
## The known suffix of the stack is as follows:
## array_get lparen lseparated_nonempty_list_inner(comma,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
## In state 266, spurious reduction of production lseparated_nonempty_list_inner(comma,expr) -> expr
##

Expected a comma followed by more expressions or `)` to complete the function call.

program: WHILE LPAREN UNDERSCORE
##
## Ends in an error in state: 7.
##
## while_expr -> WHILE lparen . expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## WHILE lparen
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 2, spurious reduction of production lparen -> LPAREN
##

Expected an expression for the while loop condition.

program: WHILE LPAREN WASMI64 THICKARROW
##
## Ends in an error in state: 788.
##
## while_expr -> WHILE lparen expr . rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## WHILE lparen expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 42, spurious reduction of production non_assign_expr -> simple_expr
## In state 127, spurious reduction of production non_binop_expr -> non_assign_expr
## In state 71, spurious reduction of production annotated_expr -> non_binop_expr
## In state 243, spurious reduction of production non_stmt_expr -> annotated_expr
## In state 62, spurious reduction of production expr -> non_stmt_expr
##

Expected `)` after the while loop condition.

program: WHILE WHILE
##
## Ends in an error in state: 1.
##
## while_expr -> WHILE . lparen expr rparen block [ THICKARROW STAR SLASH SEMI RPAREN RCARET RBRACK RBRACE PIPE LCARET INFIX_90 INFIX_80 INFIX_70 INFIX_60 INFIX_50 INFIX_40 INFIX_30 INFIX_120 INFIX_110 INFIX_100 EOL EOF ELSE DASH COMMA COLON ]
##
## The known suffix of the stack is as follows:
## WHILE
##

Expected `(` followed by an expression for the while loop condition.

program: MATCH LPAREN FLOAT32 RPAREN LBRACE NUMBER_INT EOL WHILE
##
## Ends in an error in state: 777.
##
## when_guard -> eols . WHEN expr [ THICKARROW ]
##
## The known suffix of the stack is as follows:
## eols
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production nonempty_list(eol) -> EOL
## In state 5, spurious reduction of production eols -> nonempty_list(eol)
##

Expected `=>` followed by an expression or a branch guard—the keyword `when` followed by an expression.
