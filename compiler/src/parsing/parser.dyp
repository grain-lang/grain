{
open Location
open Identifier
open Dyp
open Parsetree
open Ast_helper
open Grain_utils

(* Used for error messages and as a default, in case anything slips through
   without an explicit loc. *)
let first_loc = ref Location.dummy_loc
let last_loc = ref Location.dummy_loc
let dyp_merge = keep_all

let last_state_printer = ref (fun () -> ())

let when_debug ?n thunk =
  match n with
  | Some(n) ->
      if !Grain_utils.Config.parser_debug_level >= n then
        thunk()
  | None -> ()

let prerr_string s = when_debug ~n:1 (fun () -> Stdlib.prerr_string s)

let debug_print_state () =
  when_debug !last_state_printer

let symbol_rloc dyp =
  let ret = {
    loc_start = dyp.symbol_start_pos ();
    loc_end = dyp.symbol_end_pos ();
    loc_ghost = false;
  } in
  last_state_printer := (fun () -> dyp.print_state stderr);
  when_debug ~n:1 !last_state_printer;
  last_loc := ret;
  ret

let symbol_gloc dyp =
  let ret = {
    loc_start = dyp.symbol_start_pos ();
    loc_end = dyp.symbol_end_pos ();
    loc_ghost = true;
  } in
  last_state_printer := (fun () -> dyp.print_state stderr);
  when_debug ~n:1 !last_state_printer;
  last_loc := ret;
  ret

let rhs_loc dyp n =
  let ret = {
    loc_start = dyp.rhs_start_pos n;
    loc_end = dyp.rhs_end_pos n;
    loc_ghost = false;
  } in
  last_state_printer := (fun () -> dyp.print_state stderr);
  when_debug ~n:1 !last_state_printer;
  last_loc := ret;
  ret

let fix_block_mapper super =
  let open Ast_mapper in
  let expr mapper ({pexp_desc; pexp_loc} as e) =
    match pexp_desc with
    | PExpBlock([]) -> super.expr mapper e
    | PExpBlock(elts) ->
      let elts = List.map (mapper.expr mapper) elts in
      (* Properly nest let bindings *)
      let elts = List.fold_right (fun ({pexp_desc} as stmt) elts ->
        match pexp_desc with
        | PExpLet(r, binds, _) -> [{stmt with pexp_desc=PExpLet(r, binds, {stmt with pexp_desc=PExpBlock(elts)})}]
        | _ -> stmt::elts
      ) elts [] in
      {e with pexp_desc=PExpBlock(elts)}
    | _ -> super.expr mapper e in
  {super with expr}

let fix_tyvar_mapper super =
  let open Ast_mapper in
  let open Ast_helper in
  let typ mapper ({ptyp_desc; ptyp_loc} as t) =
    match ptyp_desc with
    | PTyVar v when (v <> "") && (match v.[0] with 'A'..'Z' -> true | _ -> false) ->
      let id = mkloc (IdentName v) ptyp_loc in
      {t with ptyp_desc=PTyConstr(id, [])}
    | _ -> super.typ mapper t in
  {super with typ}

let fix_blocks ({statements} as prog) =
  let open Ast_mapper in
  let mapper = default_mapper
    |> fix_block_mapper
    |> fix_tyvar_mapper in
  {prog with
   statements=List.map (mapper.toplevel mapper) statements}

let no_record_block exprs =
  match exprs with
  | [{pexp_desc=PExpId {txt=IdentName _}}] -> raise Dyp.Giveup
  | _ -> ()

let no_brace_expr expr =
  match expr.pexp_desc with
  | PExpBlock _
  | PExpRecord _ -> raise Dyp.Giveup
  | _ -> ()

let no_uppercase_ident expr =
  match expr.pexp_desc with
  | PExpId {txt=id} ->
    let first_char = String.get (Identifier.last id) 0 in
    if Char_utils.is_uppercase_letter first_char then raise Dyp.Giveup
  | _ -> ()

let no_array_access expr =
  match expr.pexp_desc with
  | PExpArrayGet _ -> raise Dyp.Giveup
  | _ -> ()


let mkid ns =
  let help ns =
    let rec help ns (acc_ident, acc_str) =
      let ident = Option.fold ~some:(fun i -> IdentExternal(i, acc_str)) ~none:(IdentName acc_str) acc_ident in
      match ns with
        | [] -> ident
        | n::tl -> help tl (Some ident, n) in
    match ns with
      | [] -> failwith "Should be impossible"
      | n::tl -> help tl (None, n) in
  mkloc @@ help ns

let mkid_expr dyp ns = Exp.ident ~loc:(symbol_rloc dyp) (mkid ns (symbol_rloc dyp))

let mkstr dyp s = mkloc s (symbol_rloc dyp)

let make_program statements =
  let prog_loc = {
    loc_start=(!first_loc).loc_end;
    loc_end=(!last_loc).loc_end;
    loc_ghost=false;
  } in
  fix_blocks {statements; prog_loc}

}

%relation pe<pt<pp<pb<pc<pa<pl

%token <int> NUM
%token <int32> INT32
%token <int64> INT64
%token <string> ID
%token <string> TYPEID
%token <string> STRING
%token LBRACK RBRACK LPAREN LPARENNOSPACE RPAREN LBRACE RBRACE LCARET RCARET
%token CARET
%token COMMA SEMI AS
%token THICKARROW ARROW PIPE
%token IS EQEQ LESSEQ GREATEREQ
%token EQUAL GETS
%token UNDERSCORE
%token COLON COLONCOLON DOT ELLIPSIS

%token ASSERT FAIL

%token PLUS DASH STAR SLASH PERCENT
%token TRUE FALSE VOID

%token LET REC IF ELSE MATCH WHILE
%token AMPAMP PIPEPIPE NOT

%token DATA IMPORT EXPORT FOREIGN WASM PRIMITIVE
%token EXCEPT FROM
%token EOL EOF

%start <Parsetree.parsed_program> program

%parser

eol :
  | EOL { () }

eols :
  | eol+ { () }

eos :
  | eols { None }
  | SEMI eols? { None }

lbrack :
  | LBRACK eols? { () }

rbrack :
  | eols? RBRACK { () }

lparen :
  | LPAREN eols? { () }

rparen :
  | eols? RPAREN { () }

lbrace :
  | LBRACE eols? { () }

rbrace :
  | eols? RBRACE { () }

lcaret :
  | LCARET eols? { () }

rcaret :
  | eols? RCARET { () }

comma :
  | eols? COMMA eols? { () }

colon :
  | eols? COLON eols? { () }

dot :
  | eols? DOT eols? { () }

arrow :
  | eols? ARROW eols? { () }

thickarrow :
  | eols? THICKARROW eols? { () }

pipe :
  | PIPE eols? { () }

equal :
  | eols? EQUAL eols? { () }

const :
  | NUM { Const.int $1 }
  | INT32 { Const.int32 $1 }
  | INT64 { Const.int64 $1 }
  | TRUE { Const.bool true }
  | FALSE { Const.bool false }
  | VOID { Const.void }
  | STRING { Const.string $1 }

expr :
  | stmt_expr
  | binop_expr

binop_expr :
  | binop_expr(<=pa) eols? pluseq_op eols?    binop_expr(<pa) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pa
  | binop_expr(<=pa) eols? dasheq_op eols?    binop_expr(<pa) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pa
  | binop_expr(<=pa) eols? stareq_op eols?    binop_expr(<pa) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pa
  | binop_expr(<=pa) eols? slasheq_op eols?   binop_expr(<pa) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pa
  | binop_expr(<=pp) eols? plus_op eols?      binop_expr(<pp) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pp
  | binop_expr(<=pp) eols? dash_op eols?      binop_expr(<pp) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pp
  | binop_expr(<=pt) eols? star_op eols?      binop_expr(<pt) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pt
  | binop_expr(<=pt) eols? slash_op eols?     binop_expr(<pt) { Exp.prim2 ~loc:(symbol_rloc dyp) Divide $1 $5 } pt
  | binop_expr(<=pb) eols? percent_op eols?   binop_expr(<pb) { Exp.prim2 ~loc:(symbol_rloc dyp) Mod $1 $5 } pb
  | binop_expr(<=pc) eols? is_op eols?        binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? eqeq_op eols?      binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? noteq_op eols?     binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? lcaret_op eols?    binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? rcaret_op eols?    binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? lesseq_op eols?    binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pc) eols? greatereq_op eols? binop_expr(<pc) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pc
  | binop_expr(<=pb) eols? ampamp_op eols?    binop_expr(<pb) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pb
  | binop_expr(<=pb) eols? pipepipe_op eols?  binop_expr(<pb) { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp [$3]) [$1; $5] } pb
  | binop_expr colon typ { Exp.constraint_ ~loc:(symbol_rloc dyp) $1 $3 } pe
  | lam_expr { $1 } pl
  | non_assign_expr { $1 } pe
  | assign_expr { $1 } pa

non_binop_expr :
  | non_assign_expr { $1 } pe
  | assign_expr { $1 } pa

pattern :
  | pattern colon typ { Pat.constraint_ ~loc:(symbol_rloc dyp) $1 $3 }
  | UNDERSCORE { Pat.any ~loc:(symbol_rloc dyp) () }
  /* If the pattern uses an external ID, we know it's a constructor, not a variable */
  | ext_constructor { Pat.construct ~loc:(symbol_rloc dyp) $1 [] }
  | [ID | infix] { Pat.var ~loc:(symbol_rloc dyp) (mkstr dyp $1) }
  | lparen tuple_patterns rparen { Pat.tuple ~loc:(symbol_rloc dyp) $2 }
  | lparen pattern rparen { $2 }
  | lbrace record_patterns rbrace { Pat.record ~loc:(symbol_rloc dyp) $2 }
  | type_id lparen patterns rparen { Pat.construct ~loc:(symbol_rloc dyp) $1 $3 }
  | type_id { Pat.construct ~loc:(symbol_rloc dyp) $1 [] }
  | lbrack patterns [comma ELLIPSIS any_or_var_pat {$3}]? rbrack { Pat.list ~loc:(symbol_rloc dyp) $2 $3 }
  | lbrack [ELLIPSIS any_or_var_pat {$2}]? rbrack { Pat.list ~loc:(symbol_rloc dyp) [] $2 }

any_or_var_pat :
  | UNDERSCORE { Pat.any ~loc:(symbol_rloc dyp) () }
  | ID { Pat.var ~loc:(symbol_rloc dyp) (mkstr dyp $1) }

patterns :
  | pattern [comma pattern {$2}]* { $1::$2 }

tuple_patterns :
  | pattern comma { [$1] }
  | pattern [comma pattern {$2}]+ { $1::$2 }

record_patterns :
  | record_pattern [comma record_pattern {$2}]* { $1::$2 }

record_pattern :
  | UNDERSCORE { None, Open }
  | id colon pattern { Some($1, $3), Closed }
  | id { Some($1, Pat.var ~loc:(symbol_rloc dyp) (mkstr dyp (Identifier.last $1.txt))), Closed }

data_typ :
  | type_id lcaret typ [comma typ {$2}]* rcaret { Typ.constr $1 ($3::$4) }
  | type_id { Typ.constr $1 [] }

typ :
  /* Convenience: Parens optional for single-argument functions */
  | data_typ arrow typ { Typ.arrow ~loc:(symbol_rloc dyp) [$1] $3 }
  | ID arrow typ { Typ.arrow ~loc:(symbol_rloc dyp) [(Typ.var $1)] $3 }
  | lparen typs rparen arrow typ { Typ.arrow ~loc:(symbol_rloc dyp) $2 $5 }
  | lparen tuple_typs rparen { Typ.tuple ~loc:(symbol_rloc dyp) $2 }
  | lparen typ rparen { $2 }
  | ID { Typ.var $1 }
  | data_typ

typs :
  | [typ [comma typ {$2}]* {$1::$2}]? { Option.value ~default:[] $1 }

tuple_typs :
  | typ comma { [$1] }
  | typ [comma typ {$2}]+ { $1::$2 }

value_bind :
  | pattern equal expr { Vb.mk ~loc:(symbol_rloc dyp) $1 $3 }

value_binds :
  | value_bind [comma value_bind {$2}]* { $1::$2 }

import_shape :
  | id { PImportModule, Some $1 }
  | STAR [EXCEPT lbrace id [comma id {$2}]* rbrace {$3::$4}]? [AS id {$2}]? { PImportAllExcept (Option.value ~default:[] $2), $3 }
  | lbrace [id [AS id {$2}]? [comma id [AS id {$2}]? {($2, $3)}]* {($1, $2)::$3}]? rbrace [AS id {$2}]? { PImportValues (Option.value ~default:[] $2), $4 }

import_stmt :
  | IMPORT import_shape [comma import_shape {$2}]* FROM file_path { Imp.mk ($2::$3) $5 }

export_stmt :
  | EXPORT LET REC value_binds { Top.let_ Exported Recursive $4 }
  | EXPORT LET value_binds { Top.let_ Exported Nonrecursive $3 }
  | EXPORT foreign_stmt { Top.foreign ~loc:(symbol_rloc dyp) Exported $2 }
  | EXPORT primitive_stmt { Top.primitive ~loc:(symbol_rloc dyp) Exported $2 }
  | EXPORT data_declaration { Top.data Exported $2 }
  | EXPORT any_id_str [AS any_id_str {$2}]? [comma any_id_str [AS any_id_str {$2}]? {$2, $3}]* { Top.export ~loc:(symbol_rloc dyp) (Ex.mk ~loc:(symbol_rloc dyp) (($2, $3)::$4)) }
  | EXPORT STAR [EXCEPT export_id_str [comma export_id_str {$2}]* {$2::$3}]? { Top.export_all ~loc:(symbol_rloc dyp) (Option.value ~default:[] $3) }

data_constructor :
  | TYPEID { CDecl.singleton ~loc:(symbol_rloc dyp) (mkstr dyp $1) }
  | TYPEID lparen typs rparen { CDecl.tuple ~loc:(symbol_rloc dyp) (mkstr dyp $1) $3 }
  /* Special support for lists */
  | lbrack rbrack { CDecl.singleton ~loc:(symbol_rloc dyp) (mkstr dyp "[]") }
  | lbrack ELLIPSIS rbrack lparen typs rparen { CDecl.tuple ~loc:(symbol_rloc dyp) (mkstr dyp "[...]") $5 }

data_constructors :
  | pipe? data_constructor [eols? pipe data_constructor {$3}]* { $2::$3 }

data_label :
  | simple_id colon typ { LDecl.mk ~loc:(symbol_rloc dyp) $1 $3 }

data_labels :
  | lbrace data_label [comma data_label {$2}]* comma? rbrace { $2::$3 }

data_declaration :
  | DATA TYPEID [lcaret ID [comma ID {$2}]* rcaret {$2::$3}]? equal data_constructors { Dat.variant ~loc:(symbol_rloc dyp) (mkstr dyp $2) (List.map Typ.var (Option.value ~default:[] $3)) $5 }
  | DATA TYPEID [lcaret ID [comma ID {$2}]* rcaret {$2::$3}]? equal data_labels { Dat.record ~loc:(symbol_rloc dyp) (mkstr dyp $2) (List.map Typ.var (Option.value ~default:[] $3)) $5 }

prim1_expr :
  | NOT non_assign_expr { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp ["!"]) [$2] }
  | CARET non_assign_expr { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp ["^"]) [$2] }

paren_expr :
  | lparen expr rparen { $2 }

app_arg_exprs :
  | [expr [comma expr {$2}]* { $1::$2 }]? { Option.value ~default:[] $1 }

app_expr :
  | id_expr lparen app_arg_exprs rparen { prerr_string "\napp_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); Exp.apply ~loc:(symbol_rloc dyp) $1 $3 }
  | paren_expr lparen app_arg_exprs rparen { prerr_string "\napp_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); Exp.apply ~loc:(symbol_rloc dyp) $1 $3 }
  | app_expr lparen app_arg_exprs rparen { prerr_string "\napp_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); Exp.apply ~loc:(symbol_rloc dyp) $1 $3 }

ext_constructor :
  | TYPEID [dot TYPEID {$2}]+ { prerr_string "\nid\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); (mkid ($1::$2)) (symbol_rloc dyp) }

plus_op :
  | PLUS { "+" }
dash_op :
  | DASH { "-" }
star_op :
  | STAR { "*" }
slash_op :
  | SLASH { "/" }
percent_op :
  | PERCENT { "%" }
is_op :
  | IS { "is" }
eqeq_op :
  | EQEQ { "==" }
noteq_op :
  | NOT EQUAL { "!=" }
lcaret_op :
  | LCARET { "<" }
rcaret_op :
  | RCARET { ">" }
lesseq_op :
  | LESSEQ { "<=" }
greatereq_op :
  | GREATEREQ { ">=" }
ampamp_op :
  | AMPAMP { "&&" }
pipepipe_op :
  | PIPEPIPE { "||" }
pluseq_op :
  | PLUS EQUAL { "+=" }
dasheq_op :
  | DASH EQUAL { "-=" }
stareq_op :
  | STAR EQUAL { "*=" }
slasheq_op :
  | SLASH EQUAL { "/=" }

infix_op :
  | plus_op
  | dash_op
  | star_op
  | slash_op
  | percent_op
  | is_op
  | eqeq_op
  | noteq_op
  | lcaret_op
  | rcaret_op
  | lesseq_op
  | greatereq_op
  | ampamp_op
  | pipepipe_op
  | pluseq_op
  | dasheq_op
  | stareq_op
  | slasheq_op

infix :
  | lparen infix_op rparen { $2 }

prefix :
  | lparen NOT rparen { "!" }
  | lparen CARET rparen { "^" }

id :
  | [TYPEID dot {$1}]* [ID | TYPEID | infix | prefix] { prerr_string "\nid\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); (mkid (List.append $1 [$2])) (symbol_rloc dyp) }

simple_id :
  | ID { (mkid [$1]) (symbol_rloc dyp) }

type_id :
  | TYPEID { prerr_string "\nid\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); (mkid [$1]) (symbol_rloc dyp) }

id_expr :
  | id { prerr_string "\nsimple_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); Exp.ident ~loc:(symbol_rloc dyp) $1 }

simple_expr :
  | const { Exp.constant ~loc:(symbol_rloc dyp) $1 }
  | lparen tuple_exprs rparen { Exp.tuple ~loc:(symbol_rloc dyp) $2 }
  | lbrace record_exprs rbrace { Exp.record ~loc:(symbol_rloc dyp) $2 }
  | id_expr { $1 }

block_expr :
  | lbrace block_body rbrace { no_record_block $2; Exp.block ~loc:(symbol_rloc dyp) $2 }

block :
  | lbrace block_body rbrace { Exp.block ~loc:(symbol_rloc dyp) $2 }

block_or_expr :
  | block { $1 }
  | expr { no_brace_expr $1; $1 }

lam_args :
  | patterns? { Option.value ~default:[] $1 }

lam_expr :
  | lparen lam_args rparen thickarrow block_or_expr { Exp.lambda ~loc:(symbol_rloc dyp) $2 $5 }
  | ID thickarrow block_or_expr { Exp.lambda ~loc:(symbol_rloc dyp) [Pat.var ~loc:(rhs_loc dyp 1) (mkstr dyp $1)] $3 }

let_expr :
  | LET REC value_binds { Exp.let_ ~loc:(symbol_rloc dyp) Recursive $3 (Exp.block []) }
  | LET value_binds { Exp.let_ ~loc:(symbol_rloc dyp) Nonrecursive $2 (Exp.block []) }

if_expr :
  | IF lparen expr rparen eols? block_or_expr { Exp.if_ ~loc:(symbol_rloc dyp) $3 $6 (Exp.block []) }
  | IF lparen expr rparen eols? block_or_expr ELSE eols? block_or_expr { Exp.if_ ~loc:(symbol_rloc dyp) $3 $6 $9 }

while_expr :
  | WHILE lparen expr rparen block { Exp.while_ ~loc:(symbol_rloc dyp) $3 $5 }

match_branch :
  | pattern thickarrow expr { Mb.mk ~loc:(symbol_rloc dyp) $1 $3 }

match_branches :
  | pipe? match_branch [eols? pipe match_branch {$3}]* { $2::$3 }

match_expr :
  | MATCH lparen expr rparen lbrace match_branches rbrace { Exp.match_ ~loc:(symbol_rloc dyp) $3 $6 }

list_expr :
  | lbrack rbrack { Exp.list ~loc:(symbol_rloc dyp) [] None }
  | lbrack expr [comma expr {$2}]* [comma ELLIPSIS expr {$3}]? rbrack { Exp.list ~loc:(symbol_rloc dyp) ($2::$3) $4 }

array_expr :
  | lbrack rcaret rbrack { Exp.array ~loc:(symbol_rloc dyp) [] }
  | lbrack rcaret expr [comma expr {$2}]* rbrack { Exp.array ~loc:(symbol_rloc dyp) ($3::$4) }

stmt_expr :
  | ASSERT expr { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp ["assert"]) [$2] }
  | FAIL expr { Exp.apply ~loc:(symbol_rloc dyp) (mkid_expr dyp ["fail"]) [$2] }

assign_expr :
  | binop_expr(<pl) eols? GETS eols? expr { no_array_access $1; Exp.assign ~loc:(symbol_rloc dyp) $1 $5 }
  | array_set { $1 }

non_assign_expr :
  | app_expr    { prerr_string "\nexpr_app_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); $1 }
  | prim1_expr  { $1 }
  | simple_expr { prerr_string "\nexpr_simple_expr\n"; when_debug ~n:1 (fun () -> dyp.print_state stderr); $1 }
  | record_get  { $1 }
  | paren_expr  { $1 }
  | block_expr  { $1 }
  | if_expr     { $1 }
  | while_expr  { $1 }
  | match_expr  { $1 }
  | list_expr   { $1 }
  | array_get   { $1 }
  | array_expr  { $1 }

block_body_expr :
  | let_expr    { $1 }
  | expr  { $1 }

block_body_stmt :
  | block_body_expr SEMI eols? { Exp.ignore $1 }
  | block_body_expr eols { $1 }

tuple_exprs :
  | expr comma { [$1] }
  | expr [comma expr {$2}]+ { $1::$2 }

array_get :
  | non_binop_expr lbrack expr rbrack { Exp.array_get ~loc:(symbol_rloc dyp) $1 $3 }

array_set :
  | expr lbrack expr rbrack GETS eols? expr { Exp.array_set ~loc:(symbol_rloc dyp) $1 $3 $7 }

record_get :
  | non_binop_expr dot simple_id { no_uppercase_ident $1; Exp.record_get $1 $3 }

record_field :
  | id colon expr { $1, $3 }

record_pun :
  | ID { mkid [$1] (symbol_rloc dyp), Exp.ident ~loc:(symbol_rloc dyp) (mkid [$1] (symbol_rloc dyp)) }

record_exprs :
  | [record_field | record_pun] [comma [record_field | record_pun] {$2}]* comma? {$1::$2}

block_body :
  | block_body_stmt* block_body_expr SEMI { $1 @ [Exp.ignore $2] }
  | block_body_stmt* block_body_expr { $1 @ [$2] }

file_path :
  | STRING { Location.mkloc $1 (symbol_rloc dyp) }

id_str :
  | ID { Location.mkloc $1 (symbol_rloc dyp) }
  | infix { Location.mkloc $1 (symbol_rloc dyp) }
  | prefix { Location.mkloc $1 (symbol_rloc dyp) }

type_id_str :
  | TYPEID { Location.mkloc $1 (symbol_rloc dyp) }

any_id_str :
  | id_str { $1 }
  | type_id_str { $1 }

export_id_str :
  | id_str { ExportExceptValue $1 }
  | type_id_str { ExportExceptData $1 }

foreign_stmt :
  | FOREIGN WASM id_str colon typ [AS id_str {$2}]? FROM file_path { Val.mk ~loc:(symbol_rloc dyp) ~mod_:$8 ~name:$3 ~alias:$6 ~typ:$5 ~prim:[] }

primitive :
  | ASSERT { Location.mkloc "assert" (symbol_rloc dyp) }
  | FAIL { Location.mkloc "fail" (symbol_rloc dyp) }

primitive_stmt :
  | PRIMITIVE id_str colon typ equal STRING { Val.mk ~loc:(symbol_rloc dyp) ~mod_:{$2 with txt="primitive"} ~name:$2 ~alias:None ~typ:$4 ~prim:[$6] }
  | PRIMITIVE primitive colon typ equal STRING { Val.mk ~loc:(symbol_rloc dyp) ~mod_:{$2 with txt="primitive"} ~name:$2 ~alias:None ~typ:$4 ~prim:[$6] }

toplevel_stmt :
  | LET REC value_binds { Top.let_ Nonexported Recursive $3 }
  | LET value_binds { Top.let_ Nonexported Nonrecursive $2 }
  | expr { Top.expr $1 }
  | import_stmt { Top.import $1 }
  | IMPORT foreign_stmt { Top.foreign ~loc:(symbol_rloc dyp) Nonexported $2 }
  | export_stmt { $1 }
  | primitive_stmt { Top.primitive ~loc:(symbol_rloc dyp) Nonexported $1 }
  | data_declaration { Top.data Nonexported $1 }

toplevel_stmts :
  | toplevel_stmt [eos toplevel_stmt {$2}]* { $1::$2 }

program :
  | eols? toplevel_stmts eos? EOF { make_program $2 }

%%

{
let parse_program t lexbuf =
  Dyp.dypgen_verbose := !Grain_utils.Config.parser_debug_level;
  first_loc := Location.curr lexbuf;
  with_default_loc_src (fun() -> !last_loc) (fun() -> program t lexbuf)

let print_syntax_error =
  let open Printf in
  let open Location in
  function
  | Syntax_error -> begin
      debug_print_state();
      Some(errorf ~loc:(!last_loc) "Syntax error")
    end
  | _ -> None

let () =
  Dyp.dypgen_verbose := !Grain_utils.Config.parser_debug_level;
  Location.register_error_of_exn print_syntax_error
}

%mli {
val parse_program : Lexing.lexbuf -> ((Parsetree.parsed_program * 'a) list)
}
