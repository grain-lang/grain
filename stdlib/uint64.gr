/**
 * @module Uint65: Unsigned utilities for working with the Int64 type.
 * @example import Uint64 from "uint64"
 *
 * @since v0.5.0
 */
import WasmI32 from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"
import Int64 from "int64"

import {
  coerceNumberToInt64 as fromNumber,
  coerceInt64ToNumber as toNumber,
} from "runtime/numbers"

/**
 * @section Conversions: Functions for converting between Numbers and the Int64 type.
 */

/**
 * Converts a Number to an Int64.
 *
 * @param number: The value to convert
 * @returns The Number represented as an Int64
 *
 * @since v0.5.0
 */
export fromNumber

/**
 * Converts an Int64 to a Number.
 *
 * @param value: The value to convert
 * @returns The Int64 represented as a Number
 *
 * @since v0.5.0
 */
export toNumber

/**
 * @section Operations: Mathematical operations for Int64 values.
 */

/**
 * Increments the value by one.
 *
 * @param value: The value to increment
 * @returns The incremented value
 *
 * @since v0.5.0
 */
export let incr = Int64.incr

/**
 * Decrements the value by one.
 *
 * @param value: The value to decrement
 * @returns The decremented value
 *
 * @since v0.5.0
 */
export let decr = Int64.decr

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.5.0
 */
export let add = Int64.add

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.5.0
 */
export let sub = Int64.sub

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.5.0
 */
export let mul = Int64.mul

/**
 * Computes the quotient of its operands using unsigned division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @since v0.5.0
 */
export let div = Int64.divU

/**
 * Computes the quotient of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @since v0.5.0
 */
export let divS = Int64.div

/**
 * Computes the remainder of the division of its operands using unsigned division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @since v0.5.0
 */
export let rem = Int64.remU

/**
 * Computes the remainder of the division of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @since v0.5.0
 */
export let remS = Int64.rem

/**
 * Computes the remainder of the division of the first operand by the second.
 * The result will have the sign of the second operand.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The modulus of its operands
 *
 * @since v0.5.0
 */
export let mod = Int64.mod

/**
 * @section Bitwise operations: Functions for operating on bits of Int64 values.
 */

/**
 * Rotates the bits of the value left by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @since v0.5.0
 */
export let rotl = Int64.rotl

/**
 * Rotates the bits of the value right by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @since v0.5.0
 */
export let rotr = Int64.rotr

/**
 * Shifts the bits of the value left by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The number of bits to shift by
 * @returns The shifted value
 *
 * @since v0.5.0
 */
export let shl = Int64.shl

/**
 * Shifts the bits of the value right by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @since v0.5.0
 */
export let shr = Int64.shrU

/**
 * Shifts the bits of the value right by the given number of bits (signed).
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @since v0.5.0
 */
export let shrS = Int64.shr

/**
 * @section Comparisons: Functions for comparing Int64 values.
 */

/**
 * Checks if the first value is equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let eq = Int64.eq

/**
 * Checks if the first value is not equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is not equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let ne = Int64.ne

/**
 * Checks if the given value is equal to zero.
 *
 * @param value: The value to inspect
 * @returns `true` if the first value is equal to zero or `false` otherwise
 *
 * @since v0.5.0
 */
export let eqz = Int64.eqz

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let lt = Int64.ltU

/**
 * Checks if the first signed value is less than the second signed value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let ltS = Int64.lt

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let gt = Int64.gtU

/**
 * Checks if the first signed value is greater than the second signed value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let gtS = Int64.gt

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let lte = Int64.lteU

/**
 * Checks if the first signed value is less than or equal to the second signed value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let lteS = Int64.lte

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let gte = Int64.gteU

/**
 * Checks if the first signed value is greater than or equal to the second signed value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.5.0
 */
export let gteS = Int64.gte

/**
 * @section Bitwise logic: Boolean operations on the bits of Int64 values.
 */

/**
 * Computes the bitwise NOT of the given value.
 *
 * @param value: The given value
 * @returns Containing the inverted bits of the given value
 *
 * @since v0.5.0
 */
export let lnot = Int64.lnot

/**
 * Computes the bitwise AND (`&`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of both operands are `1`
 *
 * @since v0.5.0
 */
export let land = Int64.land

/**
 * Computes the bitwise OR (`|`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either or both operands are `1`
 *
 * @since v0.5.0
 */
export let lor = Int64.lor

/**
 * Computes the bitwise XOR (`^`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either but not both operands are `1`
 *
 * @since v0.5.0
 */
export let lxor = Int64.lxor

/**
 * Counts the number of leading zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of leading zeros
 *
 * @since v0.5.0
 */
export let clz = Int64.clz

/**
 * Counts the number of trailing zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of trailing zeros
 *
 * @since v0.5.0
 */
export let ctz = Int64.ctz

/**
 * Counts the number of bits set to `1` in the value, also known as a population count.
 *
 * @param value: The value to inspect
 * @returns The amount of 1-bits in its operand
 *
 * @since v0.5.0
 */
export let popcnt = Int64.popcnt
