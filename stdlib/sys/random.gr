/* grainc-flags --no-gc */
/**
 * @module Sys/Random: System access to random values.
 *
 * @example import Random from "sys/random"
 */

import WasmI32, {
  eq as (==),
  ne as (!=)
} from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"
import Wasi from "runtime/wasi"
import { tagSimpleNumber } from "runtime/dataStructures"

/**
 * @section Values: Functions and constants included in the Sys/Random module.
 */

let wasmSafeOk = (val) => {
  Memory.incRef(WasmI32.fromGrain(Ok))
  Memory.incRef(WasmI32.fromGrain(val))
  Ok(val)
}

let wasmSafeErr = (err) => {
  Memory.incRef(WasmI32.fromGrain(Err))
  Memory.incRef(WasmI32.fromGrain(err))
  Err(err)
}

/**
 * Produce a random number. This function can be slow, so it's best to seed a generator if lots of random data is needed.
 *
 * @returns `Ok(num)` of a random number if successful or `Err(exception)` otherwise
 */
export let rec random = () => {
  let buf = Memory.malloc(4n)

  let err = Wasi.random_get(buf, 4n)
  let ret = if (err != Wasi._ESUCCESS) {
    Memory.free(buf)
    wasmSafeErr(Wasi.SystemError(tagSimpleNumber(err)))
  } else {
    let rand = WasmI32.load(buf, 0n)
    Memory.free(buf)
    wasmSafeOk(tagSimpleNumber(rand))
  }
  Memory.decRef(WasmI32.fromGrain(random))
  ret
}
