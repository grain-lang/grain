/**
 * Access to system clocks.
 *
 * @example include "sys/time"
 */

module Time

include "runtime/unsafe/wasmi32"
from WasmI32 use { (+), (==), (!=) }
include "runtime/unsafe/memory"
include "runtime/wasi"
include "runtime/unsafe/errors"
include "runtime/dataStructures"
from DataStructures use { allocateInt64, tagSimpleNumber }

@unsafe
let getClockTime = (clockid, precision) => {
  let int64Ptr = allocateInt64()
  let timePtr = int64Ptr + 8n
  let err = Wasi.clock_time_get(clockid, precision, timePtr)
  if (err != Wasi._ESUCCESS) {
    Memory.free(int64Ptr)
    return Err(Wasi.SystemError(tagSimpleNumber(err)))
  }
  return Ok(WasmI32.toGrain(int64Ptr): Int64)
}

/**
 * Get the current time, in nanoseconds.
 * Time value 0 corresponds with 1970-01-01T00:00:00Z.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
@unsafe
provide let realTime = () => {
  getClockTime(Wasi._CLOCK_REALTIME, 1000N)
}

/**
 * Get the time of the system's high-resolution clock, in nanoseconds.
 * This system clock cannot be adjusted and cannot have negative time jumps.
 * The epoch of this clock is undefined, and thus time value 0 is meaningless.
 * Useful for calculation of precise time intervals.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
@unsafe
provide let monotonicTime = () => {
  getClockTime(Wasi._CLOCK_MONOTONIC, 1N)
}

/**
 * Get the number of nanoseconds elapsed since the process began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
@unsafe
provide let processCpuTime = () => {
  getClockTime(Wasi._CLOCK_PROCESS_CPUTIME, 1N)
}

/**
 * Get the number of nanoseconds elapsed since the thread began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
@unsafe
provide let threadCpuTime = () => {
  getClockTime(Wasi._CLOCK_THREAD_CPUTIME, 1N)
}
