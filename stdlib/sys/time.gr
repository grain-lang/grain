/* grainc-flags --no-gc */
/**
 * @module Sys/Time: Access to system clocks.
 *
 * @example import Time from "sys/time"
 */

import WasmI32, {
  add as (+),
  eq as (==),
  ne as (!=),
} from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"
import Wasi from "runtime/wasi"
import Errors from "runtime/unsafe/errors"
import { allocateInt64, tagSimpleNumber } from "runtime/dataStructures"

/**
 * @section Values: Functions and constants included in the Sys/Time module.
 */

let wasmSafeOk = val => {
  Memory.incRef(WasmI32.fromGrain(Ok))
  Memory.incRef(WasmI32.fromGrain(val))
  Ok(val)
}

let wasmSafeErr = err => {
  Memory.incRef(WasmI32.fromGrain(Err))
  Memory.incRef(WasmI32.fromGrain(err))
  Err(err)
}

let getClockTime = (clockid, precision) => {
  let int64Ptr = allocateInt64()
  let timePtr = int64Ptr + 8n
  let err = Wasi.clock_time_get(clockid, precision, timePtr)
  if (err != Wasi._ESUCCESS) {
    Memory.free(int64Ptr)
    wasmSafeErr(Wasi.SystemError(tagSimpleNumber(err)))
  } else {
    wasmSafeOk(WasmI32.toGrain(int64Ptr): Int64)
  }
}

/**
 * Get the current time, in nanoseconds.
 * Time value 0 corresponds with 1970-01-01T00:00:00Z.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
export let rec realTime = () => {
  let ret = getClockTime(Wasi._CLOCK_REALTIME, 1000N)
  Memory.decRef(WasmI32.fromGrain(realTime))
  ret
}

/**
 * Get the time of the system's high-resolution clock, in nanoseconds.
 * This system clock cannot be adjusted and cannot have negative time jumps.
 * The epoch of this clock is undefined, and thus time value 0 is meaningless.
 * Useful for calculation of precise time intervals.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
export let rec monotonicTime = () => {
  let ret = getClockTime(Wasi._CLOCK_MONOTONIC, 1N)
  Memory.decRef(WasmI32.fromGrain(monotonicTime))
  ret
}

/**
 * Get the number of nanoseconds elapsed since the process began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
export let rec processCpuTime = () => {
  let ret = getClockTime(Wasi._CLOCK_PROCESS_CPUTIME, 1N)
  Memory.decRef(WasmI32.fromGrain(processCpuTime))
  ret
}

/**
 * Get the number of nanoseconds elapsed since the thread began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
export let rec threadCpuTime = () => {
  let ret = getClockTime(Wasi._CLOCK_THREAD_CPUTIME, 1N)
  Memory.decRef(WasmI32.fromGrain(threadCpuTime))
  ret
}
