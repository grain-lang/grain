/**
 * @module Number: Utilities for working with numbers.
 * @example import Number from "number"
 * @since v0.4.0
 */

import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import WasmF32 from "runtime/unsafe/wasmf32"
import WasmF64 from "runtime/unsafe/wasmf64"
import Memory from "runtime/unsafe/memory"
import {
  coerceNumberToWasmF64,
  reducedInteger,
  isFloat,
  isBoxedNumber,
} from "runtime/numbers"
import { parseInt } from "runtime/stringUtils"
import { newFloat64, newInt64 } from "runtime/dataStructures"
import Tags from "runtime/unsafe/tags"

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.4.0
 */
export let add = (+)

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.4.0
 */
export let sub = (-)

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.4.0
 */
export let mul = (*)

/**
 * Computes the quotient of its operands.
 *
 * @param x: The dividend
 * @param y: The divisor
 * @returns The quotient of the two operands
 *
 * @since v0.4.0
 */
export let div = (/)

/**
 * Computes the square root of its operand.
 *
 * @param x: The number to square root
 * @returns The square root of the operand
 *
 * @since v0.4.0
 */
@unsafe
export let sqrt = (x: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let x = WasmI32.fromGrain(x)
  let sqrtd = WasmF64.sqrt(xval)
  if (!isFloat(x) && WasmF64.eq(sqrtd, WasmF64.trunc(sqrtd))) {
    WasmI32.toGrain(reducedInteger(WasmI64.truncF64S(sqrtd))): Number
  } else {
    WasmI32.toGrain(newFloat64(sqrtd)): Number
  }
}

/**
 * Determine the positivity or negativity of a Number.
 *
 * @param x: The number to inspect
 * @returns `-1` if the number is negative, `1` if positive, or `0` otherwise; signedness of `-0.0` is preserved
 *
 * @example Number.sign(-10000) == -1
 * @example Number.sign(222222) == 1
 * @example Number.sign(0) == 0
 */
export let sign = x => {
  match (x) {
    x when x < 0 => -1,
    x when x > 0 => 1,
    _ => 0 * x,
  }
}

/**
 * Returns the smaller of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The smaller of the two operands
 *
 * @since v0.4.0
 */
export let min = (x: Number, y: Number) => if (y > x) x else y

/**
 * Returns the larger of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The larger of the two operands
 *
 * @since v0.4.0
 */
export let max = (x: Number, y: Number) => if (x > y) x else y

/**
 * Rounds its operand up to the next largest integer.
 *
 * @param x: The number to round
 * @returns The next largest integer of the operand
 *
 * @since v0.4.0
 */
@unsafe
export let ceil = (x: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let ceiling = WasmI64.truncF64S(WasmF64.ceil(xval))
  WasmI32.toGrain(reducedInteger(ceiling)): Number
}

/**
 * Rounds its operand down to the largest integer less than the operand.
 *
 * @param x: The number to round
 * @returns The previous integer of the operand
 *
 * @since v0.4.0
 */
@unsafe
export let floor = (x: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let floored = WasmI64.truncF64S(WasmF64.floor(xval))
  WasmI32.toGrain(reducedInteger(floored)): Number
}

/**
 * Returns the integer part of its operand, removing any fractional value.
 *
 * @param x: The number to truncate
 * @returns The integer part of the operand
 *
 * @since v0.4.0
 */
@unsafe
export let trunc = (x: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let trunced = WasmI64.truncF64S(xval)
  WasmI32.toGrain(reducedInteger(trunced)): Number
}

/**
 * Returns its operand rounded to its nearest integer.
 *
 * @param x: The number to round
 * @returns The nearest integer to the operand
 *
 * @since v0.4.0
 */
@unsafe
export let round = (x: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let rounded = WasmI64.truncF64S(WasmF64.nearest(xval))
  WasmI32.toGrain(reducedInteger(rounded)): Number
}

/**
 * Returns the absolute value of a number. That is, it returns `x` if `x` is positive or zero and the negation of `x` if `x` is negative.
 *
 * @param x: The operand
 * @returns The absolute value of the operand
 *
 * @since v0.4.0
 */
export let abs = (x: Number) => if (0 > x) x * -1 else x

/**
 * Returns the negation of its operand.
 *
 * @param x: The number to negate
 * @returns The negated operand
 *
 * @since v0.4.0
 */
export let neg = (x: Number) => x * -1

/**
 * Checks if a number is finite.
 * All values are finite exept for floating point NaN, infinity or negative infinity.
 *
 * @param x: The number to check
 * @returns `true` if the value is finite or `false` otherwise
 *
 * @since v0.4.0
 */
@unsafe
export let isFinite = (x: Number) => {
  let asPtr = WasmI32.fromGrain(x)
  if (isBoxedNumber(asPtr)) {
    // Boxed numbers can have multiple subtypes, of which float32 and float64 can be infinite.
    let tag = WasmI32.load(asPtr, 4n)
    if (WasmI32.eq(tag, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)) {
      // uses the fact that all finite floats minus themselves are zero
      // (NaN - NaN == NaN, inf - inf == NaN,
      //  -inf - -inf == NaN, inf - -inf == inf, -inf - inf == -inf)
      let wf64 = WasmF64.load(asPtr, 8n)
      WasmF64.eq(WasmF64.sub(wf64, wf64), 0.W)
    } else if (WasmI32.eq(tag, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG)) {
      let wf32 = WasmF32.load(asPtr, 8n)
      WasmF32.eq(WasmF32.sub(wf32, wf32), 0.w)
    } else {
      // Neither rational numbers nor boxed integers can be infinite or NaN.
      // Grain doesn't allow creating a rational with denominator of zero either.
      true
    }
  } else {
    // Simple numbers are integers and cannot be infinite.
    true
  }
}

/**
 * Checks if a number contains the NaN value (Not A Number).
 * Only boxed floating point numbers can contain NaN.
 *
 * @param x: The number to check
 * @returns `true` if the value is NaN, otherwise `false`
 *
 * @since v0.4.0
 */
@unsafe
export let isNaN = (x: Number) => {
  let asPtr = WasmI32.fromGrain(x)
  if (isBoxedNumber(asPtr)) {
    // Boxed numbers can have multiple subtypes, of which float32 and float64 can be NaN.
    let tag = WasmI32.load(asPtr, 4n)
    if (WasmI32.eq(tag, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)) {
      // uses the fact that NaN is the only number not equal to itself
      let wf64 = WasmF64.load(asPtr, 8n)
      WasmF64.ne(wf64, wf64)
    } else if (WasmI32.eq(tag, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG)) {
      let wf32 = WasmF32.load(asPtr, 8n)
      WasmF32.ne(wf32, wf32)
    } else {
      // Neither rational numbers nor boxed integers can be infinite or NaN.
      // Grain doesn't allow creating a rational with denominator of zero either.
      false
    }
  } else {
    // Simple numbers are integers and cannot be NaN.
    false
  }
}

/**
 * Checks if a number is infinite, that is either of floating point positive or negative infinity.
 * Note that this function is not the exact opposite of isFinite(Number) in that it doesn't return true for NaN.
 *
 * @param x: The number to check
 * @returns `true` if the value is infinite or `false` otherwise
 *
 * @since v0.4.0
 */
@unsafe
export let isInfinite = (x: Number) => {
  // The following code is equivalent to (!isFinite(x) && !isNaN(x)),
  // so see those functions to understand what's going on here.
  let asPtr = WasmI32.fromGrain(x)
  if (isBoxedNumber(asPtr)) {
    let tag = WasmI32.load(asPtr, 4n)
    if (WasmI32.eq(tag, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)) {
      let wf64 = WasmF64.load(asPtr, 8n)
      WasmF64.ne(WasmF64.sub(wf64, wf64), 0.W) && WasmF64.eq(wf64, wf64)
    } else if (WasmI32.eq(tag, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG)) {
      let wf32 = WasmF32.load(asPtr, 8n)
      WasmF32.ne(WasmF32.sub(wf32, wf32), 0.w) && WasmF32.eq(wf32, wf32)
    } else {
      false
    }
  } else {
    false
  }
}

/**
 * Parses a string representation of an integer into a `Number` using the
 * specified radix (also known as a number system "base").
 *
 * If the string has a radix prefix (i.e. "0x"/"0X", "0o"/"0O", or "0b"/"0B"
 * for radixes 16, 8, or 2 respectively), the supplied radix is ignored in
 * favor of the prefix. Underscores that appear in the numeric portion of the
 * input are ignored.
 *
 * @param input: The string to parse
 * @param radix: The number system base to use when parsing the input string
 * @returns `Ok(value)` containing the parsed number on a successful parse or `Err(msg)` containing an error message string otherwise
 *
 * @since v0.4.5
 */
export parseInt
