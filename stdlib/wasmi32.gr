
// Conversions
export primitive ofGrain : a -> WasmI32 = "@wasm.ofGrain"
export primitive toGrain : WasmI32 -> a = "@wasm.toGrain"

// WebAssembly Memory Instructions
export primitive load : (WasmI32, WasmI32) -> WasmI32 = "@wasm.load_i32"
export primitive store : (WasmI32, WasmI32, WasmI32) -> Void = "@wasm.store_i32"

// WebAssembly Unary Instructions
export primitive clz : WasmI32 -> WasmI32 = "@wasm.clz_i32"
export primitive ctz : WasmI32 -> WasmI32 = "@wasm.ctz_i32"
export primitive popcnt : WasmI32 -> WasmI32 = "@wasm.popcnt_i32"
export primitive eqz : WasmI32 -> Bool = "@wasm.eq_z_i32"

// WebAssembly Binary Instructions
export primitive add : (WasmI32, WasmI32) -> WasmI32 = "@wasm.add_i32"
export primitive sub : (WasmI32, WasmI32) -> WasmI32 = "@wasm.sub_i32"
export primitive mul : (WasmI32, WasmI32) -> WasmI32 = "@wasm.mul_i32"
export primitive divS : (WasmI32, WasmI32) -> WasmI32 = "@wasm.div_s_i32"
export primitive divU : (WasmI32, WasmI32) -> WasmI32 = "@wasm.div_u_i32"
export primitive remS : (WasmI32, WasmI32) -> WasmI32 = "@wasm.rem_s_i32"
export primitive remU : (WasmI32, WasmI32) -> WasmI32 = "@wasm.rem_u_i32"
export primitive and : (WasmI32, WasmI32) -> WasmI32 = "@wasm.and_i32"
export primitive or : (WasmI32, WasmI32) -> WasmI32 = "@wasm.or_i32"
export primitive xor : (WasmI32, WasmI32) -> WasmI32 = "@wasm.xor_i32"
export primitive shl : (WasmI32, WasmI32) -> WasmI32 = "@wasm.shl_i32"
export primitive shrU : (WasmI32, WasmI32) -> WasmI32 = "@wasm.shr_u_i32"
export primitive shrS : (WasmI32, WasmI32) -> WasmI32 = "@wasm.shr_s_i32"
export primitive rotl : (WasmI32, WasmI32) -> WasmI32 = "@wasm.rot_l_i32"
export primitive rotr : (WasmI32, WasmI32) -> WasmI32 = "@wasm.rot_r_i32"
export primitive eq : (WasmI32, WasmI32) -> Bool = "@wasm.eq_i32"
export primitive ne : (WasmI32, WasmI32) -> Bool = "@wasm.ne_i32"
export primitive ltS : (WasmI32, WasmI32) -> Bool = "@wasm.lt_s_i32"
export primitive ltU : (WasmI32, WasmI32) -> Bool = "@wasm.lt_u_i32"
export primitive leS : (WasmI32, WasmI32) -> Bool = "@wasm.le_s_i32"
export primitive leU : (WasmI32, WasmI32) -> Bool = "@wasm.le_u_i32"
export primitive gtS : (WasmI32, WasmI32) -> Bool = "@wasm.gt_s_i32"
export primitive gtU : (WasmI32, WasmI32) -> Bool = "@wasm.gt_u_i32"
export primitive geS : (WasmI32, WasmI32) -> Bool = "@wasm.ge_s_i32"
export primitive geU : (WasmI32, WasmI32) -> Bool = "@wasm.ge_u_i32"

// Utilities
export let print = (val) => {
  print(toString(shl(val, 1w)) ++ "w")
}
