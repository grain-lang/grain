/**
 * @module Array: Utilities for working with arrays.
 * @example import Array from "array"
 */

import WasmI32 from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"
import { allocateArray, tagSimpleNumber } from "runtime/dataStructures"
import Exception from "runtime/exception"

/**
 * @section Values: Functions for working with the Array data type.
 */

let _ARRAY_LENGTH_OFFSET = 4n
let _ARRAY_START_OFFSET = 8n

@disableGC
let initLength = (length) => {
  let length = WasmI32.fromGrain(length)
  if (WasmI32.eqz(WasmI32.and(length, 1n))) {
    throw Exception.InvalidArgument("Length argument must be an integer")
  }
  let length = WasmI32.shrS(length, 1n)
  if (WasmI32.ltS(length, 0n)) {
    throw Exception.InvalidArgument("Length argument must be non-negative")
  }
  length
}

/**
 * Returns the length of the input array.
 *
 * @param array: The array to inspect
 */
@disableGC
export let length = (array) => {
  let ptr = WasmI32.fromGrain(array: Array<a>)
  tagSimpleNumber(WasmI32.load(ptr, _ARRAY_LENGTH_OFFSET))
}

/**
 * Creates a new array of the specified length with each element being
 * initialized with the given value.
 *
 * @param length: The length of the new array
 * @param item: The value to store at each index
 * @returns The new array
 *
 * @example Array.make(5, "foo") // [> "foo", "foo", "foo", "foo", "foo"]
 */
@disableGC
export let make : (Number, a) -> Array<a>  = (length, item) => {
  let length = initLength(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(WasmI32.add(array, i), Memory.incRef(WasmI32.fromGrain(item)), _ARRAY_START_OFFSET)
  }
  WasmI32.toGrain(array)
}

/**
 * Creates a new array of the specified length where each element is
 * initialized with the result of an initializer function. The initializer
 * is called with the index of each array element.
 *
 * @param length: The length of the new array
 * @param fn: The initializer function to call with each index, where the value returned will be used to initialize the element
 * @returns The new array
 *
 * @example Array.init(5, n => n + 3) // [> 8, 9, 10, 11, 12]
 */
@disableGC
export let init : (Number, Number -> a) -> Array<a> = (length, fn) => {
  let length = initLength(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  let mut index = 0
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(WasmI32.add(array, i), WasmI32.fromGrain(fn(index)), _ARRAY_START_OFFSET)
    index += 1
  }
  WasmI32.toGrain(array)
}

/**
 * An alias for normal syntactic array access, i.e. `array[n]`.
 *
 * Retrieves the element from the array at the specified index.
 * A negative index is treated as an offset from the end of the array.
 *
 * @param index: The index to access
 * @param array: The array to access
 * @returns The element from the array
 */
export let get = (index, array) => {
  array[index]
}

/**
 * An alias for normal syntactic array set, i.e. `array[n] = value`.
 *
 * Sets the element at the specified index in the array to the new value.
 * A negative index is treated as an offset from the end of the array.
 *
 * @param index: The index to update
 * @param value: The value to store
 * @param array: The array to update
 */
export let set = (index, value, array) => {
  array[index] = value
}

/**
 * Creates a new array with the items the first array, followed by
 * the items of the second array. This does not modify the arguments.
 *
 * @param array1: The array containing elements to appear first
 * @param array2: The array containing elements to appear second
 * @returns The new array containing elements from `array1` followed by elements from `array2`
 */
export let append = (array1, array2) => {
  let len1 = length(array1)
  let len2 = length(array2)

  init(len1 + len2, n => {
    if (n < len1) {
      array1[n]
    } else {
      array2[n - len1]
    }
  })
}

/**
 * Creates a single array containing the elements of all arrays in the
 * provided list. Does not modify any of the input arguments.
 *
 * @param arrays: A list containing all arrays to combine
 * @returns The new array
 */
export let concat = (arrays) => {
  // This function is slightly verbose to avoid depending on the List stdlib.

  let rec findLength = (arrays, acc) => {
    match (arrays) {
      [fst, ...rest] => findLength(rest, acc + length(fst)),
      [] => acc
    }
  }

  let mut offset = 0
  let mut arrs = arrays

  let rec next = (index) => {
    let array = match (arrs) {
      [fst, ..._] => fst,
      [] => fail "end of arrays list"
    }
    if (index - offset == length(array)) {
      offset += length(array)
      arrs = match (arrs) {
        [_, ...rest] => rest,
        [] => fail "end of arrays list"
      }
      next(index)
    } else {
      array[index - offset]
    }
  }

  init(findLength(arrays, 0), next)
}

/**
 * Produces a shallow copy of the input array. The new array contains the
 * same elements as the original.
 *
 * @param array: The array to copy
 * @returns The new array containing the elements from the input
 */
export let copy = (array) => {
  init(length(array), n => array[n])
}

/**
 * Iterates an array, calling an iterator function on each element.
 *
 * @param fn: The iterator function to call with each element
 * @param array: The array to iterate
 */
export let forEach = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count])
    count = incr(count)
  }
}

/**
 * Iterates an array, calling an iterator function with each element.
 * Also passes the index as the second argument to the function.
 *
 * @param fn: The iterator function to call with each element
 * @param array: The array to iterate
 */
export let forEachi = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count], count)
    count = incr(count)
  }
}

/**
 * Produces a new array initialized with the results of a mapper function
 * called on each element of the input array.
 *
 * @param fn: The mapper function to call on each element, where the value returned will be used to initialize the element in the new array
 * @param array: The array to iterate
 * @returns The new array with mapped values
 */
export let map = (fn, array) => {
  let length = length(array)
  init(length, (i) => {
    fn(array[i])
  })
}

/**
 * Produces a new array initialized with the results of a mapper function
 * called on each element of the input array and its index.
 *
 * @param fn: The mapper function to call on each element, where the value returned will be used to initialize the element in the new array
 * @param array: The array to iterate
 * @returns The new array with mapped values
 */
export let mapi = (fn, array) => {
  let length = length(array)
  init(length, (index) => {
    fn(array[index], index)
  })
}

/**
 * Combines all elements of an array using a reducer function,
 * starting from the "head", or left side, of the array.
 *
 * In `Array.reduce(fn, initial, array)`, `fn` is called with
 * an accumulator and each element of the array, and returns
 * a new accumulator. The final value is the last accumulator
 * returned. The accumulator starts with value `initial`.
 *
 * @param fn: The reducer function to call on each element, where the value returned will be the next accumulator value
 * @param initial: The initial value to use for the accumulator on the first iteration
 * @param array: The array to iterate
 * @returns The final accumulator returned from `fn`
 *
 * @example Array.reduce((a, b) => a + b, 0, [> 1, 2, 3]) // 6
 */
export let reduce = (fn, initial, array) => {
  let mut acc = initial
  forEach((el) => acc = fn(acc, el), array)
  acc
}

/**
 * Combines all elements of an array using a reducer function,
 * starting from the "head", or left side, of the array.
 *
 * In `Array.reducei(fn, initial, array)`, `fn` is called with
 * an accumulator, each element of the array, and the index
 * of that element, and returns a new accumulator. The final
 * value is the last accumulator returned. The accumulator
 * starts with value `initial`.
 *
 * @param fn: The reducer function to call on each element, where the value returned will be the next accumulator value
 * @param initial: The initial value to use for the accumulator on the first iteration
 * @param array: The array to iterate
 * @returns The final accumulator returned from `fn`
 */
export let reducei = (fn, initial, array) => {
  let mut acc = initial
  forEachi((el, index) => acc = fn(acc, el, index), array)
  acc
}

/**
 * Produces a new array by calling a function on each element
 * of the input array. Each iteration produces an intermediate
 * array, which are all appended to produce a "flattened" array
 * of all results.
 *
 * @param fn: The function to be called on each element, where the value returned will be an array that gets appended to the new array
 * @param array: The array to iterate
 * @returns The new array
 */
export let flatMap = (fn, array) => {
  reduce((result, value) => append(result, fn(value)), [>], array)
}

/**
 * Checks that the given condition is satisfied for all
 * elements in the input array.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to check
 * @returns `true` if all elements satify the condition, otherwise `false`
 */
export let every = (fn, array) => {
  reduce((acc, value) => { acc && fn(value) }, true, array)
}

/**
 * Checks that the given condition is satisfied **at least
 * once** by an item in the input array.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns `true` if one or more elements satify the condition, otherwise `false`
 */
export let some = (fn, array) => {
  reduce((acc, value) => { acc || fn(value) }, false, array)
}

/**
 * Replaces all elements in an array with the new value provided.
 *
 * @param value: The value replacing each element
 * @param array: The array to update
 */
export let fill = (value, array) => {
  let length = length(array)
  forEachi((_, index) => {
    array[index] = value
  }, array)
  void
}

/**
 * Replaces all elements in the provided index range in the array
 * with the new value provided. Fails if the index is out-of-bounds.
 *
 * @param value: The value replacing each element between the indexes
 * @param start: The index to begin replacement
 * @param stop: The (exclusive) index to end replacement
 * @param array: The array to update
 */
export let fillRange = (value, start, stop, array) => {
  let length = length(array)
  let startIndex = if (start < 0) length + start else start
  let stopIndex = if (stop < 0) length + stop else stop

  if (startIndex > length) {
    fail "The start index is outside the array"
  }
  if (startIndex > stopIndex) {
    fail "The start index cannot be higher than the stop index"
  }

  let mut index = startIndex
  while (index < stopIndex && index < length) {
    array[index] = value
    index += 1
  }
  void
}

/**
 * Creates a new array with all elements in reverse order.
 *
 * @param array: The array to reverse
 * @returns The new array
 */
export let reverse = (array) => {
  let len = length(array)
  init(len, (index) => {
    let last = len - index - 1
    array[last]
  })
}

/**
 * Converts the input array to a list.
 *
 * @param array: The array to convert
 * @returns The list containing all elements from the array
 */
export let toList = (array) => {
  let rec buildList = (acc, index) => {
    let index = index - 1
    if (index < 0) {
      acc
    } else {
      buildList([array[index], ...acc], index)
    }
  }
  buildList([], length(array))
}

/**
 * Converts the input list to an array.
 *
 * @param list: The list to convert
 * @returns The array containing all elements from the list
 */
export let fromList = (list) => {
  let rec listLength = (list, acc) => {
    match (list) {
      [_, ...rest] => listLength(rest, acc + 1),
      [] => acc
    }
  }

  let mut lst = list
  let rec next = (index) => {
    match (lst) {
      [fst, ...rest] => {
        lst = rest
        fst
      },
      [] => next(index)
    }
  }
  init(listLength(list, 0), next)
}

/**
 * Checks if the value is an element of the input array.
 * Uses the generic `==` structural equality operator.
 *
 * @param search: The value to compare
 * @param array: The array to iterate
 * @returns `true` if the value exists in the array, otherwise `false`
 */
export let contains = (search, array) => {
  // TODO: This should use recursion when we can pattern match arrays
  let len = length(array)
  let mut index = 0
  let mut found = false
  while ((!found) && (index < len)) {
    found = (array[index] == search)
    index += 1
  }
  found
}

/**
 * Finds the first element in an array that satifies the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to search
 * @returns `Some(element)` containing the first value found and `None` otherwise
 */
export let find = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedItem = array[0]
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedItem = array[count]
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedItem)
    }
  }
}

/**
 * Finds the first index in an array where the element satifies the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to search
 * @returns `Some(index)` containing the index of the first element found and `None` otherwise
 */
export let findIndex = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedIndex = 0
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedIndex = count
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedIndex)
    }
  }
}

/**
 * Combines two arrays into a Cartesian product of tuples containing
 * all ordered pairs `(a, b)`.
 *
 * @param array1: The array to provide values for the first tuple element
 * @param array2: The array to provide values for the second tuple element
 * @returns The new array containing all pairs of `(a, b)`
 */
export let product = (array1, array2) => {
  let lenA = length(array1)
  let lenB = length(array2)
  let mut indexA = -1

  init(lenA * lenB, n => {
    if(n % lenB == 0){
      indexA = incr(indexA)
    } else {
      indexA = indexA
    }
    (array1[indexA], array2[n % lenB])
  })
}

/**
 * Counts the number of elements in an array that satisfy the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The total number of elements that satisfy the condition
 */
export let count = (fn, array) => {
  let length = length(array)
  let mut position = 0
  let mut count = 0
  while (position < length) {
    if(fn(array[position])) {
      count = incr(count)
      position = incr(position)
    } else {
      position = incr(position)
    }
  }
  count
}

/**
 * Counts the number of elements in an array that satisfy the
 * given condition. Also passes the index to the function.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The total number of elements that satisfy the condition
 */
export let counti = (fn, array) => {
  let length = length(array)
  let mut position = 0
  let mut count = 0
  while (position < length) {
    if(fn(array[position], position)) {
      count = incr(count)
      position = incr(position)
    } else {
      position = incr(position)
    }
  }
  count
}

/**
 * Produces a new array by calling a function on each element of
 * the input array and only including it in the result array if the element satisfies
 * the condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The new array containing elements where `fn` returned `true`
 */
export let filter = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEach((el) => {
    if (fn(el)) {
      filtered[position] = el
      position = incr(position)
    }
  }, array)
  init(position, (index) => {
    filtered[index]
  })
}

/**
 * Produces a new array by calling a function on each element of
 * the input array and only including it in the result array if the element satisfies
 * the condition. Also passes the index to the function.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The new array containing elements where `fn` returned `true`
 */
export let filteri = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEachi((el, index) => {
    if (fn(el, index)) {
      filtered[position] = el
      position = incr(position)
    }
  }, array)
  init(position, (index) => {
    filtered[index]
  })
}

/**
 * Produces a new array with any duplicates removed.
 * Uses the generic `==` structural equality operator.
 *
 * @param array: The array to filter
 * @returns The new array with only unique values
 */
export let unique = (array) => {
  filteri(
    (el, index) => findIndex(value => value == el, array) == Some(index),
    array
  )
}

/**
 * Produces a new array filled with tuples of elements from both given arrays.
 * The first tuple will contain the first item of each array, the second tuple
 * will contain the second item of each array, and so on.
 *
 * Calling this function with arrays of different sizes will throw an error.
 *
 * @param array1: The array to provide values for the first tuple element
 * @param array2: The array to provide values for the second tuple element
 * @returns The new array containing indexed pairs of `(a, b)`
 */
export let zip = (array1, array2) => {
  let len = length(array1)
  if (len != length(array2)) {
    fail "arguments to zip must be same length"
  } else {
    init(len, n => {
      (array1[n], array2[n])
    })
  }
}

/**
 * Produces two arrays by splitting apart an array of tuples.
 *
 * @param array: The array of tuples to split
 * @returns An array containing all elements from the first tuple element, and an array containing all elements from the second tuple element
 */
export let unzip = (array) => {
  let lenArr = length(array)

  let a = init(lenArr, n => {
    let (fst, _) = array[n]; fst
  })

  let b = init(lenArr, n => {
    let (_, snd) = array[n]; snd
  })

  (a, b)
}

/**
 * Concatenates an array of strings into a single string, separated by a separator string.
 *
 * @param separator: The separator to insert between items in the string
 * @param items: The input strings
 * @returns The concatenated string
 */
export let join = (separator: String, items: Array<String>) => {
  let iter = (acc, str) => {
    match (acc) {
      None => Some(str),
      Some(prev) => Some(prev ++ separator ++ str)
    }
  }
  match(reduce(iter, None, items)) {
    None => "",
    Some(s) => s,
  }
}

/**
 * Slices an array given zero-based start and end indexes. The value
 * at the end index will not be included in the result.
 *
 * If either index is a negative number, it will be treated as a reverse index from
 * the end of the array. e.g. `slice(1, -1, [> 'a', 'b', 'c']) == [> 'b']`.
 *
 * @param startIndex: The index of the array where the slice will begin (inclusive)
 * @param endIndex: The index of the array where the slice will end (exclusive)
 * @param array: The array to be sliced
 * @returns The subset of the array that was sliced
 */
export let slice = (startIndex, endIndex, array) => {
  let arrayLength = length(array)

  let wrapNegativeIndex = idx => {
    if (idx >= 0) {
      idx
    } else {
      arrayLength + idx
    }
  }

  let startIndex = wrapNegativeIndex(startIndex)
  let endIndex = wrapNegativeIndex(endIndex)
  // Ensure we aren't working with an `end` value that is too big
  let endIndex = if (endIndex > arrayLength) {
    arrayLength
  } else {
    endIndex
  }

  let newLength = endIndex - startIndex;
  if (newLength < 0) {
    [>]
  } else if (newLength > arrayLength) {
    array
  } else {
    init(newLength, n => array[startIndex + n])
  }
}
