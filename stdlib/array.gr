export primitive length : Array<a> -> Number = "@array.length"
export primitive make : (Number, a) -> Array<a> = "@array.make"
export primitive init : (Number, Number -> a) -> Array<a> = "@array.init"

export let get = (index, array) => {
  array[index]
}

export let set = (index, value, array) => {
  array[index] := value
}

export let append = (array1, array2) => {
  let len1 = length(array1)
  let len2 = length(array2)

  init(len1 + len2, n => {
    if (n < len1) {
      array1[n]
    } else {
      array2[n - len1]
    }
  })
}

export let concat = (arrays) => {
  // This function is slightly verbose to avoid depending on the List stdlib.

  let rec findLength = (arrays, acc) => {
    match (arrays) {
      [fst, ...rest] => findLength(rest, acc + length(fst)),
      [] => acc
    }
  }

  let mut offset = 0
  let mut arrs = arrays

  let rec next = (index) => {
    let array = match (arrs) {
      [fst, ..._] => fst,
      [] => fail "end of arrays list"
    }
    if (index - offset == length(array)) {
      offset += length(array)
      arrs = match (arrs) {
        [_, ...rest] => rest,
        [] => fail "end of arrays list"
      }
      next(index)
    } else {
      array[index - offset]
    }
  }

  init(findLength(arrays, 0), next)
}

export let copy = (array) => {
  init(length(array), n => array[n])
}

export let forEach = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count])
    count = incr(count)
  }
}

export let forEachi = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count], count)
    count = incr(count)
  }
}

export let map = (fn, array) => {
  let length = length(array)
  init(length, (i) => {
    fn(array[i])
  })
}

export let mapi = (fn, array) => {
  let length = length(array)
  init(length, (index) => {
    fn(array[index], index)
  })
}

export let reduce = (fn, initial, array) => {
  let mut acc = initial;
  forEach((el) => acc = fn(acc, el), array);
  acc
}

export let flatMap = (fn, array) => {
  reduce((result, value) => append(result, fn(value)), [>], array)
}

export let every = (fn, array) => {
  reduce((acc, value) => { acc && fn(value) }, true, array)
}

export let some = (fn, array) => {
  reduce((acc, value) => { acc || fn(value) }, false, array)
}

export let fill = (value, array) => {
  let length = length(array)
  forEachi((_, index) => {
    array[index] := value
  }, array)
  void
}

export let fillRange = (value, start, stop, array) => {
  let length = length(array)
  let startIndex = if (start < 0) length + start else start
  let stopIndex = if (stop < 0) length + stop else stop
  
  if (startIndex > length) {
    ignore(fail 'The start index is outside the array')
  }
  if (startIndex > stopIndex) {
    ignore(fail 'The start index cannot be higher than the stop index')
  }

  let mut index = startIndex
  while (index < stopIndex && index < length) {
    ignore(array[index] := value)
    index += 1
  }
  void
}

export let toList = (array) => {
  let rec buildList = (acc, index) => {
    let index = index - 1
    if (index < 0) {
      acc
    } else {
      buildList([array[index], ...acc], index)
    }
  }
  buildList([], length(array))
}

export let fromList = (list) => {
  let rec listLength = (list, acc) => {
    match (list) {
      [_, ...rest] => listLength(rest, acc + 1),
      [] => acc
    }
  }

  let mut lst = list
  let rec next = (index) => {
    match (lst) {
      [fst, ...rest] => {
        lst = rest
        fst
      },
      [] => next(index)
    }
  }
  init(listLength(list, 0), next)
}

// TODO: This should use recursion when we can pattern match arrays
export let contains = (search, array) => {
  let len = length(array);
  let mut index = 0;
  let mut found = false;
  while ((!found) && (index < len)) {
    found = (array[index] == search);
    index += 1;
  }
  found
}

export let find = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedItem = array[0]
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedItem = array[count]
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedItem)
    }
  }
}

export let findIndex = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedIndex = 0
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedIndex = count
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedIndex)
    }
  }
}

export let product = (a, b) => {
  let lenA = length(a)
  let lenB = length(b)
  let mut indexA = -1

  init(lenA * lenB, n => {
    if(n % lenB == 0){
      indexA = incr(indexA)
    } else {
      indexA = indexA
    }
    (a[indexA], b[n % lenB])
  })
}

export let count = (fn, array) => {
  let length = length(array)
  let mut position = 0
  let mut count = 0
  while (position < length) {
    if(fn(array[position])) {
      count = incr(count)
      position = incr(position) 
    } else {
      position = incr(position) 
    }
  }
  count
}
