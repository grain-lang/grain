import WasmI32 from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"
import { allocateArray, tagSimpleNumber } from "runtime/dataStructures"
import Exception from "runtime/exception"

let _ARRAY_LENGTH_OFFSET = 4n
let _ARRAY_START_OFFSET = 8n

@disableGC
let initLength = (length) => {
  let length = WasmI32.fromGrain(length)
  if (WasmI32.eqz(WasmI32.and(length, 1n))) {
    throw Exception.InvalidArgument("Length argument must be an integer")
  }
  let length = WasmI32.shrS(length, 1n)
  if (WasmI32.ltS(length, 0n)) {
    throw Exception.InvalidArgument("Length argument must be non-negative")
  }
  length
}

@disableGC
export let length = (array) => {
  let ptr = WasmI32.fromGrain(array: Array<a>)
  tagSimpleNumber(WasmI32.load(ptr, _ARRAY_LENGTH_OFFSET))
}

@disableGC
export let make : (Number, a) -> Array<a>  = (length, item) => {
  let length = initLength(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(WasmI32.add(array, i), Memory.incRef(WasmI32.fromGrain(item)), _ARRAY_START_OFFSET)
  }
  WasmI32.toGrain(array)
}

@disableGC
export let init : (Number, Number -> a) -> Array<a> = (length, f) => {
  let length = initLength(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  let mut index = 0
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(WasmI32.add(array, i), WasmI32.fromGrain(f(index)), _ARRAY_START_OFFSET)
    index += 1
  }
  WasmI32.toGrain(array)
}

export let get = (index, array) => {
  array[index]
}

export let set = (index, value, array) => {
  array[index] = value
}

export let append = (array1, array2) => {
  let len1 = length(array1)
  let len2 = length(array2)

  init(len1 + len2, n => {
    if (n < len1) {
      array1[n]
    } else {
      array2[n - len1]
    }
  })
}

export let concat = (arrays) => {
  // This function is slightly verbose to avoid depending on the List stdlib.

  let rec findLength = (arrays, acc) => {
    match (arrays) {
      [fst, ...rest] => findLength(rest, acc + length(fst)),
      [] => acc
    }
  }

  let mut offset = 0
  let mut arrs = arrays

  let rec next = (index) => {
    let array = match (arrs) {
      [fst, ..._] => fst,
      [] => fail "end of arrays list"
    }
    if (index - offset == length(array)) {
      offset += length(array)
      arrs = match (arrs) {
        [_, ...rest] => rest,
        [] => fail "end of arrays list"
      }
      next(index)
    } else {
      array[index - offset]
    }
  }

  init(findLength(arrays, 0), next)
}

export let copy = (array) => {
  init(length(array), n => array[n])
}

export let forEach = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count])
    count = incr(count)
  }
}

export let forEachi = (fn, array) => {
  let length = length(array)
  let mut count = 0
  while (count < length) {
    fn(array[count], count)
    count = incr(count)
  }
}

export let map = (fn, array) => {
  let length = length(array)
  init(length, (i) => {
    fn(array[i])
  })
}

export let mapi = (fn, array) => {
  let length = length(array)
  init(length, (index) => {
    fn(array[index], index)
  })
}

export let reduce = (fn, initial, array) => {
  let mut acc = initial
  forEach((el) => acc = fn(acc, el), array)
  acc
}

export let reducei = (fn, initial, array) => {
  let mut acc = initial
  forEachi((el, index) => acc = fn(acc, el, index), array)
  acc
}

export let flatMap = (fn, array) => {
  reduce((result, value) => append(result, fn(value)), [>], array)
}

export let every = (fn, array) => {
  reduce((acc, value) => { acc && fn(value) }, true, array)
}

export let some = (fn, array) => {
  reduce((acc, value) => { acc || fn(value) }, false, array)
}

export let fill = (value, array) => {
  let length = length(array)
  forEachi((_, index) => {
    array[index] = value
  }, array)
  void
}

export let fillRange = (value, start, stop, array) => {
  let length = length(array)
  let startIndex = if (start < 0) length + start else start
  let stopIndex = if (stop < 0) length + stop else stop

  if (startIndex > length) {
    fail "The start index is outside the array"
  }
  if (startIndex > stopIndex) {
    fail "The start index cannot be higher than the stop index"
  }

  let mut index = startIndex
  while (index < stopIndex && index < length) {
    array[index] = value
    index += 1
  }
  void
}

export let reverse = (array) => {
  let len = length(array)
  init(len, (index) => {
    let last = len - index - 1
    array[last]
  })
}

export let toList = (array) => {
  let rec buildList = (acc, index) => {
    let index = index - 1
    if (index < 0) {
      acc
    } else {
      buildList([array[index], ...acc], index)
    }
  }
  buildList([], length(array))
}

export let fromList = (list) => {
  let rec listLength = (list, acc) => {
    match (list) {
      [_, ...rest] => listLength(rest, acc + 1),
      [] => acc
    }
  }

  let mut lst = list
  let rec next = (index) => {
    match (lst) {
      [fst, ...rest] => {
        lst = rest
        fst
      },
      [] => next(index)
    }
  }
  init(listLength(list, 0), next)
}

// TODO: This should use recursion when we can pattern match arrays
export let contains = (search, array) => {
  let len = length(array)
  let mut index = 0
  let mut found = false
  while ((!found) && (index < len)) {
    found = (array[index] == search)
    index += 1
  }
  found
}

export let find = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedItem = array[0]
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedItem = array[count]
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedItem)
    }
  }
}

export let findIndex = (fn, array) => {
  let length = length(array)
  if(length == 0){
    None
  } else {
    let mut count = 0
    let mut matching = false
    let mut matchedIndex = 0
    while (count < length) {
      if(fn(array[count])) {
        matching = true
        matchedIndex = count
        count = length
      } else {
        count = incr(count)
      }
    }
    if(!matching) {
      None
    } else {
      Some(matchedIndex)
    }
  }
}

export let product = (a, b) => {
  let lenA = length(a)
  let lenB = length(b)
  let mut indexA = -1

  init(lenA * lenB, n => {
    if(n % lenB == 0){
      indexA = incr(indexA)
    } else {
      indexA = indexA
    }
    (a[indexA], b[n % lenB])
  })
}

export let count = (fn, array) => {
  let length = length(array)
  let mut position = 0
  let mut count = 0
  while (position < length) {
    if(fn(array[position])) {
      count = incr(count)
      position = incr(position)
    } else {
      position = incr(position)
    }
  }
  count
}

export let counti = (fn, array) => {
  let length = length(array)
  let mut position = 0
  let mut count = 0
  while (position < length) {
    if(fn(array[position], position)) {
      count = incr(count)
      position = incr(position)
    } else {
      position = incr(position)
    }
  }
  count
}

export let filter = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEach((el) => {
    if (fn(el)) {
      filtered[position] = el
      position = incr(position)
    }
  }, array)
  init(position, (index) => {
    filtered[index]
  })
}

export let filteri = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEachi((el, index) => {
    if (fn(el, index)) {
      filtered[position] = el
      position = incr(position)
    }
  }, array)
  init(position, (index) => {
    filtered[index]
  })
}

export let unique = (array) => {
  filteri(
    (el, index) => findIndex(value => value == el, array) == Some(index),
    array
  )
}

export let zip = (a, b) => {
  let len = length(a)
  if (len != length(b)) {
    fail "arguments to zip must be same length"
  } else {
    init(len, n => {
      (a[n], b[n])
    })
  }
}

export let unzip = (array) => {
  let lenArr = length(array)

  let a = init(lenArr, n => {
    let (fst, _) = array[n]; fst
  })

  let b = init(lenArr, n => {
    let (_, snd) = array[n]; snd
  })

  (a, b)
}

// @param separator: String - The separator to insert between items in the string
// @param items: Array<String> - The input strings
// @returns String
export let join = (separator: String, items: Array<String>) => {
  let iter = (acc, str) => {
    match (acc) {
      None => Some(str),
      Some(prev) => Some(prev ++ separator ++ str)
    }
  }
  match(reduce(iter, None, items)) {
    None => "",
    Some(s) => s,
  }
}

/**
 * Slices an array given zero-based start and end indexes. The value
 * at the end index will not be included in the result.
 *
 * If either index is a negative number, it will be treated as a reverse index from
 * the end of the array. e.g. slice(1, -1, [> 'a', 'b', 'c']) == [> 'b'].
 *
 * @param startIndex: Number The index of the array where the slice will begin (inclusive)
 * @param endIndex: Number The index of the array where the slice will end (exclusive)
 * @param array: Array<a> The array to be sliced
 * @returns Array<a> The subset of the array that was sliced
 */
export let slice = (startIndex, endIndex, array) => {
  let arrayLength = length(array)

  let wrapNegativeIndex = idx => {
    if (idx >= 0) {
      idx
    } else {
      arrayLength + idx
    }
  }

  let startIndex = wrapNegativeIndex(startIndex)
  let endIndex = wrapNegativeIndex(endIndex)
  // Ensure we aren't working with an `end` value that is too big
  let endIndex = if (endIndex > arrayLength) {
    arrayLength
  } else {
    endIndex
  }

  let newLength = endIndex - startIndex;
  if (newLength < 0) {
    [>]
  } else if (newLength > arrayLength) {
    array
  } else {
    init(newLength, n => array[startIndex + n])
  }
}
