/**
 * Utilities for working with arrays.
 *
 * @example include "array"
 *
 * @since v0.2.0
 * @history v0.1.0: Originally named `arrays`
 * @history v0.2.0: Renamed to `array`
 */

module Array

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/memory"
include "runtime/dataStructures"
from DataStructures use { allocateArray, tagSimpleNumber }
include "runtime/exception"
include "runtime/numbers"
from Numbers use { coerceNumberToWasmI32 }

@unsafe
let mut _ARRAY_LENGTH_OFFSET = 4n
@unsafe
let mut _ARRAY_START_OFFSET = 8n

@unsafe
let checkLength = length => {
  let ptr = WasmI32.fromGrain(length)
  if (WasmI32.eqz(WasmI32.and(ptr, 1n))) {
    throw Exception.InvalidArgument("Length argument must be an integer")
  }
  let len = WasmI32.shrS(ptr, 1n)
  if (WasmI32.ltS(len, 0n)) {
    throw Exception.InvalidArgument("Length argument must be non-negative")
  }
}

/**
 * Provides the length of the input array.
 *
 * @param array: The array to inspect
 * @returns The number of elements in the array
 *
 * @example Array.length([> 1, 2, 3, 4, 5]) == 5
 * @since v0.1.0
 */
@unsafe
provide let length = array => {
  let ptr = WasmI32.fromGrain(array: Array<a>)
  tagSimpleNumber(WasmI32.load(ptr, _ARRAY_LENGTH_OFFSET))
}

/**
 * Creates a new array of the specified length with each element being
 * initialized with the given value.
 *
 * @param length: The length of the new array
 * @param item: The value to store at each index
 * @returns The new array
 *
 * @throws InvalidArgument(String): When `length` is not an integer
 * @throws InvalidArgument(String): When `length` is negative
 *
 * @example Array.make(5, "foo") // [> "foo", "foo", "foo", "foo", "foo"]
 *
 * @since v0.1.0
 */
@unsafe
provide let make: (Number, a) -> Array<a> = (length: Number, item: a) => {
  let lengthArg = length
  checkLength(length)
  let length = coerceNumberToWasmI32(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(
      WasmI32.add(array, i),
      Memory.incRef(WasmI32.fromGrain(item)),
      _ARRAY_START_OFFSET
    )
  }
  WasmI32.toGrain(array): Array<a>
}

/**
 * Creates a new array of the specified length where each element is
 * initialized with the result of an initializer function. The initializer
 * is called with the index of each array element.
 *
 * @param length: The length of the new array
 * @param fn: The initializer function to call with each index, where the value returned will be used to initialize the element
 * @returns The new array
 *
 * @throws InvalidArgument(String): When `length` is not an integer
 * @throws InvalidArgument(String): When `length` is negative
 *
 * @example Array.init(5, n => n + 3) // [> 3, 4, 5, 6, 7]
 *
 * @since v0.1.0
 */
@unsafe
provide let init: (Number, Number -> a) -> Array<a> =
  (
    length: Number,
    fn: Number -> a,
  ) => {
  checkLength(length)
  let length = coerceNumberToWasmI32(length)
  let byteLength = WasmI32.mul(length, 4n)
  let array = allocateArray(length)
  let mut index = 0n
  for (let mut i = 0n; WasmI32.ltS(i, byteLength); i = WasmI32.add(i, 4n)) {
    WasmI32.store(
      WasmI32.add(array, i),
      Memory.incRef(WasmI32.fromGrain(fn(tagSimpleNumber(index)))),
      _ARRAY_START_OFFSET
    )
    index = WasmI32.add(index, 1n)
  }
  WasmI32.toGrain(array): Array<a>
}

/**
 * An alias for normal syntactic array access, i.e. `array[n]`.
 *
 * Retrieves the element from the array at the specified index.
 * A negative index is treated as an offset from the end of the array.
 *
 * @param index: The index to access
 * @param array: The array to access
 * @returns The element from the array
 *
 * @throws IndexOutOfBounds: When `index` is not an integer
 * @throws IndexOutOfBounds: When `index` is out of bounds
 *
 * @example Array.get(1,[> 1, 2, 3, 4, 5]) == 2
 *
 * @since v0.1.0
 * @history v0.2.0: Argument order changed to data-last
 */
provide let get = (index, array) => {
  array[index]
}

/**
 * An alias for normal syntactic array set, i.e. `array[n] = value`.
 *
 * Sets the element at the specified index in the array to the new value.
 * A negative index is treated as an offset from the end of the array.
 *
 * @param index: The index to update
 * @param value: The value to store
 * @param array: The array to update
 *
 * @throws IndexOutOfBounds: When `index` is not an integer
 * @throws IndexOutOfBounds: When `index` is out of bounds
 *
 * @example Array.set(1, 9, [> 1, 2, 3, 4, 5]) == [> 1, 9, 3, 4, 5]
 *
 * @since v0.1.0
 * @history v0.2.0: Argument order changed to data-last
 */
provide let set = (index, value, array) => {
  array[index] = value
}

/**
 * Creates a new array with the elements of the first array followed by
 * the elements of the second array. This does not modify the arguments.
 *
 * @param array1: The array containing elements to appear first
 * @param array2: The array containing elements to appear second
 * @returns The new array containing elements from `array1` followed by elements from `array2`
 *
 * @throws InvalidArgument(String): When the combined length of the two arrays is not an integer
 *
 * @example Array.append([> 1, 2], [> 3, 4, 5]) == [> 1, 2, 3, 4, 5]
 *
 * @since v0.1.0
 */
provide let append = (array1, array2) => {
  let len1 = length(array1)
  let len2 = length(array2)

  init(len1 + len2, n => {
    if (n < len1) {
      array1[n]
    } else {
      array2[n - len1]
    }
  })
}

/**
 * Creates a single array containing the elements of all arrays in the
 * provided list. Does not modify any of the input arguments.
 *
 * @param arrays: A list containing all arrays to combine
 * @returns The new array
 *
 * @throws InvalidArgument(String): When the combined length of all arrays is not an integer
 *
 * @example Array.concat([[> 1, 2], [> 3, 4], [> 5, 6]]) == [> 1, 2, 3, 4, 5, 6]
 *
 * @since v0.1.0
 */
provide let concat = arrays => {
  // This function is slightly verbose to avoid depending on the List stdlib.

  let rec findLength = (arrays, acc) => {
    match (arrays) {
      [fst, ...rest] => findLength(rest, acc + length(fst)),
      [] => acc,
    }
  }

  let mut offset = 0
  let mut arrs = arrays

  let rec next = index => {
    let array = match (arrs) {
      [fst, ..._] => fst,
      [] => fail "end of arrays list",
    }
    if (index - offset == length(array)) {
      offset += length(array)
      arrs = match (arrs) {
        [_, ...rest] => rest,
        [] => fail "end of arrays list",
      }
      next(index)
    } else {
      array[index - offset]
    }
  }

  init(findLength(arrays, 0), next)
}

/**
 * Produces a shallow copy of the input array. The new array contains the
 * same elements as the original.
 *
 * @param array: The array to copy
 * @returns The new array containing the elements from the input
 *
 * @since v0.1.0
 */
provide let copy = array => {
  init(length(array), n => array[n])
}

/**
 * Iterates an array a given number of times, calling an iterator function on each element.
 *
 * @param fn: The iterator function to call with each element
 * @param n: The number of times to iterate the given array
 * @param array: The array to iterate
 *
 * @since v0.4.4
 */
provide let cycle = (fn, n, array) => {
  let length = length(array)
  for (let mut iteration = 0; iteration < n; iteration += 1) {
    for (let mut count = 0; count < length; count += 1) {
      fn(array[count]): Void
    }
  }
}

/**
 * Iterates an array, calling an iterator function on each element.
 *
 * @param fn: The iterator function to call with each element
 * @param array: The array to iterate
 *
 * @since v0.1.0
 * @history v0.2.0: Argument order changed to data-last
 */
provide let forEach = (fn, array) => {
  let length = length(array)
  for (let mut count = 0; count < length; count += 1) {
    fn(array[count]): Void
  }
}

/**
 * Iterates an array, calling an iterator function on each element.
 * Also passes the index as the second argument to the function.
 *
 * @param fn: The iterator function to call with each element
 * @param array: The array to iterate
 *
 * @since v0.1.0
 * @history v0.2.0: Argument order changed to data-last
 */
provide let forEachi = (fn, array) => {
  let length = length(array)
  for (let mut count = 0; count < length; count += 1) {
    fn(array[count], count): Void
  }
}

/**
 * Produces a new array initialized with the results of a mapper function
 * called on each element of the input array.
 *
 * @param fn: The mapper function to call on each element, where the value returned will be used to initialize the element in the new array
 * @param array: The array to iterate
 * @returns The new array with mapped values
 *
 * @since v0.1.0
 * @history v0.2.0: Argument order changed to data-last
 */
provide let map = (fn, array) => {
  let length = length(array)
  init(length, i => {
    fn(array[i])
  })
}

/**
 * Produces a new array initialized with the results of a mapper function
 * called on each element of the input array and its index.
 *
 * @param fn: The mapper function to call on each element, where the value returned will be used to initialize the element in the new array
 * @param array: The array to iterate
 * @returns The new array with mapped values
 *
 * @since v0.1.0
 */
provide let mapi = (fn, array) => {
  let length = length(array)
  init(length, index => {
    fn(array[index], index)
  })
}

/**
 * Combines all elements of an array using a reducer function,
 * starting from the "head", or left side, of the array.
 *
 * In `Array.reduce(fn, initial, array)`, `fn` is called with
 * an accumulator and each element of the array, and returns
 * a new accumulator. The final value is the last accumulator
 * returned. The accumulator starts with value `initial`.
 *
 * @param fn: The reducer function to call on each element, where the value returned will be the next accumulator value
 * @param initial: The initial value to use for the accumulator on the first iteration
 * @param array: The array to iterate
 * @returns The final accumulator returned from `fn`
 *
 * @example Array.reduce((a, b) => a + b, 0, [> 1, 2, 3]) // 6
 *
 * @since v0.3.0
 */
provide let reduce = (fn, initial, array) => {
  let mut acc = initial
  forEach(el => acc = fn(acc, el), array)
  acc
}

/**
 * Combines all elements of an array using a reducer function,
 * starting from the "end", or right side, of the array.
 *
 * In `Array.reduceRight(fn, initial, array)`, `fn` is called with
 * each element of the array and an accumulator, and returns
 * a new accumulator. The final value is the last accumulator
 * returned. The accumulator starts with value `initial`.
 *
 * @param fn: The reducer function to call on each element, where the value returned will be the next accumulator value
 * @param initial: The initial value to use for the accumulator on the first iteration
 * @param array: The array to iterate
 * @returns The final accumulator returned from `fn`
 *
 * @example Array.reduceRight((a, b) => b ++ a, "", [> "baz", "bar", "foo"]) // "foobarbaz"
 *
 * @since v0.5.3
 */
provide let reduceRight = (fn, initial, array) => {
  let mut acc = initial
  for (let mut i = length(array) - 1; i >= 0; i -= 1) {
    acc = fn(array[i], acc)
  }
  acc
}

/**
 * Combines all elements of an array using a reducer function,
 * starting from the "head", or left side, of the array.
 *
 * In `Array.reducei(fn, initial, array)`, `fn` is called with
 * an accumulator, each element of the array, and the index
 * of that element, and returns a new accumulator. The final
 * value is the last accumulator returned. The accumulator
 * starts with value `initial`.
 *
 * @param fn: The reducer function to call on each element, where the value returned will be the next accumulator value
 * @param initial: The initial value to use for the accumulator on the first iteration
 * @param array: The array to iterate
 * @returns The final accumulator returned from `fn`
 *
 * @since v0.3.0
 */
provide let reducei = (fn, initial, array) => {
  let mut acc = initial
  forEachi((el, index) => acc = fn(acc, el, index), array)
  acc
}

/**
 * Produces a new array by calling a function on each element
 * of the input array. Each iteration produces an intermediate
 * array, which are all appended to produce a "flattened" array
 * of all results.
 *
 * @param fn: The function to be called on each element, where the value returned will be an array that gets appended to the new array
 * @param array: The array to iterate
 * @returns The new array
 *
 * @throws InvalidArgument(String): When the combined length of all arrays is not an integer
 *
 * @since v0.3.0
 */
provide let flatMap = (fn, array) => {
  let nested = map(fn, array)
  let arrLen = reduce((acc, arr) => acc + length(arr), 0, nested)
  let mut outerI = 0
  let mut innerI = 0
  init(arrLen, i => {
    if (innerI >= length(nested[outerI])) {
      innerI = 0
      outerI += 1
    }
    let res = nested[outerI][innerI]
    innerI += 1
    res
  })
}

/**
 * Checks that the given condition is satisfied for all
 * elements in the input array.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to check
 * @returns `true` if all elements satify the condition or `false` otherwise
 *
 * @since v0.3.0
 */
provide let every = (fn, array) => {
  let len = length(array)
  let mut all = true
  for (let mut index = 0; all && index < len; index += 1) {
    all = fn(array[index])
  }
  all
}

/**
 * Checks that the given condition is satisfied **at least
 * once** by an element in the input array.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns `true` if one or more elements satify the condition or `false` otherwise
 *
 * @since v0.3.0
 */
provide let some = (fn, array) => {
  let len = length(array)
  let mut found = false
  for (let mut index = 0; !found && index < len; index += 1) {
    found = fn(array[index])
  }
  found
}

/**
 * Replaces all elements in an array with the new value provided.
 *
 * @param value: The value replacing each element
 * @param array: The array to update
 *
 * @since v0.2.0
 */
provide let fill = (value, array) => {
  let length = length(array)
  forEachi((_, index) => {
    array[index] = value
  }, array)
  void
}

/**
 * Replaces all elements in the provided index range in the array
 * with the new value provided. Fails if the index is out-of-bounds.
 *
 * @param value: The value replacing each element between the indexes
 * @param start: The index to begin replacement
 * @param stop: The (exclusive) index to end replacement
 * @param array: The array to update
 *
 * @throws Failure(String): When the start index is out of bounds
 * @throws Failure(String): When the start index is greater then the stop index
 *
 * @since v0.2.0
 */
provide let fillRange = (value, start, stop, array) => {
  let length = length(array)
  let startIndex = if (start < 0) length + start else start
  let stopIndex = if (stop < 0) length + stop else stop

  if (startIndex > length) {
    fail "The start index is outside the array"
  }
  if (startIndex > stopIndex) {
    fail "The start index cannot be higher than the stop index"
  }

  let mut index = startIndex
  for (
    let mut index = startIndex;
    index < stopIndex && index < length;
    index += 1
  ) {
    array[index] = value
  }
  void
}

/**
 * Creates a new array with all elements in reverse order.
 *
 * @param array: The array to reverse
 * @returns The new array
 *
 * @since v0.4.0
 */
provide let reverse = array => {
  let len = length(array)
  init(len, index => {
    let last = len - index - 1
    array[last]
  })
}

/**
 * Converts the input array to a list.
 *
 * @param array: The array to convert
 * @returns The list containing all elements from the array
 *
 * @since v0.1.0
 */
provide let toList = array => {
  let rec buildList = (acc, index) => {
    let index = index - 1
    if (index < 0) {
      acc
    } else {
      buildList([array[index], ...acc], index)
    }
  }
  buildList([], length(array))
}

/**
 * Converts the input list to an array.
 *
 * @param list: The list to convert
 * @returns The array containing all elements from the list
 *
 * @since v0.1.0
 */
provide let fromList = list => {
  let rec listLength = (list, acc) => {
    match (list) {
      [_, ...rest] => listLength(rest, acc + 1),
      [] => acc,
    }
  }

  let mut lst = list
  let rec next = index => {
    match (lst) {
      [fst, ...rest] => {
        lst = rest
        fst
      },
      [] => next(index),
    }
  }
  init(listLength(list, 0), next)
}

/**
 * Checks if the value is an element of the input array.
 * Uses the generic `==` structural equality operator.
 *
 * @param search: The value to compare
 * @param array: The array to inspect
 * @returns `true` if the value exists in the array or `false` otherwise
 *
 * @since v0.2.0
 */
provide let contains = (search, array) => {
  // TODO(#189): This should be rewritten to use recursion and pattern matching
  let len = length(array)
  for (let mut i = 0; i < len; i += 1) {
    if (array[i] == search) return true
  }
  return false
}

/**
 * Finds the first element in an array that satifies the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to search
 * @returns `Some(element)` containing the first value found or `None` otherwise
 *
 * @since v0.2.0
 */
provide let find = (fn, array) => {
  let len = length(array)
  for (let mut i = 0; i < len; i += 1) {
    if (fn(array[i])) {
      return Some(array[i])
    }
  }
  return None
}

/**
 * Finds the first index in an array where the element satifies the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to search
 * @returns `Some(index)` containing the index of the first element found or `None` otherwise
 *
 * @since v0.2.0
 */
provide let findIndex = (fn, array) => {
  let len = length(array)
  for (let mut i = 0; i < len; i += 1) {
    if (fn(array[i])) return Some(i)
  }
  return None
}

/**
 * Combines two arrays into a Cartesian product of tuples containing
 * all ordered pairs `(a, b)`.
 *
 * @param array1: The array to provide values for the first tuple element
 * @param array2: The array to provide values for the second tuple element
 * @returns The new array containing all pairs of `(a, b)`
 *
 * @throws InvalidArgument(String): When the multiplied array lengths are not an integer
 *
 * @since v0.2.0
 */
provide let product = (array1: Array<a>, array2: Array<b>) => {
  let lenA = length(array1)
  let lenB = length(array2)
  let mut indexA = -1

  init(lenA * lenB, n => {
    if (n % lenB == 0) {
      indexA += 1
    }
    (array1[indexA], array2[n % lenB])
  })
}

/**
 * Counts the number of elements in an array that satisfy the given condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The total number of elements that satisfy the condition
 *
 * @since v0.2.0
 */
provide let count = (fn, array) => {
  let len = length(array)
  let mut n = 0
  for (let mut i = 0; i < len; i += 1) {
    if (fn(array[i])) {
      n += 1
    }
  }
  n
}

/**
 * Counts the number of elements in an array that satisfy the
 * given condition. Also passes the index to the function.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The total number of elements that satisfy the condition
 *
 * @since v0.3.0
 */
provide let counti = (fn, array) => {
  let len = length(array)
  let mut n = 0
  for (let mut i = 0; i < len; i += 1) {
    if (fn(array[i], i)) {
      n += 1
    }
  }
  n
}

/**
 * Produces a new array by calling a function on each element of
 * the input array and only including it in the result array if the element satisfies
 * the condition.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The new array containing elements where `fn` returned `true`
 *
 * @since v0.3.0
 */
provide let filter = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEach(el => {
    if (fn(el)) {
      filtered[position] = el
      position += 1
    }
  }, array)
  init(position, index => {
    filtered[index]
  })
}

/**
 * Produces a new array by calling a function on each element of
 * the input array and only including it in the result array if the element satisfies
 * the condition. Also passes the index to the function.
 *
 * @param fn: The function to call on each element, where the returned value indicates if the element satisfies the condition
 * @param array: The array to iterate
 * @returns The new array containing elements where `fn` returned `true`
 *
 * @since v0.3.0
 */
provide let filteri = (fn, array) => {
  let filtered = copy(array)
  let mut position = 0
  forEachi((el, index) => {
    if (fn(el, index)) {
      filtered[position] = el
      position += 1
    }
  }, array)
  init(position, index => {
    filtered[index]
  })
}

/**
 * Produces a new array with any duplicates removed.
 * Uses the generic `==` structural equality operator.
 *
 * @param array: The array to filter
 * @returns The new array with only unique values
 *
 * @since v0.3.0
 */
provide let unique = array => {
  filteri((el, index) =>
    findIndex(value => value == el, array) == Some(index), array)
}

/**
 * Produces a new array filled with tuples of elements from both given arrays.
 * The first tuple will contain the first item of each array, the second tuple
 * will contain the second item of each array, and so on.
 *
 * @param array1: The array to provide values for the first tuple element
 * @param array2: The array to provide values for the second tuple element
 * @returns The new array containing indexed pairs of `(a, b)`
 *
 * @throws IndexOutOfBounds: When the arrays have different sizes
 *
 * @since v0.4.0
 * @history v0.6.0: Support zipping arrays of different sizes
 */
provide let zip = (array1: Array<a>, array2: Array<b>) => {
  let len = length(array1)
  let len2 = length(array2)
  let len = if (len > len2) len2 else len
  init(len, n => {
    (array1[n], array2[n])
  })
}

/**
 * Produces a new array filled with elements defined by applying a function on
 * pairs from both given arrays. The first element will contain the result of
 * applying the function to the first elements of each array, the second element
 * will contain the result of applying the function to the second elements of
 * each array, and so on.
 *
 * Calling this function with arrays of different sizes will cause the returned
 * array to have the length of the smaller array.
 *
 * @param fn: The function to apply to pairs of elements
 * @param array1: The array whose elements will each be passed to the function as the first argument
 * @param array2: The array whose elements will each be passed to the function as the second argument
 * @returns The new array containing elements derived from applying the function to pairs of input array elements
 *
 * @throws IndexOutOfBounds: When the arrays have different sizes
 *
 * @example Array.zipWith((a, b) => a + b, [> 1, 2, 3], [> 4, 5, 6]) // [> 5, 7, 9]
 * @example Array.zipWith((a, b) => a * b, [> 1, 2, 3], [> 4, 5]) // [> 4, 10]
 *
 * @since v0.5.3
 */
provide let zipWith = (fn, array1: Array<a>, array2: Array<b>) => {
  let len1 = length(array1)
  let len2 = length(array2)
  let minLen = if (len1 > len2) len2 else len1
  init(minLen, index => {
    fn(array1[index], array2[index])
  })
}

/**
 * Produces two arrays by splitting apart an array of tuples.
 *
 * @param array: The array of tuples to split
 * @returns An array containing all elements from the first tuple element, and an array containing all elements from the second tuple element
 *
 * @since v0.4.0
 */
provide let unzip = array => {
  let lenArr = length(array)

  let a = init(lenArr, n => {
    let (fst, _) = array[n]
    fst
  })

  let b = init(lenArr, n => {
    let (_, snd) = array[n]
    snd
  })

  (a, b)
}

/**
 * Concatenates an array of strings into a single string, separated by a separator string.
 *
 * @param separator: The separator to insert between items in the string
 * @param items: The input strings
 * @returns The concatenated string
 *
 * @since v0.4.0
 */
provide let join = (separator: String, items: Array<String>) => {
  let iter = (acc, str) => {
    match (acc) {
      None => Some(str),
      Some(prev) => Some(prev ++ separator ++ str),
    }
  }
  match (reduce(iter, None, items)) {
    None => "",
    Some(s) => s,
  }
}

/**
 * A simple helper function to convert a negative array index
 * number to its positive positional equivalent.
 */
let wrapNegativeIndex = (arrLen, idx) => {
  if (idx >= 0) {
    idx
  } else {
    arrLen + idx
  }
}

/**
 * Slices an array given zero-based start and end indexes. The value
 * at the end index will not be included in the result.
 *
 * If either index is a negative number, it will be treated as a reverse index from
 * the end of the array. e.g. `slice(1, -1, [> 'a', 'b', 'c']) == [> 'b']`.
 *
 * @param startIndex: The index of the array where the slice will begin (inclusive)
 * @param endIndex: The index of the array where the slice will end (exclusive)
 * @param array: The array to be sliced
 * @returns The subset of the array that was sliced
 *
 * @since v0.4.0
 */
provide let slice = (startIndex, endIndex, array) => {
  let arrayLength = length(array)
  let startIndex = wrapNegativeIndex(arrayLength, startIndex)
  let endIndex = wrapNegativeIndex(arrayLength, endIndex)
  // Ensure we aren't working with an `end` value that is too big
  let endIndex = if (endIndex > arrayLength) {
    arrayLength
  } else {
    endIndex
  }

  let newLength = endIndex - startIndex
  if (newLength < 0) {
    [>]
  } else if (newLength > arrayLength) {
    array
  } else {
    init(newLength, n => array[startIndex + n])
  }
}

/**
 * Sorts an array in-place.
 *
 * Ordering is calculated using a comparator function which takes two array elements and must return 0 if both are equal, a positive number if the first is greater, and a negative number if the first is smaller.
 * @param comp: The comparator function used to indicate sort order
 * @param array: The array to be sorted
 * @since v0.4.5
 */
provide let sort = (comp, array) => {
  let partition = (low, high) => {
    let pivot = array[high]
    let mut i = low - 1
    for (let mut j = low; j < high; j += 1) {
      if (comp(array[j], pivot) < 0) {
        i += 1
        let temp = array[i]
        array[i] = array[j]
        array[j] = temp
      }
    }
    let temp = array[i + 1]
    array[i + 1] = array[high]
    array[high] = temp
    i + 1
  }
  let rec quicksort = (low, high) => {
    if (low < high) {
      let partitionIndex = partition(low, high)
      quicksort(partitionIndex + 1, high)
      quicksort(low, partitionIndex - 1)
    }
  }
  let len = length(array)
  quicksort(0, len - 1)
}

/**
 * Rotates array elements in place by the specified amount to the left, such
 * that the `n`th element becomes the first in the array.
 *
 * If value is negative, array elements will be rotated by the
 * specified amount to the right. See examples.
 *
 * @param n: The number of elements to rotate by
 * @param arr: The array to be rotated
 *
 * @example let array = [> 1, 2, 3, 4, 5]; rotate(2, arr); arr == [> 3, 4, 5, 1, 2]
 * @example let array = [> 1, 2, 3, 4, 5]; rotate(-1, arr); arr == [> 5, 1, 2, 3, 4]
 * @since v0.4.5
 *
 * @history v0.6.0: Behavior changed from right-rotation to left-rotation
 */
provide let rotate = (n, arr) => {
  let rec gcd = (a, b) => {
    if (b == 0) {
      a
    } else {
      gcd(b, a % b)
    }
  }

  let arrLen = length(arr)
  if (arrLen > 0) {
    let k = n % arrLen
    let mut j = 0
    for (let mut i = 0; i < gcd(arrLen, k); i += 1) {
      j = i
      let temp = arr[i]
      while (true) {
        let d = (j + k) % arrLen
        if (d == i) {
          break
        }
        let newVal = arr[d]
        arr[j] = newVal
        j = d
      }
      arr[j] = temp
    }
  }
}
