/**
 * Utilities for working with the Float32 type.
 *
 * @example from "float32" include Float32
 *
 * @example 4.0f
 * @example -4.0f
 * @example Infinityf
 * @example NaNf
 *
 * @since v0.2.0
 */
module Float32

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
use WasmF32.{ (+), (-), (*), (/), (<), (<=), (>), (>=) }
from "runtime/dataStructures" include DataStructures
use DataStructures.{ newFloat32 }

from "runtime/numbers" include Numbers
use Numbers.{
  coerceNumberToFloat32 as fromNumber,
  coerceFloat32ToNumber as toNumber,
}
from "runtime/math/trig" include Trig
use Trig.{ sin, cos, tan }

@unsafe
let _VALUE_OFFSET = 4n

/**
 * Infinity represented as a Float32 value.
 * This is an alternative to the `Infinityf` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let infinity = Infinityf

/**
 * NaN (Not a Number) represented as a Float32 value.
 * This is an alternative to the `NaNf` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let nan = NaNf

/**
 * Pi represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let pi = 3.1415927f

/**
 * Tau represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let tau = 6.2831853f

/**
 * Euler's number represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let e = 2.7182817f

provide { fromNumber, toNumber }

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @example
 * use Float32.{ (+) }
 * assert 1.0f + 1.0f == 2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `add`
 */
@unsafe
provide let (+) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv + yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @example
 * use Float32.{ (-) }
 * assert 1.0f - 1.0f == 0.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `sub`
 */
@unsafe
provide let (-) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv - yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @example
 * use Float32.{ (*) }
 * assert 2.0f * 2.0f == 4.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `mul`
 */
@unsafe
provide let (*) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv * yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the quotient of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of the two operands
 *
 * @example
 * use Float32.{ (/) }
 * assert 10.0f / 4.0f == 2.5f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `div`
 */
@unsafe
provide let (/) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv / yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the exponentiation of the given base and power.
 *
 * @param base: The base float
 * @param power: The exponent float
 * @returns The base raised to the given power
 *
 * @example
 * use Float64.{ (**) }
 * assert 2.0f ** 2.0f == 4.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let (**) = (base: Float32, power: Float32) => {
  let basev = WasmF32.load(WasmI32.fromGrain(base), _VALUE_OFFSET)
  let powerv = WasmF32.load(WasmI32.fromGrain(power), _VALUE_OFFSET)
  let value = Numbers.powf(
    WasmF64.promoteF32(basev),
    WasmF64.promoteF32(powerv)
  )
  let ptr = newFloat32(WasmF32.demoteF64(value))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (<) }
 * assert 1.0f < 2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lt`
 */
@unsafe
provide let (<) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (>) }
 * assert 2.0f > 1.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gt`
 */
@unsafe
provide let (>) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (<=) }
 * assert -1.0f <= 1.0f
 *
 * @example
 * use Float32.{ (<=) }
 * assert -2.0f <= -2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lte`
 */
@unsafe
provide let (<=) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (>=) }
 * assert 4.0f >= 1.0f
 *
 * @example
 * use Float32.{ (>=) }
 * assert 3.0f >= 3.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gte`
 */
@unsafe
provide let (>=) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv >= yv
}

/**
 * Checks if a float is finite.
 * All values are finite exept for NaN, infinity or negative infinity.
 *
 * @param x: The number to check
 * @returns `true` if the value is finite or `false` otherwise
 *
 * @example Float32.isFinite(0.5f)
 * @example Float32.isFinite(1.0f)
 * @example Float32.isFinite(Infinityf) == false
 * @example Float32.isFinite(-Infinityf) == false
 * @example Float32.isFinite(NaNf) == false
 *
 * @since v0.7.0
 */
@unsafe
provide let isFinite = (x: Float32) => {
  // uses the fact that all finite floats minus themselves are zero
  // (NaN - NaN == NaN, inf - inf == NaN,
  //  -inf - -inf == NaN, inf - -inf == inf, -inf - inf == -inf)
  x - x == 0.0f
}

/**
 * Checks if the value is a float NaN value (Not A Number).
 *
 * @param x: The value to check
 * @returns `true` if the value is NaN, otherwise `false`
 *
 * @example Float32.isNaN(NaNf)
 * @example Float32.isNaN(Infinityf) == false
 * @example Float32.isNaN(-Infinityf) == false
 * @example Float32.isNaN(0.5f) == false
 * @example Float32.isNaN(1.0f) == false
 *
 * @since v0.6.5
 */
provide let isNaN = (x: Float32) => x != x

/**
 * Checks if a float is infinite, that is either of positive or negative infinity.
 *
 * @param x: The value to check
 * @returns `true` if the value is infinite or `false` otherwise
 *
 * @example Float32.isInfinite(Infinityf)
 * @example Float32.isInfinite(-Infinityf)
 * @example Float32.isInfinite(NaNf) == false
 * @example Float32.isInfinite(0.5f) == false
 * @example Float32.isInfinite(1.0f) == false
 *
 * @since v0.6.5
 */
provide let isInfinite = (x: Float32) => x == Infinityf || x == -Infinityf

/**
 * Returns the smaller of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The smaller of the two operands
 *
 * @example Float32.min(5.0f, 2.0f) == 2.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let min = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.min(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns the larger of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The larger of the two operands
 *
 * @example Float32.max(5.0f, 2.0f) == 5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let max = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.max(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns the absolute value. That is, it returns `x` if `x` is positive or zero and the negation of `x` if `x` is negative.
 *
 * @param x: The operand
 * @returns The absolute value of the operand
 *
 * @example Float32.abs(-1.0f) == 1.0f
 * @example Float32.abs(5.0f) == 5.0f
 *
 * @since v0.6.5
 */
@unsafe
provide let abs = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.abs(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns the negation of its operand.
 *
 * @param x: The operand
 * @returns The negated operand
 *
 * @example Float32.neg(-1.0f) == 1.0f
 * @example Float32.neg(1.0f) == -1.0f
 *
 * @since v0.6.5
 */
@unsafe
provide let neg = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.neg(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Rounds its operand up to the next largest whole value.
 *
 * @param x: The operand to ceil
 * @returns The next largest whole value of the operand
 *
 * @example Float32.ceil(5.5f) == 6.0f
 * @example Float32.ceil(-5.5f) == -5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let ceil = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.ceil(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Rounds its operand down to the largest whole value less than the operand.
 *
 * @param x: The operand to floor
 * @returns The previous whole value of the operand
 *
 * @example Float32.floor(5.5f) == 5.0f
 * @example Float32.floor(-5.5f) == -6.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let floor = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.floor(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns the whole value part of its operand, removing any fractional value.
 *
 * @param x: The operand to truncate
 * @returns The whole value part of the operand
 *
 * @example Float32.trunc(5.5f) == 5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let trunc = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.trunc(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns its operand rounded to its nearest integer.
 *
 * @param x: The operand to round
 * @returns The nearest integer to the operand
 *
 * @example Float32.round(5.5f) == 6.0f
 * @example Float32.round(5.4f) == 5.0f
 * @example Float32.round(-5.5f) == -6.0f
 * @example Float32.round(-5.4f) == -5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let round = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.nearest(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the square root of its operand.
 *
 * @param x: The operand to square root
 * @returns The square root of the operand
 *
 * @example Float32.sqrt(25.0f) == 5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let sqrt = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.sqrt(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Copys the sign of the second operand to the first operand.
 *
 * @param x: The operand to modify
 * @param y: The operand to copy the sign from
 * @returns The first operand with the sign of the second operand
 *
 * @example Float32.copySign(2.0f, 1.0f) == 2.0f
 * @example Float32.copySign(3.0f, -1.0f) == -3.0f
 * @example Float32.copySign(-5.0f, 1.0f) == 5.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let copySign = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.copySign(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Determines whether two values are considered close to each other using a relative and absolute tolerance.
 *
 * @param a: The first value
 * @param b: The second value
 * @param relativeTolerance: The maximum tolerance to use relative to the larger absolute value `a` or `b`
 * @param absoluteTolerance: The absolute tolerance to use, regardless of the values of `a` or `b`
 * @returns `true` if the values are considered close to each other or `false` otherwise
 *
 * @example Float32.isClose(1.233f, 1.233f)
 * @example Float32.isClose(1.233f, 1.233000001f)
 * @example Float32.isClose(8.005f, 8.450f, absoluteTolerance=0.5f)
 * @example Float32.isClose(4.0f, 4.1f, relativeTolerance=0.025f)
 * @example Float32.isClose(1.233f, 1.24f) == false
 * @example Float32.isClose(1.233f, 1.4566f) == false
 * @example Float32.isClose(8.005f, 8.450f, absoluteTolerance=0.4f) == false
 * @example Float32.isClose(4.0f, 4.1f, relativeTolerance=0.024f) == false
 *
 * @since v0.7.0
 */
provide let isClose = (a, b, relativeTolerance=1e-9f, absoluteTolerance=0.0f) => {
  if (a == b) {
    true
  } else if (isFinite(a) && isFinite(b)) {
    abs(a - b) <=
      max(relativeTolerance * max(abs(a), abs(b)), absoluteTolerance)
  } else {
    // NaN and infinities which were not equal
    false
  }
}

/**
 * Computes the sine of a float (in radians).
 *
 * @param radians: The input in radians
 * @returns The computed sine
 *
 * @example Float32.sin(0.0f) == 0.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let sin = (radians: Float32) => {
  // TODO(#2167): Implement Float32 optimized trig functions
  let xval = WasmF32.load(WasmI32.fromGrain(radians), _VALUE_OFFSET)
  let value = sin(WasmF64.promoteF32(xval))
  WasmI32.toGrain(newFloat32(WasmF32.demoteF64(value))): Float32
}

/**
 * Computes the cosine of a float (in radians).
 *
 * @param radians: The input in radians
 * @returns The computed cosine
 *
 * @example Float32.cos(0.0f) == 1.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let cos = (radians: Float32) => {
  // TODO(#2167): Implement Float32 optimized trig functions
  let xval = WasmF32.load(WasmI32.fromGrain(radians), _VALUE_OFFSET)
  let value = cos(WasmF64.promoteF32(xval))
  WasmI32.toGrain(newFloat32(WasmF32.demoteF64(value))): Float32
}

/**
 * Computes the tangent of a number (in radians).
 *
 * @param radians: The input in radians
 * @returns The computed tangent
 *
 * @example Float32.tan(0.0f) == 0.0f
 *
 * @since v0.7.0
 */
@unsafe
provide let tan = (radians: Float32) => {
  // TODO(#2167): Implement Float32 optimized trig functions
  let xval = WasmF32.load(WasmI32.fromGrain(radians), _VALUE_OFFSET)
  let value = tan(WasmF64.promoteF32(xval))
  WasmI32.toGrain(newFloat32(WasmF32.demoteF64(value))): Float32
}
