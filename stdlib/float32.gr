import WasmI32 from "runtime/unsafe/wasmi32"
import WasmF32 from "runtime/unsafe/wasmf32"
import Memory from "runtime/unsafe/memory"
import {
  newFloat32
} from "runtime/dataStructures"

import {
  coerceNumberToFloat32 as fromNumber,
  coerceFloat32ToNumber as toNumber
} from "runtime/numbers"

export fromNumber
export toNumber


@disableGC
export let rec add = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.add(xv, yv))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(add))
  ret
}

@disableGC
export let rec sub = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.sub(xv, yv))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(sub))
  ret
}

@disableGC
export let rec mul = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.mul(xv, yv))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(mul))
  ret
}

@disableGC
export let rec div = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.div(xv, yv))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(div))
  ret
}


// Float32 comparisons
@disableGC
export let rec lt = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmF32.lt(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lt))
  ret
}

@disableGC
export let rec gt = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmF32.gt(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(gt))
  ret
}

@disableGC
export let rec lte = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmF32.le(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lte))
  ret
}

@disableGC
export let rec gte = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmF32.ge(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(gte))
  ret
}

// floating-point constants:

@disableGC
let rec makeInfinity = () => {
  let ptr = newFloat32(WasmF32.reinterpretI32(0b01111111100000000000000000000000n))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(makeInfinity))
  ret
}

export let infinity = makeInfinity()

@disableGC
let rec makeNaN = () => {
  let ptr = newFloat32(WasmF32.reinterpretI32(0b01111111100000000000000000000001n))
  let ret = WasmI32.toGrain(ptr) : Float32
  Memory.decRef(WasmI32.fromGrain(makeNaN))
  ret
}

export let nan = makeNaN()
