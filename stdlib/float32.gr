/**
 * Utilities for working with the Float32 type.
 *
 * @example from "float32" include Float32
 *
 * @example 4.0f
 * @example -4.0f
 * @example Infinityf
 * @example NaNf
 *
 * @since v0.2.0
 */
module Float32

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmf32" include WasmF32
use WasmF32.{ (+), (-), (*), (/), (<), (<=), (>), (>=) }
from "runtime/dataStructures" include DataStructures
use DataStructures.{ newFloat32 }

from "runtime/numbers" include Numbers
use Numbers.{
  coerceNumberToFloat32 as fromNumber,
  coerceFloat32ToNumber as toNumber,
}

@unsafe
let _VALUE_OFFSET = 4n

/**
 * Infinity represented as a Float32 value.
 * This is an alternative to the `Infinityf` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let infinity = Infinityf

/**
 * NaN (Not a Number) represented as a Float32 value.
 * This is an alternative to the `NaNf` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let nan = NaNf

/**
 * Pi represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let pi = 3.1415927f

/**
 * Tau represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let tau = 6.2831853f

/**
 * Euler's number represented as a Float32 value.
 *
 * @since v0.5.2
 */
provide let e = 2.7182817f

provide { fromNumber, toNumber }

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @example
 * use Float32.{ (+) }
 * assert 1.0f + 1.0f == 2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `add`
 */
@unsafe
provide let (+) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv + yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @example
 * use Float32.{ (-) }
 * assert 1.0f - 1.0f == 0.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `sub`
 */
@unsafe
provide let (-) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv - yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @example
 * use Float32.{ (*) }
 * assert 2.0f * 2.0f == 4.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `mul`
 */
@unsafe
provide let (*) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv * yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the quotient of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of the two operands
 *
 * @example
 * use Float32.{ (/) }
 * assert 10.0f / 4.0f == 2.5f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `div`
 */
@unsafe
provide let (/) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  let ptr = newFloat32(xv / yv)
  WasmI32.toGrain(ptr): Float32
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (<) }
 * assert 1.0f < 2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lt`
 */
@unsafe
provide let (<) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (>) }
 * assert 2.0f > 1.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gt`
 */
@unsafe
provide let (>) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (<=) }
 * assert -1.0f <= 1.0f
 *
 * @example
 * use Float32.{ (<=) }
 * assert -2.0f <= -2.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lte`
 */
@unsafe
provide let (<=) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float32.{ (>=) }
 * assert 4.0f >= 1.0f
 *
 * @example
 * use Float32.{ (>=) }
 * assert 3.0f >= 3.0f
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gte`
 */
@unsafe
provide let (>=) = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let yv = WasmF32.load(WasmI32.fromGrain(y), _VALUE_OFFSET)
  xv >= yv
}

/**
 * Checks if the value is a float NaN value (Not A Number).
 *
 * @param x: The value to check
 * @returns `true` if the value is NaN, otherwise `false`
 *
 * @example Float32.isNaN(NaNf)
 * @example Float32.isNaN(Infinityf) == false
 * @example Float32.isNaN(-Infinityf) == false
 * @example Float32.isNaN(0.5f) == false
 * @example Float32.isNaN(1.0f) == false
 *
 * @since v0.6.5
 */
provide let isNaN = (x: Float32) => x != x

/**
 * Checks if a float is infinite, that is either of positive or negative infinity.
 *
 * @param x: The value to check
 * @returns `true` if the value is infinite or `false` otherwise
 *
 * @example Float32.isInfinite(Infinityf)
 * @example Float32.isInfinite(-Infinityf)
 * @example Float32.isInfinite(NaNf) == false
 * @example Float32.isInfinite(0.5f) == false
 * @example Float32.isInfinite(1.0f) == false
 *
 * @since v0.6.5
 */
provide let isInfinite = (x: Float32) => x == Infinityf || x == -Infinityf

/**
 * Returns the absolute value. That is, it returns `x` if `x` is positive or zero and the negation of `x` if `x` is negative.
 *
 * @param x: The operand
 * @returns The absolute value of the operand
 *
 * @example Float32.abs(-1.0f) == 1.0f
 * @example Float32.abs(5.0f) == 5.0f
 *
 * @since v0.6.5
 */
@unsafe
provide let abs = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.abs(xv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Returns the negation of its operand.
 *
 * @param x: The operand
 * @returns The negated operand
 *
 * @example Float32.neg(-1.0f) == 1.0f
 * @example Float32.neg(1.0f) == -1.0f
 *
 * @since v0.6.5
 */
@unsafe
provide let neg = (x: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), _VALUE_OFFSET)
  let ptr = newFloat32(WasmF32.neg(xv))
  WasmI32.toGrain(ptr): Float32
}
