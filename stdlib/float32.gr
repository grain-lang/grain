/**
 * @module Float32: Utilities for working with the Float32 type.
 * @example include "float32"
 * 
 * @since v0.2.0
 */

module Float32

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/wasmf32"
include "runtime/dataStructures"
from DataStructures use { newFloat32 }

include "runtime/numbers"
from Numbers use {
  coerceNumberToFloat32 as fromNumber,
  coerceFloat32ToNumber as toNumber,
}

/**
 * @section Constants: Float32 constant values.
 */

/**
 * Infinity represented as a Float32 value.
 * 
 * @since v0.4.0
 */
@unsafe
provide let infinity = {
  let ptr = newFloat32(
    WasmF32.reinterpretI32(0b01111111100000000000000000000000n)
  )
  WasmI32.toGrain(ptr): Float32
}

/**
 * NaN (Not a Number) represented as a Float32 value.
 * 
 * @since v0.4.0
 */
@unsafe
provide let nan = {
  let ptr = newFloat32(
    WasmF32.reinterpretI32(0b01111111100000000000000000000001n)
  )
  WasmI32.toGrain(ptr): Float32
}

/**
 * Pi represented as a Float32 value.
 * 
 * @since v0.5.2
 */
provide let pi = 3.1415927f

/**
 * Tau represented as a Float32 value.
 * 
 * @since v0.5.2
 */
provide let tau = 6.2831853f

/**
 * Euler's number represented as a Float32 value.
 * 
 * @since v0.5.2
 */
provide let e = 2.7182817f
/**
 * @section Conversions: Functions for converting between Numbers and the Float32 type.
 */

/**
 * Converts a Number to a Float32.
 *
 * @param number: The value to convert
 * @returns The Number represented as a Float32
 * 
 * @since v0.2.0
 */
provide { fromNumber }

/**
 * Converts a Float32 to a Number.
 *
 * @param float: The value to convert
 * @returns The Float32 represented as a Number
 * 
 * @since v0.2.0
 */
provide { toNumber }

/**
 * @section Operations: Mathematical operations for Float32 values.
 */

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 * 
 * @since v0.2.0
 */
@unsafe
provide let add = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.add(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 * 
 * @since v0.2.0
 */
@unsafe
provide let sub = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.sub(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 * 
 * @since v0.2.0
 */
@unsafe
provide let mul = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.mul(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * Computes the quotient of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of the two operands
 * 
 * @since v0.2.0
 */
@unsafe
provide let div = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat32(WasmF32.div(xv, yv))
  WasmI32.toGrain(ptr): Float32
}

/**
 * @section Comparisons: Functions for comparing Float32 values.
 */

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 * 
 * @since v0.2.0
 */
@unsafe
provide let lt = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  WasmF32.lt(xv, yv)
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 * 
 * @since v0.2.0
 */
@unsafe
provide let gt = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  WasmF32.gt(xv, yv)
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 * 
 * @since v0.2.0
 */
@unsafe
provide let lte = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  WasmF32.le(xv, yv)
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 * 
 * @since v0.2.0
 */
@unsafe
provide let gte = (x: Float32, y: Float32) => {
  let xv = WasmF32.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF32.load(WasmI32.fromGrain(y), 8n)
  WasmF32.ge(xv, yv)
}
