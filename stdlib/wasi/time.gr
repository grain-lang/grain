/**
 * Access to system clocks.
 *
 * @example from "wasi/time" include Time
 */
module Time

from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ (+), (==), (!=) }
from "runtime/unsafe/memory" include Memory
from "runtime/wasi" include Wasi
from "runtime/dataStructures" include DataStructures
use DataStructures.{ allocateInt64, tagSimpleNumber }

provide enum Clock {
  /**
   * The clock measuring real time. Time value zero corresponds with
   * 1970-01-01T00:00:00Z.
   */
  Realtime,
  /**
   * The store-wide monotonic clock, which is defined as a clock measuring
   * real time, whose value cannot be adjusted and which cannot have negative
   * clock jumps. The epoch of this clock is undefined. The absolute time
   * value of this clock therefore has no meaning.
   */
  Monotonic,
  /** The CPU-time clock associated with the current process. */
  ProcessCpuTime,
  /** The CPU-time clock associated with the current thread. */
  ThreadCpuTime,
}

@unsafe
let getClockTime = (clock, precision) => {
  let int64Ptr = allocateInt64()
  let timePtr = int64Ptr + 8n
  let clockid = match (clock) {
    Realtime => Wasi._CLOCK_REALTIME,
    Monotonic => Wasi._CLOCK_MONOTONIC,
    ProcessCpuTime => Wasi._CLOCK_PROCESS_CPUTIME,
    ThreadCpuTime => Wasi._CLOCK_THREAD_CPUTIME,
  }
  let err = Wasi.clock_time_get(clockid, precision, timePtr)
  if (err != Wasi._ESUCCESS) {
    Memory.free(int64Ptr)
    return Err(Wasi.SystemError(tagSimpleNumber(err)))
  }
  return Ok(WasmI32.toGrain(int64Ptr): Int64)
}

/**
 * Get the current time, in nanoseconds.
 * Time value 0 corresponds with 1970-01-01T00:00:00Z.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
@unsafe
provide let realTime = () => {
  getClockTime(Realtime, 1000N)
}

/**
 * Get the time of the system's high-resolution clock, in nanoseconds.
 * This system clock cannot be adjusted and cannot have negative time jumps.
 * The epoch of this clock is undefined, and thus time value 0 is meaningless.
 * Useful for calculation of precise time intervals.
 *
 * @returns `Ok(time)` of the current time if successful or `Err(exception)` otherwise
 */
@unsafe
provide let monotonicTime = () => {
  getClockTime(Monotonic, 1N)
}

/**
 * Get the number of nanoseconds elapsed since the process began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
@unsafe
provide let processCpuTime = () => {
  getClockTime(ProcessCpuTime, 1N)
}

/**
 * Get the number of nanoseconds elapsed since the thread began.
 *
 * @returns `Ok(elapsed)` of the elapsed nanoseconds if successful or `Err(exception)` otherwise
 */
@unsafe
provide let threadCpuTime = () => {
  getClockTime(ThreadCpuTime, 1N)
}
