/**
 * @module Bytes: Utilities for working with byte sequences.
 *
 * @example import Bytes from "bytes"
 *
 * @since v0.3.2
 */

import Memory from "runtime/unsafe/memory"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import WasmF32 from "runtime/unsafe/wasmf32"
import WasmF64 from "runtime/unsafe/wasmf64"
import Conv from "runtime/unsafe/conv"
import { allocateBytes, allocateString } from "runtime/dataStructures"
import Exception from "runtime/exception"
import Int32 from "int32"
import { coerceNumberToWasmI32 } from "runtime/numbers"

@unsafe
let _SIZE_OFFSET = 4n
@unsafe
let _VALUE_OFFSET = 8n
@unsafe
let _INT8_BYTE_SIZE = 1n
@unsafe
let _INT16_BYTE_SIZE = 2n
@unsafe
let _INT32_BYTE_SIZE = 4n
@unsafe
let _FLOAT32_BYTE_SIZE = 4n
@unsafe
let _INT64_BYTE_SIZE = 8n
@unsafe
let _FLOAT64_BYTE_SIZE = 8n

/** Throws an exception if the index specified is out-of-bounds */
@unsafe
let checkIndexIsInBounds = (i, byteSize, max) => {
  let (+) = WasmI32.add
  let (<) = WasmI32.ltS
  let (>) = WasmI32.gtS
  if (i < 0n) {
    throw Exception.IndexOutOfBounds
  }
  if (i + byteSize > max) {
    throw Exception.IndexOutOfBounds
  }
}

/** Gets the size of a Bytes via its ptr */
@unsafe
let getSize = ptr => WasmI32.load(ptr, _SIZE_OFFSET)

/**
 * @section Values: Functions for working with the Bytes data type.
 */

/**
 * Creates a new byte sequence of the input size.
 *
 * @param size: The number of bytes to store
 * @returns The new byte sequence
 *
 * @since v0.3.2
 */
@unsafe
export let make = (size: Number) => {
  let bytes = allocateBytes(coerceNumberToWasmI32(size))
  WasmI32.toGrain(bytes): Bytes
}

/**
 * An empty byte sequence.
 *
 * @since v0.3.2
 */
export let empty = make(0)

/**
 * Creates a new byte sequence from the input string.
 *
 * @param string: The string to copy into a byte sequence
 * @returns The new byte sequence
 *
 * @since v0.3.2
 */
@unsafe
export let fromString = (string: String) => {
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(string)
  let size = getSize(src)
  let dst = allocateBytes(size)
  Memory.copy(dst + _VALUE_OFFSET, src + _VALUE_OFFSET, size)
  WasmI32.toGrain(dst): Bytes
}

/**
 * Creates a new string from the input bytes.
 *
 * @param bytes: The source byte sequence
 * @returns The string representation of the bytes
 *
 * @since v0.3.2
 */
@unsafe
export let toString = (bytes: Bytes) => {
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(bytes)
  let size = getSize(src)
  let dst = allocateString(size)
  Memory.copy(dst + _VALUE_OFFSET, src + _VALUE_OFFSET, size)
  WasmI32.toGrain(dst): String
}

/**
 * Returns the length of a byte sequence.
 *
 * @param bytes: The byte sequence to inspect
 * @returns The number of bytes
 *
 * @since v0.3.2
 */
@unsafe
export let length = (bytes: Bytes) => {
  let b = WasmI32.fromGrain(bytes)
  Conv.wasmI32ToNumber(getSize(b))
}

/**
 * Creates a new byte sequence that contains the same bytes as the input byte sequence.
 *
 * @param bytes: The byte sequence to copy
 * @returns The new byte sequence
 *
 * @since v0.3.2
 */
@unsafe
export let copy = (b: Bytes) => {
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(b)
  let size = getSize(src)
  let dst = allocateBytes(size)
  Memory.copy(dst + _VALUE_OFFSET, src + _VALUE_OFFSET, size)
  WasmI32.toGrain(dst): Bytes
}

/**
 * Returns a copy of a subset of the input byte sequence.
 *
 * @param start: The start index
 * @param length: The number of bytes to include after the starting index
 * @param bytes: The byte sequence to copy from
 * @returns A byte sequence with of the copied bytes
 *
 * @since v0.3.2
 */
@unsafe
export let slice = (start: Number, length: Number, bytes: Bytes) => {
  let (>) = WasmI32.gtS
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(bytes)
  let size = getSize(src)
  let iOrig = start
  let lenOrig = length
  let start = coerceNumberToWasmI32(start)
  let length = coerceNumberToWasmI32(length)
  if (start + length > size) {
    throw Exception.InvalidArgument(
      "The given index and length do not specify a valid range of bytes"
    )
  }
  let dst = allocateBytes(length)
  let offset = start
  Memory.copy(dst + _VALUE_OFFSET, src + _VALUE_OFFSET + start, length)
  WasmI32.toGrain(dst): Bytes
}

/**
 * Returns a copy of a byte sequence with bytes added or removed from the beginning and/or end.
 *
 * A positive number represents bytes to add, while a negative number represents bytes to remove.
 *
 * @param left: The number of uninitialized bytes to prepend
 * @param right: The number of uninitialized bytes to append
 * @param bytes: The byte sequence get a subset of bytes from
 * @returns A resized byte sequence
 *
 * @since v0.3.2
 */
@unsafe
export let resize = (left: Number, right: Number, bytes: Bytes) => {
  let (<) = WasmI32.ltS
  let (>) = WasmI32.gtS
  let (+) = WasmI32.add
  let (-) = WasmI32.sub
  let (*) = WasmI32.mul
  let src = WasmI32.fromGrain(bytes)
  let size = getSize(src)
  let leftOrig = left
  let rightOrig = right
  let left = coerceNumberToWasmI32(left)
  let right = coerceNumberToWasmI32(right)
  let newSize = size + left + right
  if (newSize < 0n) {
    throw Exception.InvalidArgument("The resulting length is less than 0")
  }
  let dst = allocateBytes(newSize)
  let mut srcOffset = 0n
  let mut dstOffset = 0n
  if (left < 0n) {
    srcOffset = left * -1n
    dstOffset = 0n
  }
  if (left > 0n) {
    srcOffset = 0n
    dstOffset = left
  }
  let len = if (right < 0n) {
    size + right - srcOffset
  } else {
    size - srcOffset
  }
  if (len > 0n) {
    Memory.copy(
      dst + _VALUE_OFFSET + dstOffset,
      src + _VALUE_OFFSET + srcOffset,
      len
    )
  }
  WasmI32.toGrain(dst): Bytes
}

/**
 * Copies a range of bytes from a source byte sequence to a given location
 * in a destination byte sequence.
 *
 * @param srcIndex: The starting index to copy bytes from
 * @param dstIndex: The starting index to copy bytes into
 * @param length: The amount of bytes to copy from the source buffer
 * @param src: The source byte sequence
 * @param dst: The destination byte sequence
 *
 * @since v0.3.2
 */
@unsafe
export let move =
  (
    srcIndex: Number,
    dstIndex: Number,
    length: Number,
    src: Bytes,
    dst: Bytes,
  ) => {
  let (>) = WasmI32.gtS
  let (+) = WasmI32.add
  let srcIndexOrig = srcIndex
  let dstIndexOrig = dstIndex
  let lenthOrig = length
  let src = WasmI32.fromGrain(src)
  let srcSize = getSize(src)
  let srcIndex = coerceNumberToWasmI32(srcIndex)
  let dst = WasmI32.fromGrain(dst)
  let dstSize = getSize(dst)
  let dstIndex = coerceNumberToWasmI32(dstIndex)
  let length = coerceNumberToWasmI32(length)
  if (srcIndex + length > srcSize) {
    throw Exception.InvalidArgument("Invalid source bytes range")
  }
  if (dstIndex + length > dstSize) {
    throw Exception.InvalidArgument("Invalid destination bytes range")
  }
  let end = srcIndex + length
  Memory.copy(
    dst + _VALUE_OFFSET + dstIndex,
    src + _VALUE_OFFSET + srcIndex,
    length
  )
}

/**
 * Creates a new byte sequence that contains the bytes of both byte sequences.
 *
 * @param bytes1: The beginning byte sequence
 * @param bytes2: The ending byte sequence
 * @returns The new byte sequence
 *
 * @since v0.3.2
 */
export let concat = (bytes1: Bytes, bytes2: Bytes) => {
  let len1 = length(bytes1)
  let len2 = length(bytes2)
  let ret = resize(0, len2, bytes1)
  move(0, len1, len2, bytes2, ret)
  ret
}

/**
 * Replaces all bytes in a byte sequnce with the new value provided.
 *
 * @param value: The value replacing each byte
 * @param bytes: The byte sequence to update
 *
 * @since v0.3.2
 */
@unsafe
export let fill = (value: Int32, bytes: Bytes) => {
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(bytes)
  let size = getSize(src)
  let v = Conv.fromInt32(value)
  Memory.fill(src + _VALUE_OFFSET, v, size)
}

/**
 * Replaces all bytes in a byte sequence with zeroes.
 *
 * @param bytes: The byte sequence to clear
 *
 * @since v0.5.0
 */
@unsafe
export let clear = (bytes: Bytes) => {
  let (+) = WasmI32.add
  let src = WasmI32.fromGrain(bytes)
  let size = getSize(src)
  Memory.fill(src + _VALUE_OFFSET, 0n, size)
}

/**
 * @section Binary operations on integers: Functions for encoding and decoding integers stored in a byte sequence.
 */

/**
 * Gets a signed 8-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 32-bit integer representing a signed 8-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getInt8S = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT8_BYTE_SIZE, size)
  let n = WasmI32.load8S(ptr + offset, _VALUE_OFFSET)
  Conv.toInt32(n)
}

/**
 * Gets an unsigned 8-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 32-bit integer representing an unsigned 8-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let rec getInt8U = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT8_BYTE_SIZE, size)
  let n = WasmI32.load8U(ptr + offset, _VALUE_OFFSET)
  Conv.toInt32(n)
}

/**
 * Sets a signed 8-bit integer starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let rec setInt8 = (index: Number, value: Int32, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT8_BYTE_SIZE, size)
  let v = Conv.fromInt32(value)
  WasmI32.store8(ptr + offset, v, _VALUE_OFFSET)
}

/**
 * Gets a signed 16-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 32-bit integer representing a signed 16-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getInt16S = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT16_BYTE_SIZE, size)
  let n = WasmI32.load16S(ptr + offset, _VALUE_OFFSET)
  Conv.toInt32(n)
}

/**
 * Gets an unsigned 16-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 32-bit integer representing an unsigned 16-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getInt16U = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT16_BYTE_SIZE, size)
  let n = WasmI32.load16U(ptr + offset, _VALUE_OFFSET)
  Conv.toInt32(n)
}

/**
 * Sets a signed 16-bit integer starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let setInt16 = (index: Number, value: Int32, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT16_BYTE_SIZE, size)
  let v = Conv.fromInt32(value)
  WasmI32.store16(ptr + offset, v, _VALUE_OFFSET)
}

/**
 * Gets a signed 32-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A signed 32-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getInt32 = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT32_BYTE_SIZE, size)
  let n = WasmI32.load(ptr + offset, _VALUE_OFFSET)
  Conv.toInt32(n)
}

/**
 * Sets a signed 32-bit integer starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let setInt32 = (index: Number, value: Int32, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT32_BYTE_SIZE, size)
  let v = Conv.fromInt32(value)
  WasmI32.store(ptr + offset, v, _VALUE_OFFSET)
}

/**
 * Gets a 32-bit float starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 32-bit float that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getFloat32 = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT32_BYTE_SIZE, size)
  let n = WasmF32.load(ptr + offset, _VALUE_OFFSET)
  Conv.toFloat32(n)
}

/**
 * Sets a 32-bit float starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let setFloat32 = (index: Number, value: Float32, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT32_BYTE_SIZE, size)
  let v = Conv.fromFloat32(value)
  WasmF32.store(ptr + offset, v, _VALUE_OFFSET)
}

/**
 * Gets a signed 64-bit integer starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A signed 64-bit integer that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getInt64 = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT64_BYTE_SIZE, size)
  let n = WasmI64.load(ptr + offset, _VALUE_OFFSET)
  Conv.toInt64(n)
}

/**
 * Sets a signed 64-bit integer starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let setInt64 = (index: Number, value: Int64, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _INT64_BYTE_SIZE, size)
  let v = Conv.fromInt64(value)
  WasmI64.store(ptr + offset, v, _VALUE_OFFSET)
}

/**
 * Gets a 64-bit float starting at the given byte index.
 *
 * @param index: The byte index to access
 * @param bytes: The byte sequence to access
 * @returns A 64-bit float that starts at the given index
 *
 * @since v0.3.2
 */
@unsafe
export let getFloat64 = (index: Number, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _FLOAT64_BYTE_SIZE, size)
  let n = WasmF64.load(ptr + offset, _VALUE_OFFSET)
  Conv.toFloat64(n)
}

/**
 * Sets a 64-bit float starting at the given byte index.
 *
 * @param index: The byte index to update
 * @param value: The value to set
 * @param bytes: The byte sequence to mutate
 *
 * @since v0.3.2
 */
@unsafe
export let rec setFloat64 = (index: Number, value: Float64, bytes: Bytes) => {
  let (+) = WasmI32.add
  let ptr = WasmI32.fromGrain(bytes)
  let size = getSize(ptr)
  let offset = coerceNumberToWasmI32(index)
  checkIndexIsInBounds(offset, _FLOAT64_BYTE_SIZE, size)
  let v = Conv.fromFloat64(value)
  WasmF64.store(ptr + offset, v, _VALUE_OFFSET)
}
