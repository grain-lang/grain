/**
 * Utilities for working with the Exception type.
 *
 * The Exception type represents an error that has occurred during computation.
 *
 * @example from "exception" include Exception
 *
 * @example exception ExampleError(Number)
 * @example exception ExampleError
 *
 * @since v0.3.0
 */
module Exception

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/memory" include Memory
from "runtime/exception" include Exception

/**
 * Registers an exception printer. When an exception is thrown, all registered
 * printers are called in order from the most recently registered printer to
 * the least recently registered printer. The first `Some` value returned is
 * used as the exception's string value.
 *
 * @param printer: The exception printer to register
 *
 * @example
 * exception ExampleError(Number)
 *
 * Exception.registerPrinter(e => {
 *   match (e) {
 *     ExampleError(lineNumber) =>
 *       Some("Error found on line: " ++ toString(lineNumber)),
 *     _ => None,
 *   }
 * })
 *
 * throw ExampleError(1) // Error found on line: 1
 *
 * @since v0.3.0
 */
provide let registerPrinter = Exception.registerPrinter

/**
 * Gets the string representation of the given exception.
 *
 * @param e: The exception to stringify
 *
 * @returns The string representation of the exception
 *
 * @since v0.7.0
 */
provide let toString = Exception.toString
