/**
 * @module Stack: An immutable stack implementation. A stack is a LIFO (last-in-first-out) data structure where new values are added, retrieved, and removed from the end.
 * @example import Stack from "stack"
 */

import List from "list"

/**
 * @section Types: Type declarations included in the Stack module.
 */

/**
 * Stacks are immutable data structures that store their data in a List.
 */
record Stack<a> {
  data: List<a>,
}

/**
 * @section Values: Functions and constants included in the Stack module.
 */

/**
 * Creates a new stack.
 *
 * @returns An empty stack
 */
export let make = () => {
  { data: [], }
}

/**
 * Checks if the given stack contains no items.
 *
 * @param stack: The stack to check
 * @returns `true` if the stack has no items, and `false` otherwise
 */
export let isEmpty = stack => {
  match (stack) {
    { data: [] } => true,
    _ => false,
  }
}

/**
 * Returns `Some(item)` where `item` is the value at the top of the stack, and `None` otherwise.
 *
 * @param stack: The stack to inspect
 * @returns The value at the top of the stack, if it exists
 */
export let peek = stack => {
  match (stack) {
    { data: [] } => None,
    { data } => List.head(data),
  }
}

/**
 * Adds a new item to the top of the stack.
 *
 * @param value: The item to be added
 * @param stack: The stack being updated
 * @returns A new stack with the item added to the end
 */
export let push = (value, stack) => {
  match (stack) {
    { data: [] } => { data: [value], },
    { data } => { data: [value, ...data], },
  }
}

/**
 * Removes the item at the top of the stack.
 *
 * @param stack: The stack being updated
 * @returns A new stack with the last item removed
 */
export let pop = stack => {
  match (stack) {
    { data: [] } => stack,
    { data: [head, ...tail] } => { data: tail, },
  }
}

/**
 * Computes the size of the input stack.
 *
 * @param stack: The stack to inspect
 * @returns The count of the items in the stack
 */
export let size = stack => {
  match (stack) {
    { data: [] } => 0,
    { data } => List.length(data),
  }
}
