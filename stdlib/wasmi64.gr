// WebAssembly Memory Instructions
export primitive load : (WasmI32, WasmI32) -> WasmI64 = "@wasm.load_i64"
export primitive store : (WasmI32, WasmI64, WasmI32) -> Void = "@wasm.store_i64"

// WebAssembly Unary Instructions
export primitive clz : WasmI64 -> WasmI64 = "@wasm.clz_i64"
export primitive ctz : WasmI64 -> WasmI64 = "@wasm.ctz_i64"
export primitive popcnt : WasmI64 -> WasmI64 = "@wasm.popcnt_i64"
export primitive eqz : WasmI64 -> Bool = "@wasm.eq_z_i64"

// WebAssembly Binary Instructions
export primitive add : (WasmI64, WasmI64) -> WasmI64 = "@wasm.add_i64"
export primitive sub : (WasmI64, WasmI64) -> WasmI64 = "@wasm.sub_i64"
export primitive mul : (WasmI64, WasmI64) -> WasmI64 = "@wasm.mul_i64"
export primitive divS : (WasmI64, WasmI64) -> WasmI64 = "@wasm.div_s_i64"
export primitive divU : (WasmI64, WasmI64) -> WasmI64 = "@wasm.div_u_i64"
export primitive remS : (WasmI64, WasmI64) -> WasmI64 = "@wasm.rem_s_i64"
export primitive remU : (WasmI64, WasmI64) -> WasmI64 = "@wasm.rem_u_i64"
export primitive and : (WasmI64, WasmI64) -> WasmI64 = "@wasm.and_i64"
export primitive or : (WasmI64, WasmI64) -> WasmI64 = "@wasm.or_i64"
export primitive xor : (WasmI64, WasmI64) -> WasmI64 = "@wasm.xor_i64"
export primitive shl : (WasmI64, WasmI64) -> WasmI64 = "@wasm.shl_i64"
export primitive shrU : (WasmI64, WasmI64) -> WasmI64 = "@wasm.shr_u_i64"
export primitive shrS : (WasmI64, WasmI64) -> WasmI64 = "@wasm.shr_s_i64"
export primitive rotl : (WasmI64, WasmI64) -> WasmI64 = "@wasm.rot_l_i64"
export primitive rotr : (WasmI64, WasmI64) -> WasmI64 = "@wasm.rot_r_i64"
export primitive eq : (WasmI64, WasmI64) -> Bool = "@wasm.eq_i64"
export primitive ne : (WasmI64, WasmI64) -> Bool = "@wasm.ne_i64"
export primitive ltS : (WasmI64, WasmI64) -> Bool = "@wasm.lt_s_i64"
export primitive ltU : (WasmI64, WasmI64) -> Bool = "@wasm.lt_u_i64"
export primitive leS : (WasmI64, WasmI64) -> Bool = "@wasm.le_s_i64"
export primitive leU : (WasmI64, WasmI64) -> Bool = "@wasm.le_u_i64"
export primitive gtS : (WasmI64, WasmI64) -> Bool = "@wasm.gt_s_i64"
export primitive gtU : (WasmI64, WasmI64) -> Bool = "@wasm.gt_u_i64"
export primitive geS : (WasmI64, WasmI64) -> Bool = "@wasm.ge_s_i64"
export primitive geU : (WasmI64, WasmI64) -> Bool = "@wasm.ge_u_i64"

// Utilities
// export let print = (val) => {
//   print(toString(shl(val, 1w)) ++ "w")
// }
