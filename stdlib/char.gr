/**
 * @module Char: Utilities for working with the Char type.
 *
 * The Char type represents a single [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value).
 *
 * @example import Char from "char"
 * 
 * @since 0.3.0
 */

import WasmI32 from "runtime/unsafe/wasmi32"
import Errors from "runtime/unsafe/errors"
import Tags from "runtime/unsafe/tags"
import {
  tagSimpleNumber,
  tagChar,
  untagChar,
  allocateString,
} from "runtime/dataStructures"

exception MalformedUtf8

/**
 * @section Values: Functions and constants included in the Char module.
 */

/**
 * The minimum valid Unicode scalar value.
 * 
 * @since 0.3.0
 */
export let min = 0x0000
/**
 * The maximum valid Unicode scalar value.
 * 
 * @since 0.3.0
 */
export let max = 0x10FFFF

/**
 * Determines whether the given character code is a valid Unicode scalar value.
 * 
 * @param charCode: The number to check
 * @returns `true` if the number refers to a valid Unicode scalar value or `false` otherwise
 * 
 * @since 0.3.0
 */
export let isValid = charCode => {
  charCode >= min &&
    (charCode <= 0xD7FF || charCode >= 0xE000) &&
    charCode <= max
}

/**
 * Determines the Unicode scalar value for a character.
 * 
 * @param char: The character
 * @returns The Unicode scalar value for the given character
 * 
 * @since 0.3.0
 */
@unsafe
export let code = (char: Char) => {
  let usv = untagChar(char)

  // This could save an instruction by combining the two tagging operations,
  // though we stick with tagSimpleNumber for simplicity.
  tagSimpleNumber(usv)
}

/**
 * Creates a character from the given Unicode scalar value.
 * Throws an exception if the Unicode scalar value is invalid.
 * 
 * @param usv: The Unicode scalar value
 * @returns The character for the given Unicode scalar value
 * 
 * @since 0.3.0
 */
@unsafe
export let fromCode = (usv: Number) => {
  let (-) = WasmI32.sub
  let (<<) = WasmI32.shl

  if (!isValid(usv)) {
    throw InvalidArgument("Invalid character code")
  }

  // usv is now guaranteed to be a simple number
  let usv = WasmI32.fromGrain(usv)

  // Here we use a math trick to avoid fully untagging and retagging.
  // Simple numbers are represented as 2n + 1 and chars are represented as
  // 8n + 2. Quick reminder that shifting left is the equivalent of multiplying
  // by 2, and that _GRAIN_CHAR_TAG_TYPE is equal to 2:
  // 4(2n + 1) - 2 = 8n + 2
  let char = (usv << 2n) - Tags._GRAIN_CHAR_TAG_TYPE

  WasmI32.toGrain(char): Char
}

/**
 * Returns the next valid character by Unicode scalar value.
 * Throws if the input character is the max valid Unicode scalar value.
 * 
 * @param char: The character
 * @returns The next valid character by Unicode scalar value
 * 
 * @since 0.3.0
 */
export let succ = char => {
  let codePoint = code(char)
  if (codePoint == max) {
    fail "no valid Unicode scalar value past U+10FFF"
  } else if (codePoint == 0xD7FF) {
    fromCode(0xE000)
  } else {
    fromCode(codePoint + 1)
  }
}

/**
 * Returns the previous valid character by Unicode scalar value.
 * Throws if the input character is the min valid Unicode scalar value.
 * 
 * @param char: The character
 * @returns The previous valid character by Unicode scalar value
 * 
 * @since 0.3.0
 */
export let pred = char => {
  let codePoint = code(char)
  if (codePoint == min) {
    fail "no valid Unicode scalar value below U+0000"
  } else if (codePoint == 0xE000) {
    fromCode(0xD7FF)
  } else {
    fromCode(codePoint - 1)
  }
}

/**
 * Converts the given character to a string.
 * 
 * @param char: The character to convert
 * @returns A string containing the given character
 * 
 * @since 0.3.0
 */
@unsafe
export let toString = (char: Char) => {
  let (+) = WasmI32.add
  let (-) = WasmI32.sub
  let (*) = WasmI32.mul
  let (&) = WasmI32.and
  let (|) = WasmI32.or
  let (>>>) = WasmI32.shrU
  let (<) = WasmI32.ltU
  let (>) = WasmI32.gtU
  let (<=) = WasmI32.leU

  let usv = untagChar(char)

  let result = if (usv < 0x80n) {
    let string = allocateString(1n)
    WasmI32.store8(string, usv, 8n)
    WasmI32.toGrain(string): String
  } else {
    let mut count = 0n
    let mut offset = 0n
    if (usv <= 0x07FFn) {
      count = 1n
      offset = 0xC0n
    } else if (usv <= 0xFFFFn) {
      count = 2n
      offset = 0xE0n
    } else {
      count = 3n
      offset = 0xF0n
    }
    let string = allocateString(count + 1n)
    WasmI32.store8(string, (usv >>> 6n * count) + offset, 8n)

    let mut n = 0n
    while (count > 0n) {
      n += 1n
      let temp = usv >>> 6n * (count - 1n)
      WasmI32.store8(string + n, 0x80n | temp & 0x3Fn, 8n)
      count -= 1n
    }

    WasmI32.toGrain(string): String
  }

  result
}
