export *

// The minimum value of Unicode characters
// Number
let min = 0x0000

// The maximum value of Unicode characters
// Number
let max = 0x10FFFF

// Returns true if the given number is a valid Unicode scalar value.
// @param n: Number - the value to check
// @returns Bool
let isValid = (n) => {
  n >= min && (n <= 0xD7FF || n >= 0xE000) && n <= max
}

// Returns the Unicode code point for the character
// @param char: Char - the input character
// @returns Number
import foreign wasm code : Char -> Number from "stdlib-external/char"

// Returns the Char for the given code point. Fails if the code point is invalid.
// @param codePoint: Number - the Unicode code point
// @returns Char
import foreign wasm fromCode : Number -> Char from "stdlib-external/char"

// Returns the next valid Unicode character by code point. Fails if the input character is U+10FFFF.
// @param char: Char - the input character
// @returns Char
let succ = (c) => {
  let codePoint = code(c)
  if (codePoint == max) {
    fail "no valid Unicode code point past U+10FFF"
  } else if (codePoint == 0xD7FF) {
    fromCode(0xE000)
  } else {
    fromCode(codePoint + 1)
  }
}

// Returns the previous valid Unicode character by code point. Fails if the input character is U+0000.
// @param char: Char - the input character
// @returns Char
let pred = (c) => {
  let codePoint = code(c)
  if (codePoint == min) {
    fail "no valid Unicode code point below U+0000"
  } else if (codePoint == 0xE000) {
    fromCode(0xD7FF)
  } else {
    fromCode(codePoint - 1)
  }
}

// Creates a new string containing the character.
// @param char: Char - the character to convert
// @returns String
import foreign wasm toString : Char -> String from "stdlib-external/char"
