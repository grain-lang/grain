/**
 * @module Range: Utilities for working with ranges. A range represents an intervalâ€”a set of values with a beginning and an end.
 * @example import Range from "range"
 * @since v0.3.0
 */

/**
 * @section Types: Type declarations included in the Range module.
 */

/**
 * Ranges can be inclusive or exclusive. When `Inclusive`, the end value will be included in operations. When `Exclusive`, the end value will be excluded from operations.
 */
export enum Range {
  Inclusive(Number, Number),
  Exclusive(Number, Number),
}

/**
 * @section Values: Functions and constants included in the Range module.
 */

/**
 * Checks if the given number is within the range.
 *
 * @param value: The number being checked
 * @param range: The range to check within
 * @returns Whether or not the value is within range
 *
 * @example Range.inRange(1, Range.Inclusive(0, 2)) == true
 * @example Range.inRange(10, Range.Inclusive(0, 2)) == false
 *
 * @since v0.3.0
 */
export let inRange = (value, range) => {
  match (range) {
    Inclusive(lower, upper) when value >= lower && value <= upper => true,
    Inclusive(upper, lower) when value >= lower && value <= upper => true,
    Exclusive(lower, upper) when value >= lower && value < upper => true,
    Exclusive(upper, lower) when value >= lower && value < upper => true,
    _ => false
  }
}

/**
 * Calls the given function with each number in the range. For increasing ranges, the value is increased by `1` in each iteration, and for decreasing ranges, the value is decreased by `1`. The value is always changed by `1`, even if non-integer values were provided in the range.
 *
 * @param fn: The function to be executed on each number in the range
 * @param range: The range to iterate
 *
 * @example Range.forEach(val => print(val), Range.Exclusive(0, 2))
 *
 * @since v0.3.0
 */
export let forEach = (fn: (Number) -> Void, range) => {
  match (range) {
    Inclusive(lower, upper) when lower <= upper => {
      let mut idx = lower;
      while (idx <= upper) {
        fn(idx);
        idx += 1;
      }
    },
    Inclusive(upper, lower) => {
      let mut idx = upper;
      while (idx >= lower) {
        fn(idx);
        idx -= 1;
      }
    },
    Exclusive(lower, upper) when lower <= upper => {
      let mut idx = lower;
      while (idx < upper) {
        fn(idx);
        idx += 1;
      }
    },
    Exclusive(upper, lower) => {
      let mut idx = upper;
      while (idx > lower) {
        fn(idx);
        idx -= 1;
      }
    },
  }
}

/**
 * Produces a list by calling the given function on each number included in the range. For increasing ranges, the value is increased by `1` in each iteration, and for decreasing ranges, the value is decreased by `1`. The value is always changed by `1`, even if non-integer values were provided in the range.
 *
 * @param fn: The function called on each number in the range that returns the value for the output list
 * @param range: The range to iterate
 * @returns A list containing all values returned from the `fn`
 *
 * @example Range.map(val => val * 2, Range.Inclusive(0, 2)) == [0, 2, 4]
 *
 * @since v0.3.2
 */
export let map = (fn, range) => {
  let mut result = []
  match (range) {
    Inclusive(lower, upper) when lower <= upper => {
      let mut idx = upper;
      while (idx >= lower) {
        result = [fn(idx), ...result];
        idx -= 1;
      }
    },
    Inclusive(upper, lower) => {
      let mut idx = lower;
      while (idx <= upper) {
        result = [fn(idx), ...result];
        idx += 1;
      }
    },
    Exclusive(lower, upper) when lower <= upper => {
      let mut idx = upper - 1;
      while (idx >= lower) {
        result = [fn(idx), ...result];
        idx -= 1;
      }
    },
    Exclusive(upper, lower) => {
      let mut idx = lower + 1;
      while (idx <= upper) {
        result = [fn(idx), ...result];
        idx += 1;
      }
    },
  }
  result
}
