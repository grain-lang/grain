/**
 * Utilities for working with ranges.
 *
 * A range represents an intervalâ€”a set of values with a beginning and an end.
 *
 * All functions in this module treat ranges as exclusive.
 *
 * @example include "range"
 *
 * @since v0.3.0
 * @history v0.6.0: Treats all ranges as exclusive
 */

module Range

/**
 * Checks if the given number is within the range.
 *
 * @param value: The number being checked
 * @param range: The range to check within
 * @returns Whether or not the value is within range
 *
 * @example Range.inRange(1, { range_start: 0, range_end: 2 }) == true
 * @example Range.inRange(10, { range_start: 0, range_end: 2 }) == false
 *
 * @since v0.3.0
 */
provide let inRange = (value, range) => {
  match (range) {
    { range_start: lower, range_end: upper } when (
      value >= lower && value < upper
    ) =>
      true,
    { range_start: upper, range_end: lower } when (
      value >= lower && value < upper
    ) =>
      true,
    _ => false,
  }
}

/**
 * Calls the given function with each number in the range.
 *
 * For increasing ranges, the value is increased by `1` in each iteration,
 * and for decreasing ranges, the value is decreased by `1`. The value is
 * always changed by `1`, even if non-integer values were provided in the range.
 *
 * @param fn: The function to be executed on each number in the range
 * @param range: The range to iterate
 *
 * @example Range.forEach(val => print(val), { range_start: 0, range_end: 2 })
 *
 * @since v0.3.0
 */
provide let forEach = (fn: Number -> Void, range) => {
  match (range) {
    { range_start: lower, range_end: upper } when lower <= upper => {
      let mut idx = lower
      while (idx < upper) {
        fn(idx)
        idx += 1
      }
    },
    { range_start: upper, range_end: lower } => {
      let mut idx = upper
      while (idx > lower) {
        fn(idx)
        idx -= 1
      }
    },
  }
}

/**
 * Produces a list by calling the given function on each number included in the range.
 *
 * For increasing ranges, the value is increased by `1` in each iteration,
 * and for decreasing ranges, the value is decreased by `1`. The value is
 * always changed by `1`, even if non-integer values were provided in the range.
 *
 * @param fn: The function called on each number in the range that returns the value for the output list
 * @param range: The range to iterate
 * @returns A list containing all values returned from the `fn`
 *
 * @example Range.map(val => val * 2, { range_start: 0, range_end: 3 }) == [0, 2, 4]
 *
 * @since v0.3.2
 */
provide let map = (fn, range) => {
  let mut result = []
  match (range) {
    { range_start: lower, range_end: upper } when lower <= upper => {
      let mut idx = upper - 1
      while (idx >= lower) {
        result = [fn(idx), ...result]
        idx -= 1
      }
    },
    { range_start: upper, range_end: lower } => {
      let mut idx = lower + 1
      while (idx <= upper) {
        result = [fn(idx), ...result]
        idx += 1
      }
    },
  }
  result
}
