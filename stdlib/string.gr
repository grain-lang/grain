export *

// Concatenate two strings.
// @param str1: String - The first string
// @param str2: String - The second string
// @returns String
let concat = (++)

// Get the character length of a string.
// @param input: String - The string to check
// @returns Number
import foreign wasm length : String -> Number from "stdlib-external/string"

// Get the byte length of a string.
// @param input: String - The string to check
// @returns Number
import foreign wasm byteLength : String -> Number from "stdlib-external/string"

import foreign wasm indexOf : (String, String) -> Number from "stdlib-external/string"
// Find the start index of a substring.
// @param sub: String - The substring to find
// @param input: String - The string to check
// @returns Option<Number>
let indexOf = (p, s) => {
  let result = indexOf(p, s)
  if (result < 0) {
    None
  } else {
    Some(result)
  }
}

// Split a string into its UTF-8 characters
// @param input: String - The string to split
// @returns Array<Char>
import foreign wasm explode : String -> Array<Char> from "stdlib-external/string"

// Create a string from an array of characters
// @param input: Array<Char> - The array to implode
// @returns String
import foreign wasm implode : Array<Char> -> String from "stdlib-external/string"

// Split a string by the given sequence
// @param sequence: String - The sequence to split on
// @param input: String - The string to split
// @returns Array<String>
import foreign wasm split : (String, String) -> Array<String> from "stdlib-external/string"

// Get a portion of a string.
// @param from: Number - The start index of the substring
// @param to: Number - The end index of the substring
// @param input: String - The input string
// @returns String
import foreign wasm slice : (Number, Number, String) -> String from "stdlib-external/string"

// Check if a string contains a substring.
// @param pattern: String - The substring to check
// @param input: String - The input string
// @returns Bool
import foreign wasm contains : (String, String) -> Bool from "stdlib-external/string"

// Check if a string begins with another string.
// @param pattern: String - The substring to check
// @param input: String - The input string
// @returns Bool
import foreign wasm startsWith : (String, String) -> Bool from "stdlib-external/string"

// Check if a string ends with another string.
// @param pattern: String - The substring to check
// @param input: String - The input string
// @returns Bool
import foreign wasm endsWith : (String, String) -> Bool from "stdlib-external/string"
