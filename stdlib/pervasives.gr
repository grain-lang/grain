export *

import Exception from "runtime/exception"

import { equal as (==) } from "runtime/equal"

import {
  numberIncr as incr,
  numberDecr as decr,
  numberPlus as (+),
  numberMinus as (-),
  numberTimes as (*),
  numberDivide as (/),
  numberMod as (%),
  numberLess as (<),
  numberGreater as (>),
  numberLessEqual as (<=),
  numberGreaterEqual as (>=),
  numberLnot as lnot,
  numberLand as (&),
  numberLor as (|),
  numberLxor as (^),
  numberLsl as (<<),
  numberLsr as (>>>),
  numberAsr as (>>)
} from "runtime/numbers"

// Math operations
export incr
export decr
export (+)
export (-)
export (*)
export (/)
export (%)

// Number comparisons
export (<)
export (>)
export (<=)
export (>=)

// Number bit/logical operations
export lnot

export (&)
export (|)
export (^)

export (<<)
export (>>>)
export (>>)


// Number coercions & conversions

// [TODO] (#311) Commented until we nail down semantics
// import foreign wasm convertExactToInexact : Number -> Number as inexact from "stdlib-external/runtime"
// import foreign wasm convertInexactToExact : Number -> Number as exact from "stdlib-external/runtime"

// Boolean operations
primitive (!) : Bool -> Bool = "@not"
primitive (&&) : (Bool, Bool) -> Bool = "@and"
primitive (||) : (Bool, Bool) -> Bool = "@or"

// Box operations
primitive box : a -> Box<a> = "@box"
primitive unbox : Box<a> -> a = "@unbox"

// Exceptions
exception Failure(String)
exception InvalidArgument(String)

// Other operations
primitive ignore : a -> Void = "@ignore"
primitive assert : Bool -> Void = "@assert"
primitive throw : Exception -> a = "@throw"
let fail : String -> a = msg => throw Failure(msg)

import { toString, print, concat as (++) } from "runtime/string"

// Converts the given value to a string
export toString
// Prints the given value to the console.
export print

// String operations
export (++)

// Checks the given items for structural equality.
export (==)
let (!=) : (a, a) -> Bool = (x, y) => !(x == y)
// Checks the given items for physical equality.
primitive (is) : (a, a) -> Bool = "@is"
// The opposite of is operator
let (isnt) : (a, a) -> Bool = (x, y) => !(x is y)

export enum List<a> { [], [...](a, List<a>) }

// Maybe some data, maybe not!
enum Option<a> { Some(a), None }

// Maybe some data, maybe an error!
enum Result<t, e> { Ok(t), Err(e) }

// Identity function
let identity = (x) => x

// Setup exception printing
Exception.dangerouslyRegisterPrinter(e => {
  match (e) {
    Failure(msg) => Some("Failure: " ++ msg),
    InvalidArgument(msg) => Some("Invalid argument: " ++ msg),
    _ => None
  }
})

Exception.registerBasePrinter(e => Some(toString(e)))
