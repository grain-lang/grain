/* grainc-flags --no-pervasives */

/**
 * This module is automatically imported into every Grain program. You can think of it as the global environment. Although it is automatically imported, it can still be imported manually.
 *
 * @example include "pervasives"
 *
 * @since v0.1.0
 */

module Pervasives

include "runtime/exception"
include "runtime/unsafe/memory"
include "runtime/unsafe/wasmi32"

include "runtime/equal"
from Equal use { equal as (==) }
include "runtime/compare"
from Compare use { compare }

include "runtime/numbers"
from Numbers use {
  incr,
  decr,
  (+),
  (-),
  (*),
  (/),
  (%),
  (**),
  (<),
  (>),
  (<=),
  (>=),
  lnot,
  (&),
  (|),
  (^),
  (<<),
  (>>>),
  (>>),
}
include "runtime/string"
from String use { toString, print, concat as (++) }

/**
 * Computes the logical NOT (`!`) of the given operand.
 * Inverts the given Boolean value.
 *
 * @param value: The operand
 * @returns The inverted value
 *
 * @example !true // false
 * @example !false // true
 *
 * @since v0.1.0
 */
provide primitive (!) = "@not"

/**
 * Computes the logical AND (`&&`) of the given operands.
 *
 * If the first operand is `false`, returns `false` without evaluating the second operand.
 * If the first operand is `true`, returns the value of the second operand.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns The first operand if it is `false` or the value of the second operand otherwise
 *
 * @since v0.1.0
 */
provide primitive (&&) = "@and"

/**
 * Computes the logical OR `||` of the given operands.
 *
 * If the first operand is `true`, returns `true` without evaluating the second operand.
 * If the first operand is `false`, returns the value of the second operand.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns The first operand if it is `true` or the value of the second operand otherwise
 *
 * @since v0.1.0
 */
provide primitive (||) = "@or"

provide { (==) }

/**
 * Check that two values are **not** equal. This checks for structural equality,
 * so it also works for comparing things like tuples and lists.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns `false` if the values are structurally equal or `true` otherwise
 *
 * @since v0.2.0
 */
provide let (!=): (a, a) => Bool = (x, y) => !(x == y)

/**
 * Checks that two values are physically equal.
 * Use this operator if you don’t need or want structural equality.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns `true` if the values are physically equal or `false` otherwise
 *
 * @since v0.1.0
 */
provide primitive (is) = "@is"

/**
 * Checks that two values are **not** physically equal.
 * Use this operator if you don’t need or want structural equality.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns `false` if the values are physically equal or `true` otherwise
 *
 * @since v0.2.0
 */
provide let (isnt): (a, a) => Bool = (x, y) => !(x is y)

provide {
  (<),
  (>),
  (<=),
  (>=),
  compare,
  (+),
  (-),
  (*),
  (/),
  (%),
  (**),
  incr,
  decr,
  (++),
  lnot,
  (&),
  (|),
  (^),
  (<<),
  (>>>),
  (>>),
}

// Number coercions & conversions

// TODO(#311): Commented until we nail down semantics
// foreign wasm convertExactToInexact : Number => Number as inexact from "stdlib-external/runtime"
// foreign wasm convertInexactToExact : Number => Number as exact from "stdlib-external/runtime"

provide { toString, print }

/**
 * Accepts any value and always returns `void`.
 *
 * @param value: The value to ignore
 *
 * @since v0.1.0
 */
provide primitive ignore = "@ignore"

/**
 * Assert that the given Boolean condition is `true`.
 *
 * @param condition: The condition to assert
 *
 * @throws AssertionError: When the `condition` is false
 *
 * @example assert 3 > 2
 * @example assert true
 *
 * @since v0.1.0
 */
provide primitive assert = "@assert"

// Exceptions
provide exception Failure(String)
provide exception InvalidArgument(String)

/**
 * Throw an exception. Currently, exceptions cannot be caught and will crash your program.
 *
 * @param exception: The exception to be thrown
 * @returns Anything and nothing—your program won't continue past a throw
 *
 * @since v0.3.0
 */
provide primitive throw = "@throw"

/**
 * Unconditionally throw a `Failure` exception with a message.
 * Currently, Exceptions cannot be caught and will crash your program.
 *
 * @param message: The reason for the failure
 * @returns Anything and nothing—your program won't continue past a fail expression
 */
provide let fail: String => a = msg => throw Failure(msg)

/**
 * Provides the operand untouched.
 *
 * @param value: The value to return
 * @returns The value untouched
 *
 * @since v0.2.0
 */
provide let identity = x => x

/**
 * Creates a box containing the given initial value.
 * Values inside a box can be swapped out with the `:=` operator.
 * Generally, `let mut` expressions are preferable to using a Box.
 *
 * @param initial: The initial value inside the box
 * @returns The box containing the initial value
 *
 * @since v0.1.0
 */
provide primitive box = "@box"

/**
 * Retrieves the current value from a box.
 *
 * @param box: The box to unwrap
 * @returns The value inside the box
 *
 * @since v0.1.0
 */
provide primitive unbox = "@unbox"

// Setup exception printing
primitive elideTypeInfo = "@meta.elide_type_info"
@unsafe
let rec setupExceptions = () => {
  Exception.dangerouslyRegisterPrinter(e => {
    match (e) {
      Failure(msg) => Some("Failure: " ++ msg),
      InvalidArgument(msg) => Some("Invalid argument: " ++ msg),
      _ => None,
    }
  })

  // If type information is elided, remove dependency on toString as
  // it will have no effect on exceptions
  if (!elideTypeInfo) {
    Exception.dangerouslyRegisterBasePrinter(e => Some(toString(e)))
  }
}

setupExceptions()
