import Exception from "runtime/exception"
import Memory from "runtime/unsafe/memory"
import WasmI32 from "runtime/unsafe/wasmi32"

import { equal as (==) } from "runtime/equal"

import {
  incr,
  decr,
  (+),
  (-),
  (*),
  (/),
  (%),
  (<),
  (>),
  (<=),
  (>=),
  lnot,
  (&),
  (|),
  (^),
  (<<),
  (>>>),
  (>>),
} from "runtime/numbers"
import { toString, print, concat as (++) } from "runtime/string"

// Math operations
export incr
export decr
export (+)
export (-)
export (*)
export (/)
export (%)

// Number comparisons
export (<)
export (>)
export (<=)
export (>=)

// Number bit/logical operations
export lnot

export (&)
export (|)
export (^)

export (<<)
export (>>>)
export (>>)

// Number coercions & conversions

// [TODO] (#311) Commented until we nail down semantics
// import foreign wasm convertExactToInexact : Number -> Number as inexact from "stdlib-external/runtime"
// import foreign wasm convertInexactToExact : Number -> Number as exact from "stdlib-external/runtime"

// Boolean operations
export primitive (!): Bool -> Bool = "@not"
export primitive (&&): (Bool, Bool) -> Bool = "@and"
export primitive (||): (Bool, Bool) -> Bool = "@or"

// Box operations
export primitive box: a -> Box<a> = "@box"
export primitive unbox: Box<a> -> a = "@unbox"

// Exceptions
export exception Failure(String)
export exception InvalidArgument(String)

// Other operations
export primitive ignore: a -> Void = "@ignore"
export primitive assert: Bool -> Void = "@assert"
export primitive throw: Exception -> a = "@throw"
export let fail: String -> a = msg => throw Failure(msg)

// Converts the given value to a string
export toString
// Prints the given value to the console.
export print

// String operations
export (++)

// Checks the given items for structural equality.
export (==)
export let (!=): (a, a) -> Bool = (x, y) => !(x == y)
// Checks the given items for physical equality.
export primitive (is): (a, a) -> Bool = "@is"
// The opposite of is operator
export let (isnt): (a, a) -> Bool = (x, y) => !(x is y)

export enum List<a> {
  [],
  [...](a, List<a>),
}

/**
 * @deprecated This will be removed in a future release of Grain.
 */
export let cons = (a, b) =>
  [
    a,
    ...b
  ] // <- workaround for (grain-lang/grain#802) [TODO] fix #802 and delete
export let empty = [] // <- for parity with `cons`, but should be deleted as well

// Maybe some data, maybe not!
export enum Option<a> {
  Some(a),
  None,
}

// Maybe some data, maybe an error!
export enum Result<t, e> {
  Ok(t),
  Err(e),
}

// Identity function
export let identity = x => x

// Setup exception printing
@disableGC
let rec setupExceptions = () => {
  Exception.dangerouslyRegisterPrinter(e => {
    match (e) {
      Failure(msg) => Some("Failure: " ++ msg),
      InvalidArgument(msg) => Some("Invalid argument: " ++ msg),
      _ => None,
    }
  })

  Exception.dangerouslyRegisterBasePrinter(e => Some(toString(e)))
  Memory.decRef(WasmI32.fromGrain(setupExceptions))
  void
}

setupExceptions()
