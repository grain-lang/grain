/* grainc-flags --no-pervasives */

import Memory from "runtime/unsafe/memory"
import Tags from "runtime/unsafe/tags"
import Exception from "runtime/exception"

import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import WasmF32 from "runtime/unsafe/wasmf32"
import WasmF64 from "runtime/unsafe/wasmf64"

primitive (!): Bool -> Bool = "@not"
primitive (&&): (Bool, Bool) -> Bool = "@and"
primitive (||): (Bool, Bool) -> Bool = "@or"
primitive throw: Exception -> a = "@throw"

exception UnknownNumberTag

import {
  newRational,
  newInt32,
  newInt64,
  newFloat32,
  newFloat64,
} from "runtime/dataStructures"

export newRational
export newInt32
export newInt64
export newFloat32
export newFloat64

@unsafe
let _I32_MAX = 0x7fffffffN
@unsafe
let _I32_MIN = -0x7fffffffN
@unsafe
let _F32_MAX = 3.40282347e+38W
@unsafe
let _F32_MIN = 1.401298464324817e-45W
@unsafe
let _F32_MAX_SAFE_INTEGER = 16777215.w
@unsafe
let _F64_MAX_SAFE_INTEGER = 9007199254740991.W

let (==) = WasmI32.eq
let (!=) = WasmI32.ne

@unsafe
let tagSimple = x => {
  WasmI32.xor(WasmI32.shl(x, 1n), 1n)
}

@unsafe
let untagSimple = x => {
  WasmI32.shrS(x, 1n)
}

@unsafe
let isSimpleNumber = x => {
  WasmI32.eq(
    WasmI32.and(x, Tags._GRAIN_NUMBER_TAG_MASK),
    Tags._GRAIN_NUMBER_TAG_TYPE
  )
}

@unsafe
export let isBoxedNumber = x => {
  if (
    WasmI32.eq(
      WasmI32.and(x, Tags._GRAIN_GENERIC_TAG_MASK),
      Tags._GRAIN_GENERIC_HEAP_TAG_TYPE
    )
  ) {
    WasmI32.eq(WasmI32.load(x, 0n), Tags._GRAIN_BOXED_NUM_HEAP_TAG)
  } else {
    false
  }
}

@unsafe
export let isFloat = x => {
  if (isBoxedNumber(x)) {
    let tag = WasmI32.load(x, 4n)
    WasmI32.eq(tag, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) ||
    WasmI32.eq(tag, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)
  } else {
    false
  }
}

@unsafe
export let isNumber = x => {
  // x is a number if it is a literal number or a boxed_num heap value
  isSimpleNumber(x) || isBoxedNumber(x)
}

@unsafe
let safeI64toI32 = x => {
  if (WasmI64.gtS(x, _I32_MAX) || WasmI64.ltS(x, _I32_MIN)) {
    throw Exception.Overflow
  } else {
    WasmI32.wrapI64(x)
  }
}

@unsafe
let i32neg = x => WasmI32.sub(0n, x)

@unsafe
let i64not = x => WasmI64.xor(x, 0xffffffffffffffffN)
@unsafe
let i64neg = x => WasmI64.sub(0N, x)

// https://en.wikipedia.org/wiki/Binary_GCD_algorithm
@unsafe
let rec gcdHelp = (x, y) => {
  if (WasmI64.eq(x, y) || WasmI64.eqz(x)) {
    y
  } else if (WasmI64.eqz(y)) {
    x
  } else if (WasmI64.ne(WasmI64.and(i64not(x), 1N), 0N)) {
    // x is even
    if (WasmI64.ne(WasmI64.and(y, 1N), 0N)) {
      // y is odd
      gcdHelp(WasmI64.shrS(x, 1N), y)
    } else {
      WasmI64.shl(gcdHelp(WasmI64.shrS(x, 1N), WasmI64.shrS(y, 1N)), 1N)
    }
  } else if (WasmI64.ne(WasmI64.and(i64not(y), 1N), 0N)) {
    // y is even and x is odd
    gcdHelp(x, WasmI64.shrS(y, 1N))
  } else if (WasmI64.gtS(x, y)) {
    gcdHelp(WasmI64.sub(x, y), y)
  } else {
    gcdHelp(WasmI64.sub(y, x), x)
  }
}

@unsafe
let gcd = (x, y) => {
  // Algorithm above breaks on negatives, so
  // we make sure that they are positive at the beginning
  let x = if (WasmI64.ltS(x, 0N)) {
    i64neg(x)
  } else {
    x
  }
  let y = if (WasmI64.ltS(y, 0N)) {
    i64neg(y)
  } else {
    y
  }
  gcdHelp(x, y)
}

@unsafe
let gcd32 = (x, y) => {
  WasmI32.wrapI64(gcd(WasmI64.extendI32S(x), WasmI64.extendI32S(y)))
}

@unsafe
export let reducedInteger = x => {
  if (WasmI64.gtS(x, _I32_MAX) || WasmI64.ltS(x, _I32_MIN)) {
    newInt64(x)
  } else if (
    WasmI64.gtS(x, WasmI64.shrS(_I32_MAX, 1N)) ||
    WasmI64.ltS(x, WasmI64.shrS(_I32_MIN, 1N))
  ) {
    newInt32(WasmI32.wrapI64(x))
  } else {
    tagSimple(WasmI32.wrapI64(x))
  }
}

@unsafe
let reducedFraction = (x, y) => {
  let mut x = x
  let mut y = y

  if (WasmI32.ltS(y, 0n)) {
    // Normalization 1: Never do negative/negative
    // Normalization 2: Never allow a negative denominator
    x = i32neg(x)
    y = i32neg(y)
  }
  if (WasmI32.eqz(y)) {
    throw Exception.DivisionByZero
  }
  if (WasmI32.eqz(WasmI32.remS(x, y))) {
    // Avoid allocation if possible
    reducedInteger(WasmI64.extendI32S(WasmI32.divS(x, y)))
  } else {
    // x not evenly divisible by y
    let factor = gcd32(x, y)
    newRational(WasmI32.divS(x, factor), WasmI32.divS(y, factor))
  }
}

@unsafe
let reducedFraction64 = (x, y) => {
  let mut x = x
  let mut y = y

  if (WasmI64.ltS(y, 0N)) {
    // Normalization 1: Never do negative/negative
    // Normalization 2: Never allow a negative denominator
    x = i64neg(x)
    y = i64neg(y)
  }
  if (WasmI64.eqz(y)) {
    throw Exception.DivisionByZero
  }
  if (WasmI64.eqz(WasmI64.remS(x, y))) {
    reducedInteger(WasmI64.divS(x, y))
  } else {
    let factor = gcd(x, y)
    let xdiv = safeI64toI32(WasmI64.divS(x, factor))
    let ydiv = safeI64toI32(WasmI64.divS(y, factor))
    newRational(xdiv, ydiv)
  }
}

@unsafe
let safeI32Multiply = (x, y) => {
  let prod = WasmI64.mul(WasmI64.extendI32S(x), WasmI64.extendI32S(y))
  if (WasmI64.gtS(prod, _I32_MAX) || WasmI64.ltS(prod, _I32_MIN)) {
    throw Exception.Overflow
  }
  WasmI32.wrapI64(prod)
}

@unsafe
let safeI64Multiply = (x, y) => {
  let prod = WasmI64.mul(x, y)
  if (WasmI64.ne(x, 0N)) {
    if (WasmI64.ne(WasmI64.divS(prod, x), y)) {
      throw Exception.Overflow
    }
  }
  prod
}

// Accessor functions

/* Memory Layout:
 * [GRAIN_BOXED_NUM_HEAP_TAG , <boxed_num tag> , <number-specific payload>...]
 * (payload depends on boxed_num tag...see below)
 *
 * Payloads:
 * For Int32:
 * [number]
 *
 * For Int64:
 * [number: i64]
 *
 * For Float32:
 * [number: f32]
 *
 * For Float64:
 * [number: f64]
 *
 * For Rational:
 * [numerator, denominator]
 */

@unsafe
export let boxedNumberTag = xptr => {
  WasmI32.load(xptr, 4n)
}

@unsafe
export let boxedInt32Number = xptr => {
  WasmI32.load(xptr, 8n)
}

@unsafe
export let boxedInt64Number = xptr => {
  WasmI64.load(xptr, 8n)
}

@unsafe
export let boxedFloat32Number = xptr => {
  WasmF32.load(xptr, 8n)
}

@unsafe
export let boxedFloat64Number = xptr => {
  WasmF64.load(xptr, 8n)
}

@unsafe
export let boxedRationalNumerator = xptr => {
  WasmI32.load(xptr, 8n)
}

@unsafe
export let boxedRationalDenominator = xptr => {
  WasmI32.load(xptr, 12n)
}

@unsafe
export let coerceNumberToWasmF32 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  if (isSimpleNumber(x)) {
    WasmF32.convertI32S(untagSimple(x))
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        WasmF32.convertI32S(boxedInt32Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        WasmF32.convertI64S(boxedInt64Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        WasmF32.div(
          WasmF32.convertI32S(boxedRationalNumerator(x)),
          WasmF32.convertI32S(boxedRationalDenominator(x))
        )
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        boxedFloat32Number(x)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let xval = boxedFloat64Number(x)
        if (WasmF64.gt(xval, _F32_MAX) || WasmF64.lt(xval, _F32_MIN)) {
          // Not an actual return value
          throw Exception.Overflow
        } else {
          WasmF32.demoteF64(xval)
        }
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
export let coerceNumberToWasmF64 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  if (isSimpleNumber(x)) {
    WasmF64.convertI32S(untagSimple(x))
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        WasmF64.convertI32S(boxedInt32Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        WasmF64.convertI64S(boxedInt64Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        WasmF64.div(
          WasmF64.convertI32S(boxedRationalNumerator(x)),
          WasmF64.convertI32S(boxedRationalDenominator(x))
        )
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        WasmF64.promoteF32(boxedFloat32Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        boxedFloat64Number(x)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
export let coerceNumberToWasmI64 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  if (isSimpleNumber(x)) {
    WasmI64.extendI32S(untagSimple(x))
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        WasmI64.extendI32S(boxedInt32Number(x))
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        boxedInt64Number(x)
      },
      _ => {
        // rationals are never integral, and we refuse to coerce floats to ints
        throw Exception.NumberNotIntlike
      },
    }
  }
}

@unsafe
export let coerceNumberToWasmI32 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  if (isSimpleNumber(x)) {
    untagSimple(x)
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        boxedInt32Number(x)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let int64 = boxedInt64Number(x)
        if (WasmI64.gtS(int64, _I32_MAX) || WasmI64.ltS(int64, _I32_MIN)) {
          throw Exception.Overflow
        }
        WasmI32.wrapI64(int64)
      },
      _ => {
        // rationals are never integral, and we refuse to coerce floats to ints
        throw Exception.NumberNotIntlike
      },
    }
  }
}

@unsafe
let isIntegerF32 = value => {
  WasmF32.eq(value, WasmF32.trunc(value))
}

@unsafe
let isIntegerF64 = value => {
  WasmF64.eq(value, WasmF64.trunc(value))
}

@unsafe
let isSafeIntegerF32 = value => {
  WasmF32.le(WasmF32.abs(value), _F32_MAX_SAFE_INTEGER) &&
  WasmF32.eq(WasmF32.trunc(value), value)
}

@unsafe
let isSafeIntegerF64 = value => {
  WasmF64.le(WasmF64.abs(value), _F64_MAX_SAFE_INTEGER) &&
  WasmF64.eq(WasmF64.trunc(value), value)
}

/** Number-aware equality checking
  * The basic idea is that we first figure out the type of the
  * number on the LHS, and then figure out if the RHS number is equal
  * to that number
  *
  * NOTE: The preconditions in these functions are important, so do NOT
  *       export them!
  */

@unsafe
let numberEqualSimpleHelp = (x, y) => {
  // PRECONDITION: x is a "simple" number (value tag is 0) and x !== y and isNumber(y)
  if (isSimpleNumber(y)) {
    // x !== y, so they must be different
    false
  } else {
    let xval = untagSimple(x) // <- actual int value of x
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt32Number(y)
        WasmI32.eq(xval, yBoxedVal)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        WasmI64.eq(WasmI64.extendI32S(xval), yBoxedVal)
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        // NOTE: we always store in most reduced form, so a rational and an int are never equal
        false
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat32Number(y)
        isSafeIntegerF32(yBoxedVal) &&
        WasmF32.eq(WasmF32.convertI32S(xval), yBoxedVal)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat64Number(y)
        isSafeIntegerF64(yBoxedVal) &&
        WasmF64.eq(WasmF64.convertI32S(xval), yBoxedVal)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberEqualInt64Help = (xBoxedVal, y) => {
  // PRECONDITION: x !== y and isNumber(y)
  // Basic number:
  if (isSimpleNumber(y)) {
    WasmI64.eq(xBoxedVal, WasmI64.extendI32S(untagSimple(y)))
  } else {
    // Boxed number:
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt32Number(y)
        WasmI64.eq(xBoxedVal, WasmI64.extendI32S(yBoxedVal))
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        WasmI64.eq(xBoxedVal, yBoxedVal)
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        // NOTE: we always store in most reduced form, so a rational and an int are never equal
        false
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat32Number(y)
        isSafeIntegerF32(yBoxedVal) &&
        WasmI64.eq(xBoxedVal, WasmI64.truncF32S(yBoxedVal))
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat64Number(y)
        isSafeIntegerF64(yBoxedVal) &&
        WasmI64.eq(xBoxedVal, WasmI64.truncF64S(yBoxedVal))
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberEqualInt32Help = (xBoxedVal, y) => {
  // We can just pretend it's 64-bit for the equality check
  numberEqualInt64Help(WasmI64.extendI32S(xBoxedVal), y)
}

@unsafe
let numberEqualRationalHelp = (xptr, y) => {
  // PRECONDITION: x is rational and x !== y and isNumber(y)
  // Basic number: (we know it's not equal, since we never store ints as rationals)
  if (isSimpleNumber(y)) {
    false
  } else {
    let xNumerator = boxedRationalNumerator(xptr)
    let xDenominator = boxedRationalDenominator(xptr)
    // Boxed number:
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        false
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        false
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let yNumerator = boxedRationalNumerator(y)
        let yDenominator = boxedRationalDenominator(y)
        WasmI32.eq(xNumerator, yNumerator) &&
        WasmI32.eq(xDenominator, yDenominator)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat32Number(y)
        let xAsFloat = WasmF32.div(
          WasmF32.convertI32S(xNumerator),
          WasmF32.convertI32S(xDenominator)
        )
        // TODO: (#303) maybe we should have some sort of tolerance?
        WasmF32.eq(xAsFloat, yBoxedVal)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat64Number(y)
        let xAsFloat = WasmF64.div(
          WasmF64.convertI32S(xNumerator),
          WasmF64.convertI32S(xDenominator)
        )
        // TODO: (#303) maybe we should have some sort of tolerance?
        WasmF64.eq(xAsFloat, yBoxedVal)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberEqualFloat64Help = (x, y) => {
  let xIsInteger = isIntegerF64(x)
  // Basic number:
  if (isSimpleNumber(y)) {
    xIsInteger && WasmF64.eq(x, WasmF64.convertI32S(untagSimple(y)))
  } else {
    // Boxed number
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt32Number(y)
        isSafeIntegerF64(x) && WasmF64.eq(x, WasmF64.convertI32S(yBoxedVal))
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        isSafeIntegerF64(x) && WasmF64.eq(x, WasmF64.convertI64S(yBoxedVal))
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let yNumerator = boxedRationalNumerator(y)
        let yDenominator = boxedRationalDenominator(y)
        let yAsFloat = WasmF64.div(
          WasmF64.convertI32S(yNumerator),
          WasmF64.convertI32S(yDenominator)
        )
        WasmF64.eq(x, yAsFloat)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat32Number(y)
        // TODO: (#303) maybe we should have some sort of tolerance?
        WasmF64.eq(x, WasmF64.promoteF32(yBoxedVal))
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat64Number(y)
        // TODO: (#303) maybe we should have some sort of tolerance?
        WasmF64.eq(x, yBoxedVal)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberEqualFloat32Help = (x, y) => {
  let xIsInteger = isIntegerF32(x)
  // Basic number:
  if (isSimpleNumber(y)) {
    xIsInteger && WasmF32.eq(x, WasmF32.convertI32S(untagSimple(y)))
  } else {
    // Boxed number
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        // Special case: f32/f32 equality (need to handle here without promotion)
        WasmF32.eq(x, boxedFloat32Number(y))
      },
      _ => {
        numberEqualFloat64Help(WasmF64.promoteF32(x), y)
      },
    }
  }
}

@unsafe
export let numberEqual = (x, y) => {
  if (isSimpleNumber(x)) {
    // Short circuit if non-pointer value is the same
    WasmI32.eq(x, y) || numberEqualSimpleHelp(x, y)
  } else {
    // Boxed number
    let xBoxedNumberTag = boxedNumberTag(x)
    match (xBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let xBoxedVal = boxedInt32Number(x)
        numberEqualInt32Help(xBoxedVal, y)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let xBoxedVal = boxedInt64Number(x)
        numberEqualInt64Help(xBoxedVal, y)
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        numberEqualRationalHelp(x, y)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        numberEqualFloat32Help(boxedFloat32Number(x), y)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        numberEqualFloat64Help(boxedFloat64Number(x), y)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

/*
 * ===== PLUS & MINUS =====
 * (same schema as equal())
 */

@unsafe
let numberAddSubSimpleHelp = (x, y, isSub) => {
  // PRECONDITION: x is a "simple" number (value tag is 0) and isNumber(y)
  if (isSimpleNumber(y)) {
    let x = WasmI64.extendI32S(untagSimple(x))
    let y = WasmI64.extendI32S(untagSimple(y))
    let result = if (isSub) {
      WasmI64.sub(x, y)
    } else {
      WasmI64.add(x, y)
    }
    reducedInteger(result)
  } else {
    let xval = untagSimple(x) // <- actual int value of x
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let xval = WasmI64.extendI32S(xval)
        let yBoxedVal = WasmI64.extendI32S(boxedInt32Number(y))
        let result = if (isSub) WasmI64.sub(xval, yBoxedVal)
          else WasmI64.add(xval, yBoxedVal)
        reducedInteger(result)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        let xval64 = WasmI64.extendI32S(xval)
        let result = if (isSub) WasmI64.sub(xval64, yBoxedVal)
          else WasmI64.add(xval64, yBoxedVal)
        if (WasmI64.geS(yBoxedVal, 0N) && WasmI64.ltS(result, xval64)) {
          throw Exception.Overflow
        } else if (WasmI64.ltS(yBoxedVal, 0N) && WasmI64.gtS(result, xval64)) {
          throw Exception.Overflow
        } else {
          reducedInteger(result)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let yNumerator = WasmI64.extendI32S(boxedRationalNumerator(y))
        let yDenominator = WasmI64.extendI32S(boxedRationalDenominator(y))
        let expandedXNumerator = safeI64Multiply(
          WasmI64.extendI32S(xval),
          yDenominator
        )
        let result = if (isSub) WasmI64.sub(expandedXNumerator, yNumerator)
          else WasmI64.add(expandedXNumerator, yNumerator)
        if (WasmI64.ltS(result, _I32_MIN) || WasmI64.gtS(result, _I32_MAX)) {
          throw Exception.Overflow
        }
        reducedFraction64(result, yDenominator)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat32Number(y)
        let xval = WasmF32.convertI32S(xval)
        let result = if (isSub) WasmF32.sub(xval, yBoxedVal)
          else WasmF32.add(xval, yBoxedVal)
        // TODO: (#304) is this safe?
        newFloat32(result)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedFloat64Number(y)
        let xval = WasmF64.convertI32S(xval)
        let result = if (isSub) WasmF64.sub(xval, yBoxedVal)
          else WasmF64.add(xval, yBoxedVal)
        newFloat64(result)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberAddSubInt64Help = (xval, y, isSub) => {
  if (isSimpleNumber(y)) {
    let yval = WasmI64.extendI32S(untagSimple(y))
    let result = if (isSub) WasmI64.sub(xval, yval) else WasmI64.add(xval, yval)
    if (WasmI64.geS(yval, 0N) && WasmI64.ltS(result, xval)) {
      throw Exception.Overflow
    } else if (WasmI64.ltS(yval, 0N) && WasmI64.gtS(result, xval)) {
      throw Exception.Overflow
    }
    reducedInteger(result)
  } else {
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let yBoxedVal = WasmI64.extendI32S(boxedInt32Number(y))
        let result = if (isSub) WasmI64.sub(xval, yBoxedVal)
          else WasmI64.add(xval, yBoxedVal)
        reducedInteger(result)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        let xval64 = xval
        let result = if (isSub) WasmI64.sub(xval64, yBoxedVal)
          else WasmI64.add(xval64, yBoxedVal)
        if (WasmI64.geS(yBoxedVal, 0N) && WasmI64.ltS(result, xval64)) {
          throw Exception.Overflow
        } else if (WasmI64.ltS(yBoxedVal, 0N) && WasmI64.gtS(result, xval64)) {
          throw Exception.Overflow
        } else {
          reducedInteger(result)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let yNumerator = WasmI64.extendI32S(boxedRationalNumerator(y))
        let yDenominator = WasmI64.extendI32S(boxedRationalDenominator(y))
        let expandedXNumerator = safeI64Multiply(xval, yDenominator)
        let result = if (isSub) WasmI64.sub(expandedXNumerator, yNumerator)
          else WasmI64.add(expandedXNumerator, yNumerator)
        if (WasmI64.ltS(result, _I32_MIN) || WasmI64.gtS(result, _I32_MAX)) {
          throw Exception.Overflow
        }
        reducedFraction64(result, yDenominator)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let xval = WasmF32.convertI64S(xval)
        let yBoxedVal = boxedFloat32Number(y)
        let result = if (isSub) WasmF32.sub(xval, yBoxedVal)
          else WasmF32.add(xval, yBoxedVal)
        // TODO: (#304) this isn't safe enough
        newFloat32(result)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let xval = WasmF64.convertI64S(xval)
        let yBoxedVal = boxedFloat64Number(y)
        let result = if (isSub) WasmF64.sub(xval, yBoxedVal)
          else WasmF64.add(xval, yBoxedVal)
        newFloat64(result)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberAddSubFloat32Help = (xval, y, isSub) => {
  if (
    !isSimpleNumber(y) &&
    WasmI32.eq(boxedNumberTag(y), Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)
  ) {
    // Special case: promote to f64 if RHS is f64
    let xval = WasmF64.promoteF32(xval)
    let yval = boxedFloat64Number(y)
    let result = if (isSub) WasmF64.sub(xval, yval) else WasmF64.add(xval, yval)
    newFloat64(result)
  } else {
    // incRef y to reuse it via WasmI32.toGrain
    Memory.incRef(y)
    let yval = coerceNumberToWasmF32(WasmI32.toGrain(y): Number)
    let result = if (isSub) WasmF32.sub(xval, yval) else WasmF32.add(xval, yval)
    newFloat32(result)
  }
}

@unsafe
let numberAddSubFloat64Help = (xval, y, isSub) => {
  // incRef y to reuse it via WasmI32.toGrain
  Memory.incRef(y)
  let yval = coerceNumberToWasmF64(WasmI32.toGrain(y): Number)
  let result = if (isSub) WasmF64.sub(xval, yval) else WasmF64.add(xval, yval)
  newFloat64(result)
}

@unsafe
let numberAddSubInt32Help = (xval, y, isSub) => {
  numberAddSubInt64Help(WasmI64.extendI32S(xval), y, isSub)
}

@unsafe
let rec numberAddSubHelp = (x, y, isSub) => {
  if (isSimpleNumber(x)) {
    numberAddSubSimpleHelp(x, y, isSub)
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        numberAddSubInt32Help(boxedInt32Number(x), y, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        numberAddSubInt64Help(boxedInt64Number(x), y, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        numberAddSubRationalHelp(x, y, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        numberAddSubFloat32Help(boxedFloat32Number(x), y, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        numberAddSubFloat64Help(boxedFloat64Number(x), y, isSub)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}, numberAddSubRationalHelp = (x, y, isSub) => {
  if (isSimpleNumber(y)) {
    numberAddSubSimpleHelp(y, x, isSub)
  } else {
    let ytag = boxedNumberTag(y)
    match (ytag) {
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        // The one case we don't delegate is rational +/- rational
        let xNumerator = WasmI64.extendI32S(boxedRationalNumerator(x))
        let xDenominator = WasmI64.extendI32S(boxedRationalDenominator(x))
        let yNumerator = WasmI64.extendI32S(boxedRationalNumerator(y))
        let yDenominator = WasmI64.extendI32S(boxedRationalDenominator(y))
        // TODO: {#304) this could be written in a more overflow-proof way
        if (WasmI64.eq(xDenominator, yDenominator)) {
          let result = if (isSub) WasmI64.sub(xNumerator, yNumerator)
            else WasmI64.add(xNumerator, yNumerator)
          reducedFraction64(result, xDenominator)
        } else {
          let numerator1 = safeI64Multiply(xNumerator, yDenominator)
          let numerator2 = safeI64Multiply(yNumerator, xDenominator)
          let numerator = if (isSub) WasmI64.sub(numerator1, numerator2)
            else WasmI64.add(numerator1, numerator2)
          let denominator = safeI64Multiply(xDenominator, yDenominator)
          reducedFraction64(numerator, denominator)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        numberAddSubHelp(y, x, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        numberAddSubHelp(y, x, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        numberAddSubHelp(y, x, isSub)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        numberAddSubHelp(y, x, isSub)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberAdd = (x, y) => {
  WasmI32.toGrain(numberAddSubHelp(x, y, false)): Number
}

@unsafe
let numberSub = (x, y) => {
  WasmI32.toGrain(numberAddSubHelp(x, y, true)): Number
}

/*
 * ===== TIMES & DIVIDE =====
 * (same schema as equal())
 */

@unsafe
let numberTimesDivideInt64Help = (xval, y, isDivide) => {
  if (isSimpleNumber(y)) {
    if (isDivide) {
      reducedFraction64(xval, WasmI64.extendI32S(untagSimple(y)))
    } else {
      reducedInteger(safeI64Multiply(xval, WasmI64.extendI32S(untagSimple(y))))
    }
  } else {
    let yBoxedNumberTag = boxedNumberTag(y)
    match (yBoxedNumberTag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        let yBoxedVal = WasmI64.extendI32S(boxedInt32Number(y))
        if (isDivide) {
          reducedFraction64(xval, yBoxedVal)
        } else {
          reducedInteger(safeI64Multiply(xval, yBoxedVal))
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        let yBoxedVal = boxedInt64Number(y)
        if (isDivide) {
          reducedFraction64(xval, yBoxedVal)
        } else {
          reducedInteger(safeI64Multiply(xval, yBoxedVal))
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let yNumerator = WasmI64.extendI32S(boxedRationalNumerator(y))
        let yDenominator = WasmI64.extendI32S(boxedRationalDenominator(y))
        if (isDivide) {
          // x / (a / b) == (x * b) / a
          let numerator = safeI64Multiply(xval, yDenominator)
          reducedFraction64(numerator, yNumerator)
        } else {
          // x * (a / b) == (x * a) / b
          let numerator = safeI64Multiply(xval, yNumerator)
          reducedFraction64(numerator, yDenominator)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let xval = WasmF32.convertI64S(xval)
        let yBoxedVal = boxedFloat32Number(y)
        // TODO: (#304) is this safe?
        if (isDivide) {
          newFloat32(WasmF32.div(xval, yBoxedVal))
        } else {
          newFloat32(WasmF32.mul(xval, yBoxedVal))
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let xval = WasmF64.convertI64S(xval)
        let yBoxedVal = boxedFloat64Number(y)
        if (isDivide) {
          newFloat64(WasmF64.div(xval, yBoxedVal))
        } else {
          newFloat64(WasmF64.mul(xval, yBoxedVal))
        }
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberTimesDivideSimpleHelp = (x, y, isDivide) => {
  // PRECONDITION: x is a "simple" number (value tag is 0) and isNumber(y)
  let xval = untagSimple(x) // <- actual int value of x
  numberTimesDivideInt64Help(WasmI64.extendI32S(xval), y, isDivide)
}

@unsafe
let numberTimesDivideInt32Help = (xval, y, isDivide) => {
  numberTimesDivideInt64Help(WasmI64.extendI32S(xval), y, isDivide)
}

@unsafe
let numberTimesDivideRationalHelp = (x, y, isDivide) => {
  // Division isn't commutative, so we actually need to do the work
  let xNumerator = WasmI64.extendI32S(boxedRationalNumerator(x))
  let xDenominator = WasmI64.extendI32S(boxedRationalDenominator(x))
  if (isSimpleNumber(y)) {
    if (isDivide) {
      // (a / b) / y == a / (b * y)
      let denominator = safeI64Multiply(
        xDenominator,
        WasmI64.extendI32S(untagSimple(y))
      )
      reducedFraction64(xNumerator, denominator)
    } else {
      // (a / b) * y == (a * y) / b
      let numerator = safeI64Multiply(
        xNumerator,
        WasmI64.extendI32S(untagSimple(y))
      )
      reducedFraction64(numerator, xDenominator)
    }
  } else {
    let ytag = boxedNumberTag(y)
    match (ytag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        // Same idea as above
        if (isDivide) {
          // (a / b) / y == a / (b * y)
          let denominator = safeI64Multiply(
            xDenominator,
            WasmI64.extendI32S(boxedInt32Number(y))
          )
          reducedFraction64(xNumerator, denominator)
        } else {
          // (a / b) * y == (a * y) / b
          let numerator = safeI64Multiply(
            xNumerator,
            WasmI64.extendI32S(boxedInt32Number(y))
          )
          reducedFraction64(numerator, xDenominator)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        // Same idea as above
        if (isDivide) {
          // (a / b) / y == a / (b * y)
          let denominator = safeI64Multiply(xDenominator, boxedInt64Number(y))
          reducedFraction64(xNumerator, denominator)
        } else {
          // (a / b) * y == (a * y) / b
          let numerator = safeI64Multiply(xNumerator, boxedInt64Number(y))
          reducedFraction64(numerator, xDenominator)
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        let xNumerator = WasmI64.extendI32S(boxedRationalNumerator(x))
        let xDenominator = WasmI64.extendI32S(boxedRationalDenominator(x))
        let yNumerator = WasmI64.extendI32S(boxedRationalNumerator(y))
        let yDenominator = WasmI64.extendI32S(boxedRationalDenominator(y))
        // (a / b) * (c / d) == (a * c) / (b * d)
        // (a / b) / (c / d) == (a * d) / (b * c)
        // TODO: (#304) this could maybe be written in a more overflow-proof way
        let numerator = if (isDivide) safeI64Multiply(xNumerator, yDenominator)
          else safeI64Multiply(xNumerator, yNumerator)
        let denominator = if (isDivide)
            safeI64Multiply(xDenominator, yNumerator)
          else safeI64Multiply(xDenominator, yDenominator)
        reducedFraction64(numerator, denominator)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        let asFloat = WasmF32.div(
          WasmF32.convertI64S(xNumerator),
          WasmF32.convertI64S(xDenominator)
        )
        if (isDivide) {
          newFloat32(WasmF32.div(asFloat, boxedFloat32Number(y)))
        } else {
          newFloat32(WasmF32.mul(asFloat, boxedFloat32Number(y)))
        }
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        let asFloat = WasmF64.div(
          WasmF64.convertI64S(xNumerator),
          WasmF64.convertI64S(xDenominator)
        )
        if (isDivide) {
          newFloat64(WasmF64.div(asFloat, boxedFloat64Number(y)))
        } else {
          newFloat64(WasmF64.mul(asFloat, boxedFloat64Number(y)))
        }
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberTimesDivideFloat64Help = (x, y, isDivide) => {
  // incRef y to reuse it via WasmI32.toGrain
  Memory.incRef(y)
  let yAsFloat = coerceNumberToWasmF64(WasmI32.toGrain(y): Number)
  if (isDivide) {
    newFloat64(WasmF64.div(x, yAsFloat))
  } else {
    newFloat64(WasmF64.mul(x, yAsFloat))
  }
}

@unsafe
let numberTimesDivideFloat32Help = (x, y, isDivide) => {
  if (
    isBoxedNumber(y) &&
    WasmI32.eq(boxedNumberTag(y), Tags._GRAIN_INT64_BOXED_NUM_TAG)
  ) {
    // Special case: f32->f64 promotion
    if (isDivide) {
      newFloat64(WasmF64.div(WasmF64.promoteF32(x), boxedFloat64Number(y)))
    } else {
      newFloat64(WasmF64.mul(WasmF64.promoteF32(x), boxedFloat64Number(y)))
    }
  } else {
    // incRef y to reuse it via WasmI32.toGrain
    Memory.incRef(y)
    let yAsFloat = coerceNumberToWasmF32(WasmI32.toGrain(y): Number)
    if (isDivide) {
      newFloat32(WasmF32.div(x, yAsFloat))
    } else {
      newFloat32(WasmF32.mul(x, yAsFloat))
    }
  }
}

@unsafe
let numberTimesDivideHelp = (x, y, isDivide) => {
  if (isSimpleNumber(x)) {
    numberTimesDivideSimpleHelp(x, y, isDivide)
  } else {
    let xtag = boxedNumberTag(x)
    match (xtag) {
      t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
        numberTimesDivideInt32Help(boxedInt32Number(x), y, isDivide)
      },
      t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
        numberTimesDivideInt64Help(boxedInt64Number(x), y, isDivide)
      },
      t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
        numberTimesDivideRationalHelp(x, y, isDivide)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
        numberTimesDivideFloat32Help(boxedFloat32Number(x), y, isDivide)
      },
      t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
        numberTimesDivideFloat64Help(boxedFloat64Number(x), y, isDivide)
      },
      _ => {
        throw UnknownNumberTag
      },
    }
  }
}

@unsafe
let numberTimes = (x, y) => {
  WasmI32.toGrain(numberTimesDivideHelp(x, y, false)): Number
}

@unsafe
let numberDivide = (x, y) => {
  WasmI32.toGrain(numberTimesDivideHelp(x, y, true)): Number
}

/*
 * ===== MODULO =====
 * (same schema as equal())
 */

@unsafe
let i64abs = x => if (WasmI64.geS(x, 0N)) x else WasmI64.sub(0N, x)

@unsafe
let numberMod = (x, y) => {
  // incRef x and y to reuse them via WasmI32.toGrain
  Memory.incRef(x)
  Memory.incRef(y)
  let xval = coerceNumberToWasmI64(WasmI32.toGrain(x): Number)
  let yval = coerceNumberToWasmI64(WasmI32.toGrain(y): Number)
  if (WasmI64.eqz(yval)) {
    throw Exception.ModuloByZero
  }
  // We implement true modulo
  if (
    WasmI64.ltS(xval, 0N) && WasmI64.gtS(yval, 0N) ||
    WasmI64.gtS(xval, 0N) && WasmI64.ltS(yval, 0N)
  ) {
    let modval = WasmI64.remS(i64abs(xval), i64abs(yval))
    let result = if (WasmI64.ne(modval, 0N))
        WasmI64.mul(
          WasmI64.sub(i64abs(yval), modval),
          if (WasmI64.ltS(yval, 0N)) -1N else 1N
        ) else modval
    reducedInteger(result)
  } else {
    reducedInteger(WasmI64.remS(xval, yval))
  }
}

/*
 * ===== LESS THAN / GREATER THAN / LESS EQUAL / GREATER EQUAL =====
 * Coerce to float64 and then do comparisons
 * TODO: (#305) Could probably be made more efficient
 */
// TODO: (#305) is this safe? I think it's safe?
@unsafe
export let (<) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let yval = coerceNumberToWasmF64(y)
  WasmF64.lt(xval, yval)
}

@unsafe
export let (>) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmF64(x)
  let yval = coerceNumberToWasmF64(y)
  WasmF64.gt(xval, yval)
}

@unsafe
export let (<=) = (x: Number, y: Number) => {
  // Equality is finicky, so delegate
  let xval = coerceNumberToWasmF64(x)
  let yval = coerceNumberToWasmF64(y)
  if (WasmF64.lt(xval, yval)) {
    true
  } else {
    let x = WasmI32.fromGrain(x)
    let y = WasmI32.fromGrain(y)
    numberEqual(x, y)
  }
}

@unsafe
export let (>=) = (x: Number, y: Number) => {
  // Equality is finicky, so delegate
  let xval = coerceNumberToWasmF64(x)
  let yval = coerceNumberToWasmF64(y)
  if (WasmF64.gt(xval, yval)) {
    true
  } else {
    let x = WasmI32.fromGrain(x)
    let y = WasmI32.fromGrain(y)
    numberEqual(x, y)
  }
}

/*
 * ===== EQUAL =====
 */

@unsafe
export let numberEq = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  numberEqual(x, y)
}

/*
 * ===== LOGICAL OPERATIONS =====
 * Only valid for int-like numbers. Coerce to i64 and do operations
 */
// TODO: (#306) Semantics around when things should stay i32/i64

@unsafe
export let lnot = (x: Number) => {
  let xval = coerceNumberToWasmI64(x)
  WasmI32.toGrain(reducedInteger(i64not(xval))): Number
}

@unsafe
export let (<<) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.shl(xval, yval))): Number
}

@unsafe
export let (>>>) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.shrU(xval, yval))): Number
}

@unsafe
export let (&) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.and(xval, yval))): Number
}

@unsafe
export let (|) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.or(xval, yval))): Number
}

@unsafe
export let (^) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.xor(xval, yval))): Number
}

@unsafe
export let (>>) = (x: Number, y: Number) => {
  let xval = coerceNumberToWasmI64(x)
  let yval = coerceNumberToWasmI64(y)
  WasmI32.toGrain(reducedInteger(WasmI64.shrS(xval, yval))): Number
}

/// USER-EXPOSED COERCION FUNCTIONS
//
// [NOTE]: Coercion is a *conservative* process! For example, even if a float is 1.0,
//         we will fail if attempting to coerce to an int!

@unsafe
export let rec coerceNumberToInt32 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  let result = if (
    !isSimpleNumber(x) &&
    WasmI32.eq(boxedNumberTag(x), Tags._GRAIN_INT32_BOXED_NUM_TAG)
  ) {
    // avoid extra malloc and prevent x from being freed
    Memory.incRef(x)
    x
  } else {
    // incRef x to reuse it via WasmI32.toGrain
    Memory.incRef(x)
    // can possibly fail
    newInt32(coerceNumberToWasmI32(WasmI32.toGrain(x): Number))
  }
  WasmI32.toGrain(result): Int32
}

@unsafe
export let rec coerceNumberToInt64 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  let result = if (
    !isSimpleNumber(x) &&
    WasmI32.eq(boxedNumberTag(x), Tags._GRAIN_INT64_BOXED_NUM_TAG)
  ) {
    // avoid extra malloc and prevent x from being freed
    Memory.incRef(x)
    x
  } else {
    // incRef x to reuse it via WasmI32.toGrain
    Memory.incRef(x)
    newInt64(coerceNumberToWasmI64(WasmI32.toGrain(x): Number))
  }
  WasmI32.toGrain(result): Int64
}

@unsafe
export let coerceNumberToRational = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  let result = if (isSimpleNumber(x)) {
    newRational(untagSimple(x), 1n)
  } else {
    let tag = boxedNumberTag(x)
    if (WasmI32.eq(tag, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG)) {
      // avoid extra malloc and prevent x from being freed
      Memory.incRef(x)
      x
    } else if (WasmI32.eq(tag, Tags._GRAIN_INT32_BOXED_NUM_TAG)) {
      newRational(boxedInt32Number(x), 1n)
    } else if (WasmI32.eq(tag, Tags._GRAIN_INT64_BOXED_NUM_TAG)) {
      // incRef x to reuse it via WasmI32.toGrain
      Memory.incRef(x)
      newRational(coerceNumberToWasmI32(WasmI32.toGrain(x): Number), 1n)
    } else {
      throw Exception.NumberNotRational
    }
  }
  WasmI32.toGrain(result): Rational
}

@unsafe
export let coerceNumberToFloat32 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  let result = if (
    !isSimpleNumber(x) &&
    WasmI32.eq(boxedNumberTag(x), Tags._GRAIN_FLOAT32_BOXED_NUM_TAG)
  ) {
    // avoid extra malloc and prevent x from being freed
    Memory.incRef(x)
    x
  } else {
    // incRef x to reuse it via WasmI32.toGrain
    Memory.incRef(x)
    newFloat32(coerceNumberToWasmF32(WasmI32.toGrain(x): Number))
  }
  WasmI32.toGrain(result): Float32
}

@unsafe
export let coerceNumberToFloat64 = (x: Number) => {
  let x = WasmI32.fromGrain(x)
  let result = if (
    !isSimpleNumber(x) &&
    WasmI32.eq(boxedNumberTag(x), Tags._GRAIN_FLOAT64_BOXED_NUM_TAG)
  ) {
    // avoid extra malloc and prevent x from being freed
    Memory.incRef(x)
    x
  } else {
    // incRef x to reuse it via WasmI32.toGrain
    Memory.incRef(x)
    newFloat64(coerceNumberToWasmF64(WasmI32.toGrain(x): Number))
  }
  WasmI32.toGrain(result): Float64
}

@unsafe
export let coerceInt32ToNumber = (x: Int32) => {
  let x = WasmI32.fromGrain(x)
  // incRef x to reuse it via WasmI32.toGrain
  Memory.incRef(x)
  WasmI32.toGrain(x): Number
}

@unsafe
export let coerceInt64ToNumber = (x: Int64) => {
  let x = WasmI32.fromGrain(x)
  // incRef x to reuse it via WasmI32.toGrain
  Memory.incRef(x)
  WasmI32.toGrain(x): Number
}

@unsafe
export let coerceRationalToNumber = (x: Rational) => {
  let x = WasmI32.fromGrain(x)
  // incRef x to reuse it via WasmI32.toGrain
  Memory.incRef(x)
  WasmI32.toGrain(x): Number
}

@unsafe
export let coerceFloat32ToNumber = (x: Float32) => {
  let x = WasmI32.fromGrain(x)
  // incRef x to reuse it via WasmI32.toGrain
  Memory.incRef(x)
  WasmI32.toGrain(x): Number
}

@unsafe
export let coerceFloat64ToNumber = (x: Float64) => {
  let x = WasmI32.fromGrain(x)
  // incRef x to reuse it via WasmI32.toGrain
  Memory.incRef(x)
  WasmI32.toGrain(x): Number
}

/// USER-EXPOSED CONVERSION FUNCTIONS

@unsafe
export let convertExactToInexact = (x: Number) => {
  x
}

@unsafe
let convertInexactToExactHelp = x => {
  if (isSimpleNumber(x)) {
    x
  } else {
    let tag = boxedNumberTag(x)
    if (
      WasmI32.eq(tag, Tags._GRAIN_INT32_BOXED_NUM_TAG) ||
      WasmI32.eq(tag, Tags._GRAIN_INT64_BOXED_NUM_TAG) ||
      WasmI32.eq(tag, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG)
    ) {
      Memory.incRef(x)
      x
    } else {
      match (tag) {
        t when WasmI32.eq(t, Tags._GRAIN_INT32_BOXED_NUM_TAG) => {
          Memory.incRef(x)
          x
        },
        t when WasmI32.eq(t, Tags._GRAIN_INT64_BOXED_NUM_TAG) => {
          Memory.incRef(x)
          x
        },
        t when WasmI32.eq(t, Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) => {
          Memory.incRef(x)
          x
        },
        t when WasmI32.eq(t, Tags._GRAIN_FLOAT32_BOXED_NUM_TAG) => {
          reducedInteger(
            WasmI64.truncF32S(WasmF32.nearest(boxedFloat32Number(x)))
          )
        },
        t when WasmI32.eq(t, Tags._GRAIN_FLOAT64_BOXED_NUM_TAG) => {
          reducedInteger(
            WasmI64.truncF64S(WasmF64.nearest(boxedFloat64Number(x)))
          )
        },
        _ => {
          throw UnknownNumberTag
        },
      }
    }
  }
}

@unsafe
export let convertInexactToExact = (x: Number) => {
  WasmI32.toGrain(convertInexactToExactHelp(WasmI32.fromGrain(x))): Number
}

@unsafe
export let (+) = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  numberAdd(x, y)
}

@unsafe
export let (-) = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  numberSub(x, y)
}

@unsafe
export let (*) = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  numberTimes(x, y)
}

@unsafe
export let (/) = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  numberDivide(x, y)
}

@unsafe
export let (%) = (x: Number, y: Number) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  WasmI32.toGrain(numberMod(x, y)): Number
}

// inc/dec

export let incr = x => {
  x + 1
}

export let decr = x => {
  x - 1
}
