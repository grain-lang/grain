/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 */
module Sine

from "runtime/unsafe/wasmf64" include WasmF64

/*
 * Source: https://git.musl-libc.org/cgit/musl/tree/src/math/__sin.c
 *
 * kernel sin function on ~[-pi/4, pi/4] (except on -0), pi/4 ~ 0.7854
 * Input x is assumed to be bounded by ~pi/4 in magnitude.
 * Input y is the tail of x.
 * Input iy indicates whether y is 0. (if iy=0, y assume to be 0).
 *
 * Algorithm
 *      1. Since sin(-x) = -sin(x), we need only to consider positive x.
 *      2. Callers must return sin(-0) = -0 without calling here since our
 *         odd polynomial is not evaluated in a way that preserves -0.
 *         Callers may do the optimization sin(x) ~ x for tiny x.
 *      3. sin(x) is approximated by a polynomial of degree 13 on
 *         [0,pi/4]
 *                               3            13
 *              sin(x) ~ x + S1*x + ... + S6*x
 *         where
 *
 *      |sin(x)         2     4     6     8     10     12  |     -58
 *      |----- - (1+S1*x +S2*x +S3*x +S4*x +S5*x  +S6*x   )| <= 2
 *      |  x                                               |
 *
 *      4. sin(x+y) = sin(x) + sin'(x')*y
 *                  ~ sin(x) + (1-x*x/2)*y
 *         For better accuracy, let
 *                   3      2      2      2      2
 *              r = x *(S2+x *(S3+x *(S4+x *(S5+x *S6))))
 *         then                   3    2
 *              sin(x) = x + (S1*x + (x *(r-y/2)+y))
 */
@unsafe
provide let sin = (x: WasmF64, y: WasmF64, iy: Bool) => { // see: musl/tree/src/math/__sin.c
  use WasmF64.{ (+), (-), (*) }
  let s1 = -1.66666666666666324348e-01W /* 0xBFC55555, 0x55555549 */
  let s2 = 8.33333333332248946124e-03W /* 0x3F811111, 0x1110F8A6 */
  let s3 = -1.98412698298579493134e-04W /* 0xBF2A01A0, 0x19C161D5 */
  let s4 = 2.75573137070700676789e-06W /* 0x3EC71DE3, 0x57B1FE7D */
  let s5 = -2.50507602534068634195e-08W /* 0xBE5AE5E6, 0x8A2B9CEB */
  let s6 = 1.58969099521155010221e-10W /* 0x3DE5D93A, 0x5ACFD57C */

  let z = x * x
  let w = z * z
  let r = s2 + z * (s3 + z * s4) + z * w * (s5 + z * s6)
  let v = z * x
  if (!iy) {
    x + v * (s1 + z * r)
  } else {
    x - (z * (0.5W * y - v * r) - y - v * s1)
  }
}
