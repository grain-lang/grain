/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 */
module Tangent

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf64" include WasmF64

/*
 * Source: lib/msun/src/k_tan.c
 *
 * kernel tan function on ~[-pi/4, pi/4] (except on -0), pi/4 ~ 0.7854
 * Input x is assumed to be bounded by ~pi/4 in magnitude.
 * Input y is the tail of x.
 * Input k indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned.
 *
 * Algorithm
 *	1. Since tan(-x) = -tan(x), we need only to consider positive x.
 *	2. Callers must return tan(-0) = -0 without calling here since our
 *	   odd polynomial is not evaluated in a way that preserves -0.
 *	   Callers may do the optimization tan(x) ~ x for tiny x.
 *	3. tan(x) is approximated by a odd polynomial of degree 27 on
 *	   [0,0.67434]
 *		  	         3             27
 *	   	tan(x) ~ x + T1*x + ... + T13*x
 *	   where
 *
 * 	        |tan(x)         2     4            26   |     -59.2
 * 	        |----- - (1+T1*x +T2*x +.... +T13*x    )| <= 2
 * 	        |  x 					|
 *
 *	   Note: tan(x+y) = tan(x) + tan'(x)*y
 *		          ~ tan(x) + (1+x*x)*y
 *	   Therefore, for better accuracy in computing tan(x+y), let
 *		     3      2      2       2       2
 *		r = x *(T2+x *(T3+x *(...+x *(T12+x *T13))))
 *	   then
 *		 		    3    2
 *		tan(x+y) = x + (T1*x + (x *(r+y)+y))
 *
 *      4. For x in [0.67434,pi/4],  let y = pi/4 - x, then
 *		tan(x) = tan(pi/4-y) = (1-tan(y))/(1+tan(y))
 *		       = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))
 */
@unsafe
provide let tan = (x: WasmF64, y: WasmF64, iy: Bool) => {
  use WasmI32.{ (&), (>>), (<), (>=) }
  use WasmI64.{ (>>>) }
  use WasmF64.{ (-), (+), (*), (/) }
  let t0 = 3.33333333333334091986e-01W /* 3FD55555, 55555563 */
  let t1 = 1.33333333333201242699e-01W /* 3FC11111, 1110FE7A */
  let t2 = 5.39682539762260521377e-02W /* 3FABA1BA, 1BB341FE */
  let t3 = 2.18694882948595424599e-02W /* 3F9664F4, 8406D637 */
  let t4 = 8.86323982359930005737e-03W /* 3F8226E3, E96E8493 */
  let t5 = 3.59207910759131235356e-03W /* 3F6D6D22, C9560328 */
  let t6 = 1.45620945432529025516e-03W /* 3F57DBC8, FEE08315 */
  let t7 = 5.88041240820264096874e-04W /* 3F4344D8, F2F26501 */
  let t8 = 2.46463134818469906812e-04W /* 3F3026F7, 1A8D1068 */
  let t9 = 7.81794442939557092300e-05W /* 3F147E88, A03792A6 */
  let t10 = 7.14072491382608190305e-05W /* 3F12B80F, 32F0A7E9 */
  let t11 = -1.85586374855275456654e-05W /* BEF375CB, DB605373 */
  let t12 = 2.59073051863633712884e-05W /* 3EFB2A70, 74BF7AD4 */
  let pio4 = 7.85398163397448278999e-01W /* 3FE921FB, 54442D18 */
  let pio4lo = 3.06161699786838301793e-17W /* 3C81A626, 33145C07 */

  let mut x = x
  let mut y = y
  let mut z = 0.0W
  let mut r = 0.0W
  let mut w = 0.0W

  let h = WasmI64.reinterpretF64(x)
  let hx = WasmI32.wrapI64(h >>> 32N) // High word of {x}
  let ix = hx & 0x7FFFFFFFn // High word of |x|

  let isBig = ix >= 0x3FE59428n
  if (isBig) { /* |x| >= 0.6744 */
    if (hx < 0n) {
      x *= -1.0W
      y *= -1.0W
    }
    z = pio4 - x
    w = pio4lo - y
    x = z + w
    y = 0.0W
  }
  z = x * x
  w = z * z

  /*
	 * Break x^5*(T[1]+x^2*T[2]+...) into
	 * x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
	 * x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
	 */
  r = t1 + w * (t3 + w * (t5 + w * (t7 + w * (t9 + w * t11))))
  let v = z * (t2 + w * (t4 + w * (t6 + w * (t8 + w * (t10 + w * t12)))))
  let s = z * x
  r = y + z * (s * (r + v) + y)
  r += t0 * s
  w = x + r
  if (isBig) {
    let v = if (iy) 1.0W else 0.0W
    return 1.0W -
      WasmF64.convertI32S(hx >> 30n & 2n) *
        (v - 2.0W * (x - (w * w / (w + v) - r)))
  }
  if (iy) return w
  /*
   * if allow error up to 2 ulp, simply return
   * -1.0 / (x+r) here
   */
  // compute -1.0 / (x+r) accurately
  use WasmI64.{ (&) }
  // Set low bits
  let z = w
  let z = WasmF64.reinterpretI64(
    WasmI64.reinterpretF64(z) & 0xFFFFFFFF00000000N
  )
  let v = r - (z - x) // z + v = r + x
  let a = -1.0W / w
  let t = a
  // Set low bits
  let t = WasmF64.reinterpretI64(
    WasmI64.reinterpretF64(t) & 0xFFFFFFFF00000000N
  )
  let s = 1.0W + t * z
  return t + a * (s + t * v)
}
