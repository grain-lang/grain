/* grainc-flags --no-pervasives */

/*
 * This file was inspired by AssemblyScript's std/assembly/util/number.ts
 */

import Memory from "runtime/unsafe/memory"
import WasmI32, {
  eq as (==),
  ne as (!=),
  add as (+),
  sub as (-),
  shl as (<<),
  and as (&),
  or as (|),
  // no signed imports, as care should be taken to use signed or unsigned operators
} from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import WasmF64 from "runtime/unsafe/wasmf64"
import Exception from "runtime/exception"
import { allocateString } from "runtime/dataStructures"

primitive (!): Bool -> Bool = "@not"
primitive (&&): (Bool, Bool) -> Bool = "@and"
primitive (||): (Bool, Bool) -> Bool = "@or"
primitive throw: Exception -> a = "@throw"

@unsafe
export let _MAX_DOUBLE_LENGTH = 28n

@unsafe
let _CHAR_CODE_0 = 0x30n
@unsafe
let _CHAR_CODE_e = 0x65n
@unsafe
let _CHAR_CODE_PLUS = 0x2Bn
@unsafe
let _CHAR_CODE_MINUS = 0x2Dn
@unsafe
let _CHAR_CODE_DOT = 0x2En

@unsafe
let _I32_MAX = 0xffffffffN

@unsafe
let mut _POWERS10 = -1n

@unsafe
export let get_POWERS10 = () => {
  if (_POWERS10 == -1n) {
    _POWERS10 = Memory.malloc(40n)
    WasmI32.store(_POWERS10, 1n, 0n)
    WasmI32.store(_POWERS10, 10n, 4n)
    WasmI32.store(_POWERS10, 100n, 8n)
    WasmI32.store(_POWERS10, 1000n, 12n)
    WasmI32.store(_POWERS10, 10000n, 16n)
    WasmI32.store(_POWERS10, 100000n, 20n)
    WasmI32.store(_POWERS10, 1000000n, 24n)
    WasmI32.store(_POWERS10, 10000000n, 28n)
    WasmI32.store(_POWERS10, 100000000n, 32n)
    WasmI32.store(_POWERS10, 1000000000n, 36n)
  }
  _POWERS10
}

@unsafe
let mut _F64_POWERS10_FAST_PATH = -1n

@unsafe
export let get_F64_POWERS10_FAST_PATH = () => {
  let (==) = WasmI32.eq
  if (_F64_POWERS10_FAST_PATH == -1n) {
    _F64_POWERS10_FAST_PATH = Memory.malloc(256n) // 32 x 64-bit values

    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e0W, 0n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e1W, 8n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e2W, 16n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e3W, 24n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e4W, 32n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e5W, 40n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e6W, 48n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e7W, 56n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e8W, 64n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e9W, 72n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e10W, 80n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e11W, 88n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e12W, 96n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e13W, 104n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e14W, 112n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e15W, 120n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e16W, 128n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e17W, 136n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e18W, 144n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e19W, 152n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e20W, 160n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e21W, 168n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 1e22W, 176n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 184n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 192n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 200n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 208n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 216n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 224n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 232n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 240n)
    WasmF64.store(_F64_POWERS10_FAST_PATH, 0.W, 248n)
  }
  _F64_POWERS10_FAST_PATH
}

@unsafe
let mut _POWERS5 = -1n

@unsafe
export let get_POWERS5 = () => {
  let (==) = WasmI32.eq
  if (_POWERS5 == -1n) {
    _POWERS5 = Memory.malloc(10416n) // 1302 x 64-bit values
    //5^-342
    WasmI64.store(_POWERS5, 0xeef453d6923bd65aN, 0n)
    WasmI64.store(_POWERS5, 0x113faa2906a13b3fN, 8n)
    //5^-341
    WasmI64.store(_POWERS5, 0x9558b4661b6565f8N, 16n)
    WasmI64.store(_POWERS5, 0x4ac7ca59a424c507N, 24n)
    //5^-340
    WasmI64.store(_POWERS5, 0xbaaee17fa23ebf76N, 32n)
    WasmI64.store(_POWERS5, 0x5d79bcf00d2df649N, 40n)
    //5^-339
    WasmI64.store(_POWERS5, 0xe95a99df8ace6f53N, 48n)
    WasmI64.store(_POWERS5, 0xf4d82c2c107973dcN, 56n)
    //5^-338
    WasmI64.store(_POWERS5, 0x91d8a02bb6c10594N, 64n)
    WasmI64.store(_POWERS5, 0x79071b9b8a4be869N, 72n)
    //5^-337
    WasmI64.store(_POWERS5, 0xb64ec836a47146f9N, 80n)
    WasmI64.store(_POWERS5, 0x9748e2826cdee284N, 88n)
    //5^-336
    WasmI64.store(_POWERS5, 0xe3e27a444d8d98b7N, 96n)
    WasmI64.store(_POWERS5, 0xfd1b1b2308169b25N, 104n)
    //5^-335
    WasmI64.store(_POWERS5, 0x8e6d8c6ab0787f72N, 112n)
    WasmI64.store(_POWERS5, 0xfe30f0f5e50e20f7N, 120n)
    //5^-334
    WasmI64.store(_POWERS5, 0xb208ef855c969f4fN, 128n)
    WasmI64.store(_POWERS5, 0xbdbd2d335e51a935N, 136n)
    //5^-333
    WasmI64.store(_POWERS5, 0xde8b2b66b3bc4723N, 144n)
    WasmI64.store(_POWERS5, 0xad2c788035e61382N, 152n)
    //5^-332
    WasmI64.store(_POWERS5, 0x8b16fb203055ac76N, 160n)
    WasmI64.store(_POWERS5, 0x4c3bcb5021afcc31N, 168n)
    //5^-331
    WasmI64.store(_POWERS5, 0xaddcb9e83c6b1793N, 176n)
    WasmI64.store(_POWERS5, 0xdf4abe242a1bbf3dN, 184n)
    //5^-330
    WasmI64.store(_POWERS5, 0xd953e8624b85dd78N, 192n)
    WasmI64.store(_POWERS5, 0xd71d6dad34a2af0dN, 200n)
    //5^-329
    WasmI64.store(_POWERS5, 0x87d4713d6f33aa6bN, 208n)
    WasmI64.store(_POWERS5, 0x8672648c40e5ad68N, 216n)
    //5^-328
    WasmI64.store(_POWERS5, 0xa9c98d8ccb009506N, 224n)
    WasmI64.store(_POWERS5, 0x680efdaf511f18c2N, 232n)
    //5^-327
    WasmI64.store(_POWERS5, 0xd43bf0effdc0ba48N, 240n)
    WasmI64.store(_POWERS5, 0x212bd1b2566def2N, 248n)
    //5^-326
    WasmI64.store(_POWERS5, 0x84a57695fe98746dN, 256n)
    WasmI64.store(_POWERS5, 0x14bb630f7604b57N, 264n)
    //5^-325
    WasmI64.store(_POWERS5, 0xa5ced43b7e3e9188N, 272n)
    WasmI64.store(_POWERS5, 0x419ea3bd35385e2dN, 280n)
    //5^-324
    WasmI64.store(_POWERS5, 0xcf42894a5dce35eaN, 288n)
    WasmI64.store(_POWERS5, 0x52064cac828675b9N, 296n)
    //5^-323
    WasmI64.store(_POWERS5, 0x818995ce7aa0e1b2N, 304n)
    WasmI64.store(_POWERS5, 0x7343efebd1940993N, 312n)
    //5^-322
    WasmI64.store(_POWERS5, 0xa1ebfb4219491a1fN, 320n)
    WasmI64.store(_POWERS5, 0x1014ebe6c5f90bf8N, 328n)
    //5^-321
    WasmI64.store(_POWERS5, 0xca66fa129f9b60a6N, 336n)
    WasmI64.store(_POWERS5, 0xd41a26e077774ef6N, 344n)
    //5^-320
    WasmI64.store(_POWERS5, 0xfd00b897478238d0N, 352n)
    WasmI64.store(_POWERS5, 0x8920b098955522b4N, 360n)
    //5^-319
    WasmI64.store(_POWERS5, 0x9e20735e8cb16382N, 368n)
    WasmI64.store(_POWERS5, 0x55b46e5f5d5535b0N, 376n)
    //5^-318
    WasmI64.store(_POWERS5, 0xc5a890362fddbc62N, 384n)
    WasmI64.store(_POWERS5, 0xeb2189f734aa831dN, 392n)
    //5^-317
    WasmI64.store(_POWERS5, 0xf712b443bbd52b7bN, 400n)
    WasmI64.store(_POWERS5, 0xa5e9ec7501d523e4N, 408n)
    //5^-316
    WasmI64.store(_POWERS5, 0x9a6bb0aa55653b2dN, 416n)
    WasmI64.store(_POWERS5, 0x47b233c92125366eN, 424n)
    //5^-315
    WasmI64.store(_POWERS5, 0xc1069cd4eabe89f8N, 432n)
    WasmI64.store(_POWERS5, 0x999ec0bb696e840aN, 440n)
    //5^-314
    WasmI64.store(_POWERS5, 0xf148440a256e2c76N, 448n)
    WasmI64.store(_POWERS5, 0xc00670ea43ca250dN, 456n)
    //5^-313
    WasmI64.store(_POWERS5, 0x96cd2a865764dbcaN, 464n)
    WasmI64.store(_POWERS5, 0x380406926a5e5728N, 472n)
    //5^-312
    WasmI64.store(_POWERS5, 0xbc807527ed3e12bcN, 480n)
    WasmI64.store(_POWERS5, 0xc605083704f5ecf2N, 488n)
    //5^-311
    WasmI64.store(_POWERS5, 0xeba09271e88d976bN, 496n)
    WasmI64.store(_POWERS5, 0xf7864a44c633682eN, 504n)
    //5^-310
    WasmI64.store(_POWERS5, 0x93445b8731587ea3N, 512n)
    WasmI64.store(_POWERS5, 0x7ab3ee6afbe0211dN, 520n)
    //5^-309
    WasmI64.store(_POWERS5, 0xb8157268fdae9e4cN, 528n)
    WasmI64.store(_POWERS5, 0x5960ea05bad82964N, 536n)
    //5^-308
    WasmI64.store(_POWERS5, 0xe61acf033d1a45dfN, 544n)
    WasmI64.store(_POWERS5, 0x6fb92487298e33bdN, 552n)
    //5^-307
    WasmI64.store(_POWERS5, 0x8fd0c16206306babN, 560n)
    WasmI64.store(_POWERS5, 0xa5d3b6d479f8e056N, 568n)
    //5^-306
    WasmI64.store(_POWERS5, 0xb3c4f1ba87bc8696N, 576n)
    WasmI64.store(_POWERS5, 0x8f48a4899877186cN, 584n)
    //5^-305
    WasmI64.store(_POWERS5, 0xe0b62e2929aba83cN, 592n)
    WasmI64.store(_POWERS5, 0x331acdabfe94de87N, 600n)
    //5^-304
    WasmI64.store(_POWERS5, 0x8c71dcd9ba0b4925N, 608n)
    WasmI64.store(_POWERS5, 0x9ff0c08b7f1d0b14N, 616n)
    //5^-303
    WasmI64.store(_POWERS5, 0xaf8e5410288e1b6fN, 624n)
    WasmI64.store(_POWERS5, 0x7ecf0ae5ee44dd9N, 632n)
    //5^-302
    WasmI64.store(_POWERS5, 0xdb71e91432b1a24aN, 640n)
    WasmI64.store(_POWERS5, 0xc9e82cd9f69d6150N, 648n)
    //5^-301
    WasmI64.store(_POWERS5, 0x892731ac9faf056eN, 656n)
    WasmI64.store(_POWERS5, 0xbe311c083a225cd2N, 664n)
    //5^-300
    WasmI64.store(_POWERS5, 0xab70fe17c79ac6caN, 672n)
    WasmI64.store(_POWERS5, 0x6dbd630a48aaf406N, 680n)
    //5^-299
    WasmI64.store(_POWERS5, 0xd64d3d9db981787dN, 688n)
    WasmI64.store(_POWERS5, 0x92cbbccdad5b108N, 696n)
    //5^-298
    WasmI64.store(_POWERS5, 0x85f0468293f0eb4eN, 704n)
    WasmI64.store(_POWERS5, 0x25bbf56008c58ea5N, 712n)
    //5^-297
    WasmI64.store(_POWERS5, 0xa76c582338ed2621N, 720n)
    WasmI64.store(_POWERS5, 0xaf2af2b80af6f24eN, 728n)
    //5^-296
    WasmI64.store(_POWERS5, 0xd1476e2c07286faaN, 736n)
    WasmI64.store(_POWERS5, 0x1af5af660db4aee1N, 744n)
    //5^-295
    WasmI64.store(_POWERS5, 0x82cca4db847945caN, 752n)
    WasmI64.store(_POWERS5, 0x50d98d9fc890ed4dN, 760n)
    //5^-294
    WasmI64.store(_POWERS5, 0xa37fce126597973cN, 768n)
    WasmI64.store(_POWERS5, 0xe50ff107bab528a0N, 776n)
    //5^-293
    WasmI64.store(_POWERS5, 0xcc5fc196fefd7d0cN, 784n)
    WasmI64.store(_POWERS5, 0x1e53ed49a96272c8N, 792n)
    //5^-292
    WasmI64.store(_POWERS5, 0xff77b1fcbebcdc4fN, 800n)
    WasmI64.store(_POWERS5, 0x25e8e89c13bb0f7aN, 808n)
    //5^-291
    WasmI64.store(_POWERS5, 0x9faacf3df73609b1N, 816n)
    WasmI64.store(_POWERS5, 0x77b191618c54e9acN, 824n)
    //5^-290
    WasmI64.store(_POWERS5, 0xc795830d75038c1dN, 832n)
    WasmI64.store(_POWERS5, 0xd59df5b9ef6a2417N, 840n)
    //5^-289
    WasmI64.store(_POWERS5, 0xf97ae3d0d2446f25N, 848n)
    WasmI64.store(_POWERS5, 0x4b0573286b44ad1dN, 856n)
    //5^-288
    WasmI64.store(_POWERS5, 0x9becce62836ac577N, 864n)
    WasmI64.store(_POWERS5, 0x4ee367f9430aec32N, 872n)
    //5^-287
    WasmI64.store(_POWERS5, 0xc2e801fb244576d5N, 880n)
    WasmI64.store(_POWERS5, 0x229c41f793cda73fN, 888n)
    //5^-286
    WasmI64.store(_POWERS5, 0xf3a20279ed56d48aN, 896n)
    WasmI64.store(_POWERS5, 0x6b43527578c1110fN, 904n)
    //5^-285
    WasmI64.store(_POWERS5, 0x9845418c345644d6N, 912n)
    WasmI64.store(_POWERS5, 0x830a13896b78aaa9N, 920n)
    //5^-284
    WasmI64.store(_POWERS5, 0xbe5691ef416bd60cN, 928n)
    WasmI64.store(_POWERS5, 0x23cc986bc656d553N, 936n)
    //5^-283
    WasmI64.store(_POWERS5, 0xedec366b11c6cb8fN, 944n)
    WasmI64.store(_POWERS5, 0x2cbfbe86b7ec8aa8N, 952n)
    //5^-282
    WasmI64.store(_POWERS5, 0x94b3a202eb1c3f39N, 960n)
    WasmI64.store(_POWERS5, 0x7bf7d71432f3d6a9N, 968n)
    //5^-281
    WasmI64.store(_POWERS5, 0xb9e08a83a5e34f07N, 976n)
    WasmI64.store(_POWERS5, 0xdaf5ccd93fb0cc53N, 984n)
    //5^-280
    WasmI64.store(_POWERS5, 0xe858ad248f5c22c9N, 992n)
    WasmI64.store(_POWERS5, 0xd1b3400f8f9cff68N, 1000n)
    //5^-279
    WasmI64.store(_POWERS5, 0x91376c36d99995beN, 1008n)
    WasmI64.store(_POWERS5, 0x23100809b9c21fa1N, 1016n)
    //5^-278
    WasmI64.store(_POWERS5, 0xb58547448ffffb2dN, 1024n)
    WasmI64.store(_POWERS5, 0xabd40a0c2832a78aN, 1032n)
    //5^-277
    WasmI64.store(_POWERS5, 0xe2e69915b3fff9f9N, 1040n)
    WasmI64.store(_POWERS5, 0x16c90c8f323f516cN, 1048n)
    //5^-276
    WasmI64.store(_POWERS5, 0x8dd01fad907ffc3bN, 1056n)
    WasmI64.store(_POWERS5, 0xae3da7d97f6792e3N, 1064n)
    //5^-275
    WasmI64.store(_POWERS5, 0xb1442798f49ffb4aN, 1072n)
    WasmI64.store(_POWERS5, 0x99cd11cfdf41779cN, 1080n)
    //5^-274
    WasmI64.store(_POWERS5, 0xdd95317f31c7fa1dN, 1088n)
    WasmI64.store(_POWERS5, 0x40405643d711d583N, 1096n)
    //5^-273
    WasmI64.store(_POWERS5, 0x8a7d3eef7f1cfc52N, 1104n)
    WasmI64.store(_POWERS5, 0x482835ea666b2572N, 1112n)
    //5^-272
    WasmI64.store(_POWERS5, 0xad1c8eab5ee43b66N, 1120n)
    WasmI64.store(_POWERS5, 0xda3243650005eecfN, 1128n)
    //5^-271
    WasmI64.store(_POWERS5, 0xd863b256369d4a40N, 1136n)
    WasmI64.store(_POWERS5, 0x90bed43e40076a82N, 1144n)
    //5^-270
    WasmI64.store(_POWERS5, 0x873e4f75e2224e68N, 1152n)
    WasmI64.store(_POWERS5, 0x5a7744a6e804a291N, 1160n)
    //5^-269
    WasmI64.store(_POWERS5, 0xa90de3535aaae202N, 1168n)
    WasmI64.store(_POWERS5, 0x711515d0a205cb36N, 1176n)
    //5^-268
    WasmI64.store(_POWERS5, 0xd3515c2831559a83N, 1184n)
    WasmI64.store(_POWERS5, 0xd5a5b44ca873e03N, 1192n)
    //5^-267
    WasmI64.store(_POWERS5, 0x8412d9991ed58091N, 1200n)
    WasmI64.store(_POWERS5, 0xe858790afe9486c2N, 1208n)
    //5^-266
    WasmI64.store(_POWERS5, 0xa5178fff668ae0b6N, 1216n)
    WasmI64.store(_POWERS5, 0x626e974dbe39a872N, 1224n)
    //5^-265
    WasmI64.store(_POWERS5, 0xce5d73ff402d98e3N, 1232n)
    WasmI64.store(_POWERS5, 0xfb0a3d212dc8128fN, 1240n)
    //5^-264
    WasmI64.store(_POWERS5, 0x80fa687f881c7f8eN, 1248n)
    WasmI64.store(_POWERS5, 0x7ce66634bc9d0b99N, 1256n)
    //5^-263
    WasmI64.store(_POWERS5, 0xa139029f6a239f72N, 1264n)
    WasmI64.store(_POWERS5, 0x1c1fffc1ebc44e80N, 1272n)
    //5^-262
    WasmI64.store(_POWERS5, 0xc987434744ac874eN, 1280n)
    WasmI64.store(_POWERS5, 0xa327ffb266b56220N, 1288n)
    //5^-261
    WasmI64.store(_POWERS5, 0xfbe9141915d7a922N, 1296n)
    WasmI64.store(_POWERS5, 0x4bf1ff9f0062baa8N, 1304n)
    //5^-260
    WasmI64.store(_POWERS5, 0x9d71ac8fada6c9b5N, 1312n)
    WasmI64.store(_POWERS5, 0x6f773fc3603db4a9N, 1320n)
    //5^-259
    WasmI64.store(_POWERS5, 0xc4ce17b399107c22N, 1328n)
    WasmI64.store(_POWERS5, 0xcb550fb4384d21d3N, 1336n)
    //5^-258
    WasmI64.store(_POWERS5, 0xf6019da07f549b2bN, 1344n)
    WasmI64.store(_POWERS5, 0x7e2a53a146606a48N, 1352n)
    //5^-257
    WasmI64.store(_POWERS5, 0x99c102844f94e0fbN, 1360n)
    WasmI64.store(_POWERS5, 0x2eda7444cbfc426dN, 1368n)
    //5^-256
    WasmI64.store(_POWERS5, 0xc0314325637a1939N, 1376n)
    WasmI64.store(_POWERS5, 0xfa911155fefb5308N, 1384n)
    //5^-255
    WasmI64.store(_POWERS5, 0xf03d93eebc589f88N, 1392n)
    WasmI64.store(_POWERS5, 0x793555ab7eba27caN, 1400n)
    //5^-254
    WasmI64.store(_POWERS5, 0x96267c7535b763b5N, 1408n)
    WasmI64.store(_POWERS5, 0x4bc1558b2f3458deN, 1416n)
    //5^-253
    WasmI64.store(_POWERS5, 0xbbb01b9283253ca2N, 1424n)
    WasmI64.store(_POWERS5, 0x9eb1aaedfb016f16N, 1432n)
    //5^-252
    WasmI64.store(_POWERS5, 0xea9c227723ee8bcbN, 1440n)
    WasmI64.store(_POWERS5, 0x465e15a979c1cadcN, 1448n)
    //5^-251
    WasmI64.store(_POWERS5, 0x92a1958a7675175fN, 1456n)
    WasmI64.store(_POWERS5, 0xbfacd89ec191ec9N, 1464n)
    //5^-250
    WasmI64.store(_POWERS5, 0xb749faed14125d36N, 1472n)
    WasmI64.store(_POWERS5, 0xcef980ec671f667bN, 1480n)
    //5^-249
    WasmI64.store(_POWERS5, 0xe51c79a85916f484N, 1488n)
    WasmI64.store(_POWERS5, 0x82b7e12780e7401aN, 1496n)
    //5^-248
    WasmI64.store(_POWERS5, 0x8f31cc0937ae58d2N, 1504n)
    WasmI64.store(_POWERS5, 0xd1b2ecb8b0908810N, 1512n)
    //5^-247
    WasmI64.store(_POWERS5, 0xb2fe3f0b8599ef07N, 1520n)
    WasmI64.store(_POWERS5, 0x861fa7e6dcb4aa15N, 1528n)
    //5^-246
    WasmI64.store(_POWERS5, 0xdfbdcece67006ac9N, 1536n)
    WasmI64.store(_POWERS5, 0x67a791e093e1d49aN, 1544n)
    //5^-245
    WasmI64.store(_POWERS5, 0x8bd6a141006042bdN, 1552n)
    WasmI64.store(_POWERS5, 0xe0c8bb2c5c6d24e0N, 1560n)
    //5^-244
    WasmI64.store(_POWERS5, 0xaecc49914078536dN, 1568n)
    WasmI64.store(_POWERS5, 0x58fae9f773886e18N, 1576n)
    //5^-243
    WasmI64.store(_POWERS5, 0xda7f5bf590966848N, 1584n)
    WasmI64.store(_POWERS5, 0xaf39a475506a899eN, 1592n)
    //5^-242
    WasmI64.store(_POWERS5, 0x888f99797a5e012dN, 1600n)
    WasmI64.store(_POWERS5, 0x6d8406c952429603N, 1608n)
    //5^-241
    WasmI64.store(_POWERS5, 0xaab37fd7d8f58178N, 1616n)
    WasmI64.store(_POWERS5, 0xc8e5087ba6d33b83N, 1624n)
    //5^-240
    WasmI64.store(_POWERS5, 0xd5605fcdcf32e1d6N, 1632n)
    WasmI64.store(_POWERS5, 0xfb1e4a9a90880a64N, 1640n)
    //5^-239
    WasmI64.store(_POWERS5, 0x855c3be0a17fcd26N, 1648n)
    WasmI64.store(_POWERS5, 0x5cf2eea09a55067fN, 1656n)
    //5^-238
    WasmI64.store(_POWERS5, 0xa6b34ad8c9dfc06fN, 1664n)
    WasmI64.store(_POWERS5, 0xf42faa48c0ea481eN, 1672n)
    //5^-237
    WasmI64.store(_POWERS5, 0xd0601d8efc57b08bN, 1680n)
    WasmI64.store(_POWERS5, 0xf13b94daf124da26N, 1688n)
    //5^-236
    WasmI64.store(_POWERS5, 0x823c12795db6ce57N, 1696n)
    WasmI64.store(_POWERS5, 0x76c53d08d6b70858N, 1704n)
    //5^-235
    WasmI64.store(_POWERS5, 0xa2cb1717b52481edN, 1712n)
    WasmI64.store(_POWERS5, 0x54768c4b0c64ca6eN, 1720n)
    //5^-234
    WasmI64.store(_POWERS5, 0xcb7ddcdda26da268N, 1728n)
    WasmI64.store(_POWERS5, 0xa9942f5dcf7dfd09N, 1736n)
    //5^-233
    WasmI64.store(_POWERS5, 0xfe5d54150b090b02N, 1744n)
    WasmI64.store(_POWERS5, 0xd3f93b35435d7c4cN, 1752n)
    //5^-232
    WasmI64.store(_POWERS5, 0x9efa548d26e5a6e1N, 1760n)
    WasmI64.store(_POWERS5, 0xc47bc5014a1a6dafN, 1768n)
    //5^-231
    WasmI64.store(_POWERS5, 0xc6b8e9b0709f109aN, 1776n)
    WasmI64.store(_POWERS5, 0x359ab6419ca1091bN, 1784n)
    //5^-230
    WasmI64.store(_POWERS5, 0xf867241c8cc6d4c0N, 1792n)
    WasmI64.store(_POWERS5, 0xc30163d203c94b62N, 1800n)
    //5^-229
    WasmI64.store(_POWERS5, 0x9b407691d7fc44f8N, 1808n)
    WasmI64.store(_POWERS5, 0x79e0de63425dcf1dN, 1816n)
    //5^-228
    WasmI64.store(_POWERS5, 0xc21094364dfb5636N, 1824n)
    WasmI64.store(_POWERS5, 0x985915fc12f542e4N, 1832n)
    //5^-227
    WasmI64.store(_POWERS5, 0xf294b943e17a2bc4N, 1840n)
    WasmI64.store(_POWERS5, 0x3e6f5b7b17b2939dN, 1848n)
    //5^-226
    WasmI64.store(_POWERS5, 0x979cf3ca6cec5b5aN, 1856n)
    WasmI64.store(_POWERS5, 0xa705992ceecf9c42N, 1864n)
    //5^-225
    WasmI64.store(_POWERS5, 0xbd8430bd08277231N, 1872n)
    WasmI64.store(_POWERS5, 0x50c6ff782a838353N, 1880n)
    //5^-224
    WasmI64.store(_POWERS5, 0xece53cec4a314ebdN, 1888n)
    WasmI64.store(_POWERS5, 0xa4f8bf5635246428N, 1896n)
    //5^-223
    WasmI64.store(_POWERS5, 0x940f4613ae5ed136N, 1904n)
    WasmI64.store(_POWERS5, 0x871b7795e136be99N, 1912n)
    //5^-222
    WasmI64.store(_POWERS5, 0xb913179899f68584N, 1920n)
    WasmI64.store(_POWERS5, 0x28e2557b59846e3fN, 1928n)
    //5^-221
    WasmI64.store(_POWERS5, 0xe757dd7ec07426e5N, 1936n)
    WasmI64.store(_POWERS5, 0x331aeada2fe589cfN, 1944n)
    //5^-220
    WasmI64.store(_POWERS5, 0x9096ea6f3848984fN, 1952n)
    WasmI64.store(_POWERS5, 0x3ff0d2c85def7621N, 1960n)
    //5^-219
    WasmI64.store(_POWERS5, 0xb4bca50b065abe63N, 1968n)
    WasmI64.store(_POWERS5, 0xfed077a756b53a9N, 1976n)
    //5^-218
    WasmI64.store(_POWERS5, 0xe1ebce4dc7f16dfbN, 1984n)
    WasmI64.store(_POWERS5, 0xd3e8495912c62894N, 1992n)
    //5^-217
    WasmI64.store(_POWERS5, 0x8d3360f09cf6e4bdN, 2000n)
    WasmI64.store(_POWERS5, 0x64712dd7abbbd95cN, 2008n)
    //5^-216
    WasmI64.store(_POWERS5, 0xb080392cc4349decN, 2016n)
    WasmI64.store(_POWERS5, 0xbd8d794d96aacfb3N, 2024n)
    //5^-215
    WasmI64.store(_POWERS5, 0xdca04777f541c567N, 2032n)
    WasmI64.store(_POWERS5, 0xecf0d7a0fc5583a0N, 2040n)
    //5^-214
    WasmI64.store(_POWERS5, 0x89e42caaf9491b60N, 2048n)
    WasmI64.store(_POWERS5, 0xf41686c49db57244N, 2056n)
    //5^-213
    WasmI64.store(_POWERS5, 0xac5d37d5b79b6239N, 2064n)
    WasmI64.store(_POWERS5, 0x311c2875c522ced5N, 2072n)
    //5^-212
    WasmI64.store(_POWERS5, 0xd77485cb25823ac7N, 2080n)
    WasmI64.store(_POWERS5, 0x7d633293366b828bN, 2088n)
    //5^-211
    WasmI64.store(_POWERS5, 0x86a8d39ef77164bcN, 2096n)
    WasmI64.store(_POWERS5, 0xae5dff9c02033197N, 2104n)
    //5^-210
    WasmI64.store(_POWERS5, 0xa8530886b54dbdebN, 2112n)
    WasmI64.store(_POWERS5, 0xd9f57f830283fdfcN, 2120n)
    //5^-209
    WasmI64.store(_POWERS5, 0xd267caa862a12d66N, 2128n)
    WasmI64.store(_POWERS5, 0xd072df63c324fd7bN, 2136n)
    //5^-208
    WasmI64.store(_POWERS5, 0x8380dea93da4bc60N, 2144n)
    WasmI64.store(_POWERS5, 0x4247cb9e59f71e6dN, 2152n)
    //5^-207
    WasmI64.store(_POWERS5, 0xa46116538d0deb78N, 2160n)
    WasmI64.store(_POWERS5, 0x52d9be85f074e608N, 2168n)
    //5^-206
    WasmI64.store(_POWERS5, 0xcd795be870516656N, 2176n)
    WasmI64.store(_POWERS5, 0x67902e276c921f8bN, 2184n)
    //5^-205
    WasmI64.store(_POWERS5, 0x806bd9714632dff6N, 2192n)
    WasmI64.store(_POWERS5, 0xba1cd8a3db53b6N, 2200n)
    //5^-204
    WasmI64.store(_POWERS5, 0xa086cfcd97bf97f3N, 2208n)
    WasmI64.store(_POWERS5, 0x80e8a40eccd228a4N, 2216n)
    //5^-203
    WasmI64.store(_POWERS5, 0xc8a883c0fdaf7df0N, 2224n)
    WasmI64.store(_POWERS5, 0x6122cd128006b2cdN, 2232n)
    //5^-202
    WasmI64.store(_POWERS5, 0xfad2a4b13d1b5d6cN, 2240n)
    WasmI64.store(_POWERS5, 0x796b805720085f81N, 2248n)
    //5^-201
    WasmI64.store(_POWERS5, 0x9cc3a6eec6311a63N, 2256n)
    WasmI64.store(_POWERS5, 0xcbe3303674053bb0N, 2264n)
    //5^-200
    WasmI64.store(_POWERS5, 0xc3f490aa77bd60fcN, 2272n)
    WasmI64.store(_POWERS5, 0xbedbfc4411068a9cN, 2280n)
    //5^-199
    WasmI64.store(_POWERS5, 0xf4f1b4d515acb93bN, 2288n)
    WasmI64.store(_POWERS5, 0xee92fb5515482d44N, 2296n)
    //5^-198
    WasmI64.store(_POWERS5, 0x991711052d8bf3c5N, 2304n)
    WasmI64.store(_POWERS5, 0x751bdd152d4d1c4aN, 2312n)
    //5^-197
    WasmI64.store(_POWERS5, 0xbf5cd54678eef0b6N, 2320n)
    WasmI64.store(_POWERS5, 0xd262d45a78a0635dN, 2328n)
    //5^-196
    WasmI64.store(_POWERS5, 0xef340a98172aace4N, 2336n)
    WasmI64.store(_POWERS5, 0x86fb897116c87c34N, 2344n)
    //5^-195
    WasmI64.store(_POWERS5, 0x9580869f0e7aac0eN, 2352n)
    WasmI64.store(_POWERS5, 0xd45d35e6ae3d4da0N, 2360n)
    //5^-194
    WasmI64.store(_POWERS5, 0xbae0a846d2195712N, 2368n)
    WasmI64.store(_POWERS5, 0x8974836059cca109N, 2376n)
    //5^-193
    WasmI64.store(_POWERS5, 0xe998d258869facd7N, 2384n)
    WasmI64.store(_POWERS5, 0x2bd1a438703fc94bN, 2392n)
    //5^-192
    WasmI64.store(_POWERS5, 0x91ff83775423cc06N, 2400n)
    WasmI64.store(_POWERS5, 0x7b6306a34627ddcfN, 2408n)
    //5^-191
    WasmI64.store(_POWERS5, 0xb67f6455292cbf08N, 2416n)
    WasmI64.store(_POWERS5, 0x1a3bc84c17b1d542N, 2424n)
    //5^-190
    WasmI64.store(_POWERS5, 0xe41f3d6a7377eecaN, 2432n)
    WasmI64.store(_POWERS5, 0x20caba5f1d9e4a93N, 2440n)
    //5^-189
    WasmI64.store(_POWERS5, 0x8e938662882af53eN, 2448n)
    WasmI64.store(_POWERS5, 0x547eb47b7282ee9cN, 2456n)
    //5^-188
    WasmI64.store(_POWERS5, 0xb23867fb2a35b28dN, 2464n)
    WasmI64.store(_POWERS5, 0xe99e619a4f23aa43N, 2472n)
    //5^-187
    WasmI64.store(_POWERS5, 0xdec681f9f4c31f31N, 2480n)
    WasmI64.store(_POWERS5, 0x6405fa00e2ec94d4N, 2488n)
    //5^-186
    WasmI64.store(_POWERS5, 0x8b3c113c38f9f37eN, 2496n)
    WasmI64.store(_POWERS5, 0xde83bc408dd3dd04N, 2504n)
    //5^-185
    WasmI64.store(_POWERS5, 0xae0b158b4738705eN, 2512n)
    WasmI64.store(_POWERS5, 0x9624ab50b148d445N, 2520n)
    //5^-184
    WasmI64.store(_POWERS5, 0xd98ddaee19068c76N, 2528n)
    WasmI64.store(_POWERS5, 0x3badd624dd9b0957N, 2536n)
    //5^-183
    WasmI64.store(_POWERS5, 0x87f8a8d4cfa417c9N, 2544n)
    WasmI64.store(_POWERS5, 0xe54ca5d70a80e5d6N, 2552n)
    //5^-182
    WasmI64.store(_POWERS5, 0xa9f6d30a038d1dbcN, 2560n)
    WasmI64.store(_POWERS5, 0x5e9fcf4ccd211f4cN, 2568n)
    //5^-181
    WasmI64.store(_POWERS5, 0xd47487cc8470652bN, 2576n)
    WasmI64.store(_POWERS5, 0x7647c3200069671fN, 2584n)
    //5^-180
    WasmI64.store(_POWERS5, 0x84c8d4dfd2c63f3bN, 2592n)
    WasmI64.store(_POWERS5, 0x29ecd9f40041e073N, 2600n)
    //5^-179
    WasmI64.store(_POWERS5, 0xa5fb0a17c777cf09N, 2608n)
    WasmI64.store(_POWERS5, 0xf468107100525890N, 2616n)
    //5^-178
    WasmI64.store(_POWERS5, 0xcf79cc9db955c2ccN, 2624n)
    WasmI64.store(_POWERS5, 0x7182148d4066eeb4N, 2632n)
    //5^-177
    WasmI64.store(_POWERS5, 0x81ac1fe293d599bfN, 2640n)
    WasmI64.store(_POWERS5, 0xc6f14cd848405530N, 2648n)
    //5^-176
    WasmI64.store(_POWERS5, 0xa21727db38cb002fN, 2656n)
    WasmI64.store(_POWERS5, 0xb8ada00e5a506a7cN, 2664n)
    //5^-175
    WasmI64.store(_POWERS5, 0xca9cf1d206fdc03bN, 2672n)
    WasmI64.store(_POWERS5, 0xa6d90811f0e4851cN, 2680n)
    //5^-174
    WasmI64.store(_POWERS5, 0xfd442e4688bd304aN, 2688n)
    WasmI64.store(_POWERS5, 0x908f4a166d1da663N, 2696n)
    //5^-173
    WasmI64.store(_POWERS5, 0x9e4a9cec15763e2eN, 2704n)
    WasmI64.store(_POWERS5, 0x9a598e4e043287feN, 2712n)
    //5^-172
    WasmI64.store(_POWERS5, 0xc5dd44271ad3cdbaN, 2720n)
    WasmI64.store(_POWERS5, 0x40eff1e1853f29fdN, 2728n)
    //5^-171
    WasmI64.store(_POWERS5, 0xf7549530e188c128N, 2736n)
    WasmI64.store(_POWERS5, 0xd12bee59e68ef47cN, 2744n)
    //5^-170
    WasmI64.store(_POWERS5, 0x9a94dd3e8cf578b9N, 2752n)
    WasmI64.store(_POWERS5, 0x82bb74f8301958ceN, 2760n)
    //5^-169
    WasmI64.store(_POWERS5, 0xc13a148e3032d6e7N, 2768n)
    WasmI64.store(_POWERS5, 0xe36a52363c1faf01N, 2776n)
    //5^-168
    WasmI64.store(_POWERS5, 0xf18899b1bc3f8ca1N, 2784n)
    WasmI64.store(_POWERS5, 0xdc44e6c3cb279ac1N, 2792n)
    //5^-167
    WasmI64.store(_POWERS5, 0x96f5600f15a7b7e5N, 2800n)
    WasmI64.store(_POWERS5, 0x29ab103a5ef8c0b9N, 2808n)
    //5^-166
    WasmI64.store(_POWERS5, 0xbcb2b812db11a5deN, 2816n)
    WasmI64.store(_POWERS5, 0x7415d448f6b6f0e7N, 2824n)
    //5^-165
    WasmI64.store(_POWERS5, 0xebdf661791d60f56N, 2832n)
    WasmI64.store(_POWERS5, 0x111b495b3464ad21N, 2840n)
    //5^-164
    WasmI64.store(_POWERS5, 0x936b9fcebb25c995N, 2848n)
    WasmI64.store(_POWERS5, 0xcab10dd900beec34N, 2856n)
    //5^-163
    WasmI64.store(_POWERS5, 0xb84687c269ef3bfbN, 2864n)
    WasmI64.store(_POWERS5, 0x3d5d514f40eea742N, 2872n)
    //5^-162
    WasmI64.store(_POWERS5, 0xe65829b3046b0afaN, 2880n)
    WasmI64.store(_POWERS5, 0xcb4a5a3112a5112N, 2888n)
    //5^-161
    WasmI64.store(_POWERS5, 0x8ff71a0fe2c2e6dcN, 2896n)
    WasmI64.store(_POWERS5, 0x47f0e785eaba72abN, 2904n)
    //5^-160
    WasmI64.store(_POWERS5, 0xb3f4e093db73a093N, 2912n)
    WasmI64.store(_POWERS5, 0x59ed216765690f56N, 2920n)
    //5^-159
    WasmI64.store(_POWERS5, 0xe0f218b8d25088b8N, 2928n)
    WasmI64.store(_POWERS5, 0x306869c13ec3532cN, 2936n)
    //5^-158
    WasmI64.store(_POWERS5, 0x8c974f7383725573N, 2944n)
    WasmI64.store(_POWERS5, 0x1e414218c73a13fbN, 2952n)
    //5^-157
    WasmI64.store(_POWERS5, 0xafbd2350644eeacfN, 2960n)
    WasmI64.store(_POWERS5, 0xe5d1929ef90898faN, 2968n)
    //5^-156
    WasmI64.store(_POWERS5, 0xdbac6c247d62a583N, 2976n)
    WasmI64.store(_POWERS5, 0xdf45f746b74abf39N, 2984n)
    //5^-155
    WasmI64.store(_POWERS5, 0x894bc396ce5da772N, 2992n)
    WasmI64.store(_POWERS5, 0x6b8bba8c328eb783N, 3000n)
    //5^-154
    WasmI64.store(_POWERS5, 0xab9eb47c81f5114fN, 3008n)
    WasmI64.store(_POWERS5, 0x66ea92f3f326564N, 3016n)
    //5^-153
    WasmI64.store(_POWERS5, 0xd686619ba27255a2N, 3024n)
    WasmI64.store(_POWERS5, 0xc80a537b0efefebdN, 3032n)
    //5^-152
    WasmI64.store(_POWERS5, 0x8613fd0145877585N, 3040n)
    WasmI64.store(_POWERS5, 0xbd06742ce95f5f36N, 3048n)
    //5^-151
    WasmI64.store(_POWERS5, 0xa798fc4196e952e7N, 3056n)
    WasmI64.store(_POWERS5, 0x2c48113823b73704N, 3064n)
    //5^-150
    WasmI64.store(_POWERS5, 0xd17f3b51fca3a7a0N, 3072n)
    WasmI64.store(_POWERS5, 0xf75a15862ca504c5N, 3080n)
    //5^-149
    WasmI64.store(_POWERS5, 0x82ef85133de648c4N, 3088n)
    WasmI64.store(_POWERS5, 0x9a984d73dbe722fbN, 3096n)
    //5^-148
    WasmI64.store(_POWERS5, 0xa3ab66580d5fdaf5N, 3104n)
    WasmI64.store(_POWERS5, 0xc13e60d0d2e0ebbaN, 3112n)
    //5^-147
    WasmI64.store(_POWERS5, 0xcc963fee10b7d1b3N, 3120n)
    WasmI64.store(_POWERS5, 0x318df905079926a8N, 3128n)
    //5^-146
    WasmI64.store(_POWERS5, 0xffbbcfe994e5c61fN, 3136n)
    WasmI64.store(_POWERS5, 0xfdf17746497f7052N, 3144n)
    //5^-145
    WasmI64.store(_POWERS5, 0x9fd561f1fd0f9bd3N, 3152n)
    WasmI64.store(_POWERS5, 0xfeb6ea8bedefa633N, 3160n)
    //5^-144
    WasmI64.store(_POWERS5, 0xc7caba6e7c5382c8N, 3168n)
    WasmI64.store(_POWERS5, 0xfe64a52ee96b8fc0N, 3176n)
    //5^-143
    WasmI64.store(_POWERS5, 0xf9bd690a1b68637bN, 3184n)
    WasmI64.store(_POWERS5, 0x3dfdce7aa3c673b0N, 3192n)
    //5^-142
    WasmI64.store(_POWERS5, 0x9c1661a651213e2dN, 3200n)
    WasmI64.store(_POWERS5, 0x6bea10ca65c084eN, 3208n)
    //5^-141
    WasmI64.store(_POWERS5, 0xc31bfa0fe5698db8N, 3216n)
    WasmI64.store(_POWERS5, 0x486e494fcff30a62N, 3224n)
    //5^-140
    WasmI64.store(_POWERS5, 0xf3e2f893dec3f126N, 3232n)
    WasmI64.store(_POWERS5, 0x5a89dba3c3efccfaN, 3240n)
    //5^-139
    WasmI64.store(_POWERS5, 0x986ddb5c6b3a76b7N, 3248n)
    WasmI64.store(_POWERS5, 0xf89629465a75e01cN, 3256n)
    //5^-138
    WasmI64.store(_POWERS5, 0xbe89523386091465N, 3264n)
    WasmI64.store(_POWERS5, 0xf6bbb397f1135823N, 3272n)
    //5^-137
    WasmI64.store(_POWERS5, 0xee2ba6c0678b597fN, 3280n)
    WasmI64.store(_POWERS5, 0x746aa07ded582e2cN, 3288n)
    //5^-136
    WasmI64.store(_POWERS5, 0x94db483840b717efN, 3296n)
    WasmI64.store(_POWERS5, 0xa8c2a44eb4571cdcN, 3304n)
    //5^-135
    WasmI64.store(_POWERS5, 0xba121a4650e4ddebN, 3312n)
    WasmI64.store(_POWERS5, 0x92f34d62616ce413N, 3320n)
    //5^-134
    WasmI64.store(_POWERS5, 0xe896a0d7e51e1566N, 3328n)
    WasmI64.store(_POWERS5, 0x77b020baf9c81d17N, 3336n)
    //5^-133
    WasmI64.store(_POWERS5, 0x915e2486ef32cd60N, 3344n)
    WasmI64.store(_POWERS5, 0xace1474dc1d122eN, 3352n)
    //5^-132
    WasmI64.store(_POWERS5, 0xb5b5ada8aaff80b8N, 3360n)
    WasmI64.store(_POWERS5, 0xd819992132456baN, 3368n)
    //5^-131
    WasmI64.store(_POWERS5, 0xe3231912d5bf60e6N, 3376n)
    WasmI64.store(_POWERS5, 0x10e1fff697ed6c69N, 3384n)
    //5^-130
    WasmI64.store(_POWERS5, 0x8df5efabc5979c8fN, 3392n)
    WasmI64.store(_POWERS5, 0xca8d3ffa1ef463c1N, 3400n)
    //5^-129
    WasmI64.store(_POWERS5, 0xb1736b96b6fd83b3N, 3408n)
    WasmI64.store(_POWERS5, 0xbd308ff8a6b17cb2N, 3416n)
    //5^-128
    WasmI64.store(_POWERS5, 0xddd0467c64bce4a0N, 3424n)
    WasmI64.store(_POWERS5, 0xac7cb3f6d05ddbdeN, 3432n)
    //5^-127
    WasmI64.store(_POWERS5, 0x8aa22c0dbef60ee4N, 3440n)
    WasmI64.store(_POWERS5, 0x6bcdf07a423aa96bN, 3448n)
    //5^-126
    WasmI64.store(_POWERS5, 0xad4ab7112eb3929dN, 3456n)
    WasmI64.store(_POWERS5, 0x86c16c98d2c953c6N, 3464n)
    //5^-125
    WasmI64.store(_POWERS5, 0xd89d64d57a607744N, 3472n)
    WasmI64.store(_POWERS5, 0xe871c7bf077ba8b7N, 3480n)
    //5^-124
    WasmI64.store(_POWERS5, 0x87625f056c7c4a8bN, 3488n)
    WasmI64.store(_POWERS5, 0x11471cd764ad4972N, 3496n)
    //5^-123
    WasmI64.store(_POWERS5, 0xa93af6c6c79b5d2dN, 3504n)
    WasmI64.store(_POWERS5, 0xd598e40d3dd89bcfN, 3512n)
    //5^-122
    WasmI64.store(_POWERS5, 0xd389b47879823479N, 3520n)
    WasmI64.store(_POWERS5, 0x4aff1d108d4ec2c3N, 3528n)
    //5^-121
    WasmI64.store(_POWERS5, 0x843610cb4bf160cbN, 3536n)
    WasmI64.store(_POWERS5, 0xcedf722a585139baN, 3544n)
    //5^-120
    WasmI64.store(_POWERS5, 0xa54394fe1eedb8feN, 3552n)
    WasmI64.store(_POWERS5, 0xc2974eb4ee658828N, 3560n)
    //5^-119
    WasmI64.store(_POWERS5, 0xce947a3da6a9273eN, 3568n)
    WasmI64.store(_POWERS5, 0x733d226229feea32N, 3576n)
    //5^-118
    WasmI64.store(_POWERS5, 0x811ccc668829b887N, 3584n)
    WasmI64.store(_POWERS5, 0x806357d5a3f525fN, 3592n)
    //5^-117
    WasmI64.store(_POWERS5, 0xa163ff802a3426a8N, 3600n)
    WasmI64.store(_POWERS5, 0xca07c2dcb0cf26f7N, 3608n)
    //5^-116
    WasmI64.store(_POWERS5, 0xc9bcff6034c13052N, 3616n)
    WasmI64.store(_POWERS5, 0xfc89b393dd02f0b5N, 3624n)
    //5^-115
    WasmI64.store(_POWERS5, 0xfc2c3f3841f17c67N, 3632n)
    WasmI64.store(_POWERS5, 0xbbac2078d443ace2N, 3640n)
    //5^-114
    WasmI64.store(_POWERS5, 0x9d9ba7832936edc0N, 3648n)
    WasmI64.store(_POWERS5, 0xd54b944b84aa4c0dN, 3656n)
    //5^-113
    WasmI64.store(_POWERS5, 0xc5029163f384a931N, 3664n)
    WasmI64.store(_POWERS5, 0xa9e795e65d4df11N, 3672n)
    //5^-112
    WasmI64.store(_POWERS5, 0xf64335bcf065d37dN, 3680n)
    WasmI64.store(_POWERS5, 0x4d4617b5ff4a16d5N, 3688n)
    //5^-111
    WasmI64.store(_POWERS5, 0x99ea0196163fa42eN, 3696n)
    WasmI64.store(_POWERS5, 0x504bced1bf8e4e45N, 3704n)
    //5^-110
    WasmI64.store(_POWERS5, 0xc06481fb9bcf8d39N, 3712n)
    WasmI64.store(_POWERS5, 0xe45ec2862f71e1d6N, 3720n)
    //5^-109
    WasmI64.store(_POWERS5, 0xf07da27a82c37088N, 3728n)
    WasmI64.store(_POWERS5, 0x5d767327bb4e5a4cN, 3736n)
    //5^-108
    WasmI64.store(_POWERS5, 0x964e858c91ba2655N, 3744n)
    WasmI64.store(_POWERS5, 0x3a6a07f8d510f86fN, 3752n)
    //5^-107
    WasmI64.store(_POWERS5, 0xbbe226efb628afeaN, 3760n)
    WasmI64.store(_POWERS5, 0x890489f70a55368bN, 3768n)
    //5^-106
    WasmI64.store(_POWERS5, 0xeadab0aba3b2dbe5N, 3776n)
    WasmI64.store(_POWERS5, 0x2b45ac74ccea842eN, 3784n)
    //5^-105
    WasmI64.store(_POWERS5, 0x92c8ae6b464fc96fN, 3792n)
    WasmI64.store(_POWERS5, 0x3b0b8bc90012929dN, 3800n)
    //5^-104
    WasmI64.store(_POWERS5, 0xb77ada0617e3bbcbN, 3808n)
    WasmI64.store(_POWERS5, 0x9ce6ebb40173744N, 3816n)
    //5^-103
    WasmI64.store(_POWERS5, 0xe55990879ddcaabdN, 3824n)
    WasmI64.store(_POWERS5, 0xcc420a6a101d0515N, 3832n)
    //5^-102
    WasmI64.store(_POWERS5, 0x8f57fa54c2a9eab6N, 3840n)
    WasmI64.store(_POWERS5, 0x9fa946824a12232dN, 3848n)
    //5^-101
    WasmI64.store(_POWERS5, 0xb32df8e9f3546564N, 3856n)
    WasmI64.store(_POWERS5, 0x47939822dc96abf9N, 3864n)
    //5^-100
    WasmI64.store(_POWERS5, 0xdff9772470297ebdN, 3872n)
    WasmI64.store(_POWERS5, 0x59787e2b93bc56f7N, 3880n)
    //5^-99
    WasmI64.store(_POWERS5, 0x8bfbea76c619ef36N, 3888n)
    WasmI64.store(_POWERS5, 0x57eb4edb3c55b65aN, 3896n)
    //5^-98
    WasmI64.store(_POWERS5, 0xaefae51477a06b03N, 3904n)
    WasmI64.store(_POWERS5, 0xede622920b6b23f1N, 3912n)
    //5^-97
    WasmI64.store(_POWERS5, 0xdab99e59958885c4N, 3920n)
    WasmI64.store(_POWERS5, 0xe95fab368e45ecedN, 3928n)
    //5^-96
    WasmI64.store(_POWERS5, 0x88b402f7fd75539bN, 3936n)
    WasmI64.store(_POWERS5, 0x11dbcb0218ebb414N, 3944n)
    //5^-95
    WasmI64.store(_POWERS5, 0xaae103b5fcd2a881N, 3952n)
    WasmI64.store(_POWERS5, 0xd652bdc29f26a119N, 3960n)
    //5^-94
    WasmI64.store(_POWERS5, 0xd59944a37c0752a2N, 3968n)
    WasmI64.store(_POWERS5, 0x4be76d3346f0495fN, 3976n)
    //5^-93
    WasmI64.store(_POWERS5, 0x857fcae62d8493a5N, 3984n)
    WasmI64.store(_POWERS5, 0x6f70a4400c562ddbN, 3992n)
    //5^-92
    WasmI64.store(_POWERS5, 0xa6dfbd9fb8e5b88eN, 4000n)
    WasmI64.store(_POWERS5, 0xcb4ccd500f6bb952N, 4008n)
    //5^-91
    WasmI64.store(_POWERS5, 0xd097ad07a71f26b2N, 4016n)
    WasmI64.store(_POWERS5, 0x7e2000a41346a7a7N, 4024n)
    //5^-90
    WasmI64.store(_POWERS5, 0x825ecc24c873782fN, 4032n)
    WasmI64.store(_POWERS5, 0x8ed400668c0c28c8N, 4040n)
    //5^-89
    WasmI64.store(_POWERS5, 0xa2f67f2dfa90563bN, 4048n)
    WasmI64.store(_POWERS5, 0x728900802f0f32faN, 4056n)
    //5^-88
    WasmI64.store(_POWERS5, 0xcbb41ef979346bcaN, 4064n)
    WasmI64.store(_POWERS5, 0x4f2b40a03ad2ffb9N, 4072n)
    //5^-87
    WasmI64.store(_POWERS5, 0xfea126b7d78186bcN, 4080n)
    WasmI64.store(_POWERS5, 0xe2f610c84987bfa8N, 4088n)
    //5^-86
    WasmI64.store(_POWERS5, 0x9f24b832e6b0f436N, 4096n)
    WasmI64.store(_POWERS5, 0xdd9ca7d2df4d7c9N, 4104n)
    //5^-85
    WasmI64.store(_POWERS5, 0xc6ede63fa05d3143N, 4112n)
    WasmI64.store(_POWERS5, 0x91503d1c79720dbbN, 4120n)
    //5^-84
    WasmI64.store(_POWERS5, 0xf8a95fcf88747d94N, 4128n)
    WasmI64.store(_POWERS5, 0x75a44c6397ce912aN, 4136n)
    //5^-83
    WasmI64.store(_POWERS5, 0x9b69dbe1b548ce7cN, 4144n)
    WasmI64.store(_POWERS5, 0xc986afbe3ee11abaN, 4152n)
    //5^-82
    WasmI64.store(_POWERS5, 0xc24452da229b021bN, 4160n)
    WasmI64.store(_POWERS5, 0xfbe85badce996168N, 4168n)
    //5^-81
    WasmI64.store(_POWERS5, 0xf2d56790ab41c2a2N, 4176n)
    WasmI64.store(_POWERS5, 0xfae27299423fb9c3N, 4184n)
    //5^-80
    WasmI64.store(_POWERS5, 0x97c560ba6b0919a5N, 4192n)
    WasmI64.store(_POWERS5, 0xdccd879fc967d41aN, 4200n)
    //5^-79
    WasmI64.store(_POWERS5, 0xbdb6b8e905cb600fN, 4208n)
    WasmI64.store(_POWERS5, 0x5400e987bbc1c920N, 4216n)
    //5^-78
    WasmI64.store(_POWERS5, 0xed246723473e3813N, 4224n)
    WasmI64.store(_POWERS5, 0x290123e9aab23b68N, 4232n)
    //5^-77
    WasmI64.store(_POWERS5, 0x9436c0760c86e30bN, 4240n)
    WasmI64.store(_POWERS5, 0xf9a0b6720aaf6521N, 4248n)
    //5^-76
    WasmI64.store(_POWERS5, 0xb94470938fa89bceN, 4256n)
    WasmI64.store(_POWERS5, 0xf808e40e8d5b3e69N, 4264n)
    //5^-75
    WasmI64.store(_POWERS5, 0xe7958cb87392c2c2N, 4272n)
    WasmI64.store(_POWERS5, 0xb60b1d1230b20e04N, 4280n)
    //5^-74
    WasmI64.store(_POWERS5, 0x90bd77f3483bb9b9N, 4288n)
    WasmI64.store(_POWERS5, 0xb1c6f22b5e6f48c2N, 4296n)
    //5^-73
    WasmI64.store(_POWERS5, 0xb4ecd5f01a4aa828N, 4304n)
    WasmI64.store(_POWERS5, 0x1e38aeb6360b1af3N, 4312n)
    //5^-72
    WasmI64.store(_POWERS5, 0xe2280b6c20dd5232N, 4320n)
    WasmI64.store(_POWERS5, 0x25c6da63c38de1b0N, 4328n)
    //5^-71
    WasmI64.store(_POWERS5, 0x8d590723948a535fN, 4336n)
    WasmI64.store(_POWERS5, 0x579c487e5a38ad0eN, 4344n)
    //5^-70
    WasmI64.store(_POWERS5, 0xb0af48ec79ace837N, 4352n)
    WasmI64.store(_POWERS5, 0x2d835a9df0c6d851N, 4360n)
    //5^-69
    WasmI64.store(_POWERS5, 0xdcdb1b2798182244N, 4368n)
    WasmI64.store(_POWERS5, 0xf8e431456cf88e65N, 4376n)
    //5^-68
    WasmI64.store(_POWERS5, 0x8a08f0f8bf0f156bN, 4384n)
    WasmI64.store(_POWERS5, 0x1b8e9ecb641b58ffN, 4392n)
    //5^-67
    WasmI64.store(_POWERS5, 0xac8b2d36eed2dac5N, 4400n)
    WasmI64.store(_POWERS5, 0xe272467e3d222f3fN, 4408n)
    //5^-66
    WasmI64.store(_POWERS5, 0xd7adf884aa879177N, 4416n)
    WasmI64.store(_POWERS5, 0x5b0ed81dcc6abb0fN, 4424n)
    //5^-65
    WasmI64.store(_POWERS5, 0x86ccbb52ea94baeaN, 4432n)
    WasmI64.store(_POWERS5, 0x98e947129fc2b4e9N, 4440n)
    //5^-64
    WasmI64.store(_POWERS5, 0xa87fea27a539e9a5N, 4448n)
    WasmI64.store(_POWERS5, 0x3f2398d747b36224N, 4456n)
    //5^-63
    WasmI64.store(_POWERS5, 0xd29fe4b18e88640eN, 4464n)
    WasmI64.store(_POWERS5, 0x8eec7f0d19a03aadN, 4472n)
    //5^-62
    WasmI64.store(_POWERS5, 0x83a3eeeef9153e89N, 4480n)
    WasmI64.store(_POWERS5, 0x1953cf68300424acN, 4488n)
    //5^-61
    WasmI64.store(_POWERS5, 0xa48ceaaab75a8e2bN, 4496n)
    WasmI64.store(_POWERS5, 0x5fa8c3423c052dd7N, 4504n)
    //5^-60
    WasmI64.store(_POWERS5, 0xcdb02555653131b6N, 4512n)
    WasmI64.store(_POWERS5, 0x3792f412cb06794dN, 4520n)
    //5^-59
    WasmI64.store(_POWERS5, 0x808e17555f3ebf11N, 4528n)
    WasmI64.store(_POWERS5, 0xe2bbd88bbee40bd0N, 4536n)
    //5^-58
    WasmI64.store(_POWERS5, 0xa0b19d2ab70e6ed6N, 4544n)
    WasmI64.store(_POWERS5, 0x5b6aceaeae9d0ec4N, 4552n)
    //5^-57
    WasmI64.store(_POWERS5, 0xc8de047564d20a8bN, 4560n)
    WasmI64.store(_POWERS5, 0xf245825a5a445275N, 4568n)
    //5^-56
    WasmI64.store(_POWERS5, 0xfb158592be068d2eN, 4576n)
    WasmI64.store(_POWERS5, 0xeed6e2f0f0d56712N, 4584n)
    //5^-55
    WasmI64.store(_POWERS5, 0x9ced737bb6c4183dN, 4592n)
    WasmI64.store(_POWERS5, 0x55464dd69685606bN, 4600n)
    //5^-54
    WasmI64.store(_POWERS5, 0xc428d05aa4751e4cN, 4608n)
    WasmI64.store(_POWERS5, 0xaa97e14c3c26b886N, 4616n)
    //5^-53
    WasmI64.store(_POWERS5, 0xf53304714d9265dfN, 4624n)
    WasmI64.store(_POWERS5, 0xd53dd99f4b3066a8N, 4632n)
    //5^-52
    WasmI64.store(_POWERS5, 0x993fe2c6d07b7fabN, 4640n)
    WasmI64.store(_POWERS5, 0xe546a8038efe4029N, 4648n)
    //5^-51
    WasmI64.store(_POWERS5, 0xbf8fdb78849a5f96N, 4656n)
    WasmI64.store(_POWERS5, 0xde98520472bdd033N, 4664n)
    //5^-50
    WasmI64.store(_POWERS5, 0xef73d256a5c0f77cN, 4672n)
    WasmI64.store(_POWERS5, 0x963e66858f6d4440N, 4680n)
    //5^-49
    WasmI64.store(_POWERS5, 0x95a8637627989aadN, 4688n)
    WasmI64.store(_POWERS5, 0xdde7001379a44aa8N, 4696n)
    //5^-48
    WasmI64.store(_POWERS5, 0xbb127c53b17ec159N, 4704n)
    WasmI64.store(_POWERS5, 0x5560c018580d5d52N, 4712n)
    //5^-47
    WasmI64.store(_POWERS5, 0xe9d71b689dde71afN, 4720n)
    WasmI64.store(_POWERS5, 0xaab8f01e6e10b4a6N, 4728n)
    //5^-46
    WasmI64.store(_POWERS5, 0x9226712162ab070dN, 4736n)
    WasmI64.store(_POWERS5, 0xcab3961304ca70e8N, 4744n)
    //5^-45
    WasmI64.store(_POWERS5, 0xb6b00d69bb55c8d1N, 4752n)
    WasmI64.store(_POWERS5, 0x3d607b97c5fd0d22N, 4760n)
    //5^-44
    WasmI64.store(_POWERS5, 0xe45c10c42a2b3b05N, 4768n)
    WasmI64.store(_POWERS5, 0x8cb89a7db77c506aN, 4776n)
    //5^-43
    WasmI64.store(_POWERS5, 0x8eb98a7a9a5b04e3N, 4784n)
    WasmI64.store(_POWERS5, 0x77f3608e92adb242N, 4792n)
    //5^-42
    WasmI64.store(_POWERS5, 0xb267ed1940f1c61cN, 4800n)
    WasmI64.store(_POWERS5, 0x55f038b237591ed3N, 4808n)
    //5^-41
    WasmI64.store(_POWERS5, 0xdf01e85f912e37a3N, 4816n)
    WasmI64.store(_POWERS5, 0x6b6c46dec52f6688N, 4824n)
    //5^-40
    WasmI64.store(_POWERS5, 0x8b61313bbabce2c6N, 4832n)
    WasmI64.store(_POWERS5, 0x2323ac4b3b3da015N, 4840n)
    //5^-39
    WasmI64.store(_POWERS5, 0xae397d8aa96c1b77N, 4848n)
    WasmI64.store(_POWERS5, 0xabec975e0a0d081aN, 4856n)
    //5^-38
    WasmI64.store(_POWERS5, 0xd9c7dced53c72255N, 4864n)
    WasmI64.store(_POWERS5, 0x96e7bd358c904a21N, 4872n)
    //5^-37
    WasmI64.store(_POWERS5, 0x881cea14545c7575N, 4880n)
    WasmI64.store(_POWERS5, 0x7e50d64177da2e54N, 4888n)
    //5^-36
    WasmI64.store(_POWERS5, 0xaa242499697392d2N, 4896n)
    WasmI64.store(_POWERS5, 0xdde50bd1d5d0b9e9N, 4904n)
    //5^-35
    WasmI64.store(_POWERS5, 0xd4ad2dbfc3d07787N, 4912n)
    WasmI64.store(_POWERS5, 0x955e4ec64b44e864N, 4920n)
    //5^-34
    WasmI64.store(_POWERS5, 0x84ec3c97da624ab4N, 4928n)
    WasmI64.store(_POWERS5, 0xbd5af13bef0b113eN, 4936n)
    //5^-33
    WasmI64.store(_POWERS5, 0xa6274bbdd0fadd61N, 4944n)
    WasmI64.store(_POWERS5, 0xecb1ad8aeacdd58eN, 4952n)
    //5^-32
    WasmI64.store(_POWERS5, 0xcfb11ead453994baN, 4960n)
    WasmI64.store(_POWERS5, 0x67de18eda5814af2N, 4968n)
    //5^-31
    WasmI64.store(_POWERS5, 0x81ceb32c4b43fcf4N, 4976n)
    WasmI64.store(_POWERS5, 0x80eacf948770ced7N, 4984n)
    //5^-30
    WasmI64.store(_POWERS5, 0xa2425ff75e14fc31N, 4992n)
    WasmI64.store(_POWERS5, 0xa1258379a94d028dN, 5000n)
    //5^-29
    WasmI64.store(_POWERS5, 0xcad2f7f5359a3b3eN, 5008n)
    WasmI64.store(_POWERS5, 0x96ee45813a04330N, 5016n)
    //5^-28
    WasmI64.store(_POWERS5, 0xfd87b5f28300ca0dN, 5024n)
    WasmI64.store(_POWERS5, 0x8bca9d6e188853fcN, 5032n)
    //5^-27
    WasmI64.store(_POWERS5, 0x9e74d1b791e07e48N, 5040n)
    WasmI64.store(_POWERS5, 0x775ea264cf55347eN, 5048n)
    //5^-26
    WasmI64.store(_POWERS5, 0xc612062576589ddaN, 5056n)
    WasmI64.store(_POWERS5, 0x95364afe032a819eN, 5064n)
    //5^-25
    WasmI64.store(_POWERS5, 0xf79687aed3eec551N, 5072n)
    WasmI64.store(_POWERS5, 0x3a83ddbd83f52205N, 5080n)
    //5^-24
    WasmI64.store(_POWERS5, 0x9abe14cd44753b52N, 5088n)
    WasmI64.store(_POWERS5, 0xc4926a9672793543N, 5096n)
    //5^-23
    WasmI64.store(_POWERS5, 0xc16d9a0095928a27N, 5104n)
    WasmI64.store(_POWERS5, 0x75b7053c0f178294N, 5112n)
    //5^-22
    WasmI64.store(_POWERS5, 0xf1c90080baf72cb1N, 5120n)
    WasmI64.store(_POWERS5, 0x5324c68b12dd6339N, 5128n)
    //5^-21
    WasmI64.store(_POWERS5, 0x971da05074da7beeN, 5136n)
    WasmI64.store(_POWERS5, 0xd3f6fc16ebca5e04N, 5144n)
    //5^-20
    WasmI64.store(_POWERS5, 0xbce5086492111aeaN, 5152n)
    WasmI64.store(_POWERS5, 0x88f4bb1ca6bcf585N, 5160n)
    //5^-19
    WasmI64.store(_POWERS5, 0xec1e4a7db69561a5N, 5168n)
    WasmI64.store(_POWERS5, 0x2b31e9e3d06c32e6N, 5176n)
    //5^-18
    WasmI64.store(_POWERS5, 0x9392ee8e921d5d07N, 5184n)
    WasmI64.store(_POWERS5, 0x3aff322e62439fd0N, 5192n)
    //5^-17
    WasmI64.store(_POWERS5, 0xb877aa3236a4b449N, 5200n)
    WasmI64.store(_POWERS5, 0x9befeb9fad487c3N, 5208n)
    //5^-16
    WasmI64.store(_POWERS5, 0xe69594bec44de15bN, 5216n)
    WasmI64.store(_POWERS5, 0x4c2ebe687989a9b4N, 5224n)
    //5^-15
    WasmI64.store(_POWERS5, 0x901d7cf73ab0acd9N, 5232n)
    WasmI64.store(_POWERS5, 0xf9d37014bf60a11N, 5240n)
    //5^-14
    WasmI64.store(_POWERS5, 0xb424dc35095cd80fN, 5248n)
    WasmI64.store(_POWERS5, 0x538484c19ef38c95N, 5256n)
    //5^-13
    WasmI64.store(_POWERS5, 0xe12e13424bb40e13N, 5264n)
    WasmI64.store(_POWERS5, 0x2865a5f206b06fbaN, 5272n)
    //5^-12
    WasmI64.store(_POWERS5, 0x8cbccc096f5088cbN, 5280n)
    WasmI64.store(_POWERS5, 0xf93f87b7442e45d4N, 5288n)
    //5^-11
    WasmI64.store(_POWERS5, 0xafebff0bcb24aafeN, 5296n)
    WasmI64.store(_POWERS5, 0xf78f69a51539d749N, 5304n)
    //5^-10
    WasmI64.store(_POWERS5, 0xdbe6fecebdedd5beN, 5312n)
    WasmI64.store(_POWERS5, 0xb573440e5a884d1cN, 5320n)
    //5^-9
    WasmI64.store(_POWERS5, 0x89705f4136b4a597N, 5328n)
    WasmI64.store(_POWERS5, 0x31680a88f8953031N, 5336n)
    //5^-8
    WasmI64.store(_POWERS5, 0xabcc77118461cefcN, 5344n)
    WasmI64.store(_POWERS5, 0xfdc20d2b36ba7c3eN, 5352n)
    //5^-7
    WasmI64.store(_POWERS5, 0xd6bf94d5e57a42bcN, 5360n)
    WasmI64.store(_POWERS5, 0x3d32907604691b4dN, 5368n)
    //5^-6
    WasmI64.store(_POWERS5, 0x8637bd05af6c69b5N, 5376n)
    WasmI64.store(_POWERS5, 0xa63f9a49c2c1b110N, 5384n)
    //5^-5
    WasmI64.store(_POWERS5, 0xa7c5ac471b478423N, 5392n)
    WasmI64.store(_POWERS5, 0xfcf80dc33721d54N, 5400n)
    //5^-4
    WasmI64.store(_POWERS5, 0xd1b71758e219652bN, 5408n)
    WasmI64.store(_POWERS5, 0xd3c36113404ea4a9N, 5416n)
    //5^-3
    WasmI64.store(_POWERS5, 0x83126e978d4fdf3bN, 5424n)
    WasmI64.store(_POWERS5, 0x645a1cac083126eaN, 5432n)
    //5^-2
    WasmI64.store(_POWERS5, 0xa3d70a3d70a3d70aN, 5440n)
    WasmI64.store(_POWERS5, 0x3d70a3d70a3d70a4N, 5448n)
    //5^-1
    WasmI64.store(_POWERS5, 0xccccccccccccccccN, 5456n)
    WasmI64.store(_POWERS5, 0xcccccccccccccccdN, 5464n)
    //5^0
    WasmI64.store(_POWERS5, 0x8000000000000000N, 5472n)
    WasmI64.store(_POWERS5, 0x0N, 5480n)
    //5^1
    WasmI64.store(_POWERS5, 0xa000000000000000N, 5488n)
    WasmI64.store(_POWERS5, 0x0N, 5496n)
    //5^2
    WasmI64.store(_POWERS5, 0xc800000000000000N, 5504n)
    WasmI64.store(_POWERS5, 0x0N, 5512n)
    //5^3
    WasmI64.store(_POWERS5, 0xfa00000000000000N, 5520n)
    WasmI64.store(_POWERS5, 0x0N, 5528n)
    //5^4
    WasmI64.store(_POWERS5, 0x9c40000000000000N, 5536n)
    WasmI64.store(_POWERS5, 0x0N, 5544n)
    //5^5
    WasmI64.store(_POWERS5, 0xc350000000000000N, 5552n)
    WasmI64.store(_POWERS5, 0x0N, 5560n)
    //5^6
    WasmI64.store(_POWERS5, 0xf424000000000000N, 5568n)
    WasmI64.store(_POWERS5, 0x0N, 5576n)
    //5^7
    WasmI64.store(_POWERS5, 0x9896800000000000N, 5584n)
    WasmI64.store(_POWERS5, 0x0N, 5592n)
    //5^8
    WasmI64.store(_POWERS5, 0xbebc200000000000N, 5600n)
    WasmI64.store(_POWERS5, 0x0N, 5608n)
    //5^9
    WasmI64.store(_POWERS5, 0xee6b280000000000N, 5616n)
    WasmI64.store(_POWERS5, 0x0N, 5624n)
    //5^10
    WasmI64.store(_POWERS5, 0x9502f90000000000N, 5632n)
    WasmI64.store(_POWERS5, 0x0N, 5640n)
    //5^11
    WasmI64.store(_POWERS5, 0xba43b74000000000N, 5648n)
    WasmI64.store(_POWERS5, 0x0N, 5656n)
    //5^12
    WasmI64.store(_POWERS5, 0xe8d4a51000000000N, 5664n)
    WasmI64.store(_POWERS5, 0x0N, 5672n)
    //5^13
    WasmI64.store(_POWERS5, 0x9184e72a00000000N, 5680n)
    WasmI64.store(_POWERS5, 0x0N, 5688n)
    //5^14
    WasmI64.store(_POWERS5, 0xb5e620f480000000N, 5696n)
    WasmI64.store(_POWERS5, 0x0N, 5704n)
    //5^15
    WasmI64.store(_POWERS5, 0xe35fa931a0000000N, 5712n)
    WasmI64.store(_POWERS5, 0x0N, 5720n)
    //5^16
    WasmI64.store(_POWERS5, 0x8e1bc9bf04000000N, 5728n)
    WasmI64.store(_POWERS5, 0x0N, 5736n)
    //5^17
    WasmI64.store(_POWERS5, 0xb1a2bc2ec5000000N, 5744n)
    WasmI64.store(_POWERS5, 0x0N, 5752n)
    //5^18
    WasmI64.store(_POWERS5, 0xde0b6b3a76400000N, 5760n)
    WasmI64.store(_POWERS5, 0x0N, 5768n)
    //5^19
    WasmI64.store(_POWERS5, 0x8ac7230489e80000N, 5776n)
    WasmI64.store(_POWERS5, 0x0N, 5784n)
    //5^20
    WasmI64.store(_POWERS5, 0xad78ebc5ac620000N, 5792n)
    WasmI64.store(_POWERS5, 0x0N, 5800n)
    //5^21
    WasmI64.store(_POWERS5, 0xd8d726b7177a8000N, 5808n)
    WasmI64.store(_POWERS5, 0x0N, 5816n)
    //5^22
    WasmI64.store(_POWERS5, 0x878678326eac9000N, 5824n)
    WasmI64.store(_POWERS5, 0x0N, 5832n)
    //5^23
    WasmI64.store(_POWERS5, 0xa968163f0a57b400N, 5840n)
    WasmI64.store(_POWERS5, 0x0N, 5848n)
    //5^24
    WasmI64.store(_POWERS5, 0xd3c21bcecceda100N, 5856n)
    WasmI64.store(_POWERS5, 0x0N, 5864n)
    //5^25
    WasmI64.store(_POWERS5, 0x84595161401484a0N, 5872n)
    WasmI64.store(_POWERS5, 0x0N, 5880n)
    //5^26
    WasmI64.store(_POWERS5, 0xa56fa5b99019a5c8N, 5888n)
    WasmI64.store(_POWERS5, 0x0N, 5896n)
    //5^27
    WasmI64.store(_POWERS5, 0xcecb8f27f4200f3aN, 5904n)
    WasmI64.store(_POWERS5, 0x0N, 5912n)
    //5^28
    WasmI64.store(_POWERS5, 0x813f3978f8940984N, 5920n)
    WasmI64.store(_POWERS5, 0x4000000000000000N, 5928n)
    //5^29
    WasmI64.store(_POWERS5, 0xa18f07d736b90be5N, 5936n)
    WasmI64.store(_POWERS5, 0x5000000000000000N, 5944n)
    //5^30
    WasmI64.store(_POWERS5, 0xc9f2c9cd04674edeN, 5952n)
    WasmI64.store(_POWERS5, 0xa400000000000000N, 5960n)
    //5^31
    WasmI64.store(_POWERS5, 0xfc6f7c4045812296N, 5968n)
    WasmI64.store(_POWERS5, 0x4d00000000000000N, 5976n)
    //5^32
    WasmI64.store(_POWERS5, 0x9dc5ada82b70b59dN, 5984n)
    WasmI64.store(_POWERS5, 0xf020000000000000N, 5992n)
    //5^33
    WasmI64.store(_POWERS5, 0xc5371912364ce305N, 6000n)
    WasmI64.store(_POWERS5, 0x6c28000000000000N, 6008n)
    //5^34
    WasmI64.store(_POWERS5, 0xf684df56c3e01bc6N, 6016n)
    WasmI64.store(_POWERS5, 0xc732000000000000N, 6024n)
    //5^35
    WasmI64.store(_POWERS5, 0x9a130b963a6c115cN, 6032n)
    WasmI64.store(_POWERS5, 0x3c7f400000000000N, 6040n)
    //5^36
    WasmI64.store(_POWERS5, 0xc097ce7bc90715b3N, 6048n)
    WasmI64.store(_POWERS5, 0x4b9f100000000000N, 6056n)
    //5^37
    WasmI64.store(_POWERS5, 0xf0bdc21abb48db20N, 6064n)
    WasmI64.store(_POWERS5, 0x1e86d40000000000N, 6072n)
    //5^38
    WasmI64.store(_POWERS5, 0x96769950b50d88f4N, 6080n)
    WasmI64.store(_POWERS5, 0x1314448000000000N, 6088n)
    //5^39
    WasmI64.store(_POWERS5, 0xbc143fa4e250eb31N, 6096n)
    WasmI64.store(_POWERS5, 0x17d955a000000000N, 6104n)
    //5^40
    WasmI64.store(_POWERS5, 0xeb194f8e1ae525fdN, 6112n)
    WasmI64.store(_POWERS5, 0x5dcfab0800000000N, 6120n)
    //5^41
    WasmI64.store(_POWERS5, 0x92efd1b8d0cf37beN, 6128n)
    WasmI64.store(_POWERS5, 0x5aa1cae500000000N, 6136n)
    //5^42
    WasmI64.store(_POWERS5, 0xb7abc627050305adN, 6144n)
    WasmI64.store(_POWERS5, 0xf14a3d9e40000000N, 6152n)
    //5^43
    WasmI64.store(_POWERS5, 0xe596b7b0c643c719N, 6160n)
    WasmI64.store(_POWERS5, 0x6d9ccd05d0000000N, 6168n)
    //5^44
    WasmI64.store(_POWERS5, 0x8f7e32ce7bea5c6fN, 6176n)
    WasmI64.store(_POWERS5, 0xe4820023a2000000N, 6184n)
    //5^45
    WasmI64.store(_POWERS5, 0xb35dbf821ae4f38bN, 6192n)
    WasmI64.store(_POWERS5, 0xdda2802c8a800000N, 6200n)
    //5^46
    WasmI64.store(_POWERS5, 0xe0352f62a19e306eN, 6208n)
    WasmI64.store(_POWERS5, 0xd50b2037ad200000N, 6216n)
    //5^47
    WasmI64.store(_POWERS5, 0x8c213d9da502de45N, 6224n)
    WasmI64.store(_POWERS5, 0x4526f422cc340000N, 6232n)
    //5^48
    WasmI64.store(_POWERS5, 0xaf298d050e4395d6N, 6240n)
    WasmI64.store(_POWERS5, 0x9670b12b7f410000N, 6248n)
    //5^49
    WasmI64.store(_POWERS5, 0xdaf3f04651d47b4cN, 6256n)
    WasmI64.store(_POWERS5, 0x3c0cdd765f114000N, 6264n)
    //5^50
    WasmI64.store(_POWERS5, 0x88d8762bf324cd0fN, 6272n)
    WasmI64.store(_POWERS5, 0xa5880a69fb6ac800N, 6280n)
    //5^51
    WasmI64.store(_POWERS5, 0xab0e93b6efee0053N, 6288n)
    WasmI64.store(_POWERS5, 0x8eea0d047a457a00N, 6296n)
    //5^52
    WasmI64.store(_POWERS5, 0xd5d238a4abe98068N, 6304n)
    WasmI64.store(_POWERS5, 0x72a4904598d6d880N, 6312n)
    //5^53
    WasmI64.store(_POWERS5, 0x85a36366eb71f041N, 6320n)
    WasmI64.store(_POWERS5, 0x47a6da2b7f864750N, 6328n)
    //5^54
    WasmI64.store(_POWERS5, 0xa70c3c40a64e6c51N, 6336n)
    WasmI64.store(_POWERS5, 0x999090b65f67d924N, 6344n)
    //5^55
    WasmI64.store(_POWERS5, 0xd0cf4b50cfe20765N, 6352n)
    WasmI64.store(_POWERS5, 0xfff4b4e3f741cf6dN, 6360n)
    //5^56
    WasmI64.store(_POWERS5, 0x82818f1281ed449fN, 6368n)
    WasmI64.store(_POWERS5, 0xbff8f10e7a8921a4N, 6376n)
    //5^57
    WasmI64.store(_POWERS5, 0xa321f2d7226895c7N, 6384n)
    WasmI64.store(_POWERS5, 0xaff72d52192b6a0dN, 6392n)
    //5^58
    WasmI64.store(_POWERS5, 0xcbea6f8ceb02bb39N, 6400n)
    WasmI64.store(_POWERS5, 0x9bf4f8a69f764490N, 6408n)
    //5^59
    WasmI64.store(_POWERS5, 0xfee50b7025c36a08N, 6416n)
    WasmI64.store(_POWERS5, 0x2f236d04753d5b4N, 6424n)
    //5^60
    WasmI64.store(_POWERS5, 0x9f4f2726179a2245N, 6432n)
    WasmI64.store(_POWERS5, 0x1d762422c946590N, 6440n)
    //5^61
    WasmI64.store(_POWERS5, 0xc722f0ef9d80aad6N, 6448n)
    WasmI64.store(_POWERS5, 0x424d3ad2b7b97ef5N, 6456n)
    //5^62
    WasmI64.store(_POWERS5, 0xf8ebad2b84e0d58bN, 6464n)
    WasmI64.store(_POWERS5, 0xd2e0898765a7deb2N, 6472n)
    //5^63
    WasmI64.store(_POWERS5, 0x9b934c3b330c8577N, 6480n)
    WasmI64.store(_POWERS5, 0x63cc55f49f88eb2fN, 6488n)
    //5^64
    WasmI64.store(_POWERS5, 0xc2781f49ffcfa6d5N, 6496n)
    WasmI64.store(_POWERS5, 0x3cbf6b71c76b25fbN, 6504n)
    //5^65
    WasmI64.store(_POWERS5, 0xf316271c7fc3908aN, 6512n)
    WasmI64.store(_POWERS5, 0x8bef464e3945ef7aN, 6520n)
    //5^66
    WasmI64.store(_POWERS5, 0x97edd871cfda3a56N, 6528n)
    WasmI64.store(_POWERS5, 0x97758bf0e3cbb5acN, 6536n)
    //5^67
    WasmI64.store(_POWERS5, 0xbde94e8e43d0c8ecN, 6544n)
    WasmI64.store(_POWERS5, 0x3d52eeed1cbea317N, 6552n)
    //5^68
    WasmI64.store(_POWERS5, 0xed63a231d4c4fb27N, 6560n)
    WasmI64.store(_POWERS5, 0x4ca7aaa863ee4bddN, 6568n)
    //5^69
    WasmI64.store(_POWERS5, 0x945e455f24fb1cf8N, 6576n)
    WasmI64.store(_POWERS5, 0x8fe8caa93e74ef6aN, 6584n)
    //5^70
    WasmI64.store(_POWERS5, 0xb975d6b6ee39e436N, 6592n)
    WasmI64.store(_POWERS5, 0xb3e2fd538e122b44N, 6600n)
    //5^71
    WasmI64.store(_POWERS5, 0xe7d34c64a9c85d44N, 6608n)
    WasmI64.store(_POWERS5, 0x60dbbca87196b616N, 6616n)
    //5^72
    WasmI64.store(_POWERS5, 0x90e40fbeea1d3a4aN, 6624n)
    WasmI64.store(_POWERS5, 0xbc8955e946fe31cdN, 6632n)
    //5^73
    WasmI64.store(_POWERS5, 0xb51d13aea4a488ddN, 6640n)
    WasmI64.store(_POWERS5, 0x6babab6398bdbe41N, 6648n)
    //5^74
    WasmI64.store(_POWERS5, 0xe264589a4dcdab14N, 6656n)
    WasmI64.store(_POWERS5, 0xc696963c7eed2dd1N, 6664n)
    //5^75
    WasmI64.store(_POWERS5, 0x8d7eb76070a08aecN, 6672n)
    WasmI64.store(_POWERS5, 0xfc1e1de5cf543ca2N, 6680n)
    //5^76
    WasmI64.store(_POWERS5, 0xb0de65388cc8ada8N, 6688n)
    WasmI64.store(_POWERS5, 0x3b25a55f43294bcbN, 6696n)
    //5^77
    WasmI64.store(_POWERS5, 0xdd15fe86affad912N, 6704n)
    WasmI64.store(_POWERS5, 0x49ef0eb713f39ebeN, 6712n)
    //5^78
    WasmI64.store(_POWERS5, 0x8a2dbf142dfcc7abN, 6720n)
    WasmI64.store(_POWERS5, 0x6e3569326c784337N, 6728n)
    //5^79
    WasmI64.store(_POWERS5, 0xacb92ed9397bf996N, 6736n)
    WasmI64.store(_POWERS5, 0x49c2c37f07965404N, 6744n)
    //5^80
    WasmI64.store(_POWERS5, 0xd7e77a8f87daf7fbN, 6752n)
    WasmI64.store(_POWERS5, 0xdc33745ec97be906N, 6760n)
    //5^81
    WasmI64.store(_POWERS5, 0x86f0ac99b4e8dafdN, 6768n)
    WasmI64.store(_POWERS5, 0x69a028bb3ded71a3N, 6776n)
    //5^82
    WasmI64.store(_POWERS5, 0xa8acd7c0222311bcN, 6784n)
    WasmI64.store(_POWERS5, 0xc40832ea0d68ce0cN, 6792n)
    //5^83
    WasmI64.store(_POWERS5, 0xd2d80db02aabd62bN, 6800n)
    WasmI64.store(_POWERS5, 0xf50a3fa490c30190N, 6808n)
    //5^84
    WasmI64.store(_POWERS5, 0x83c7088e1aab65dbN, 6816n)
    WasmI64.store(_POWERS5, 0x792667c6da79e0faN, 6824n)
    //5^85
    WasmI64.store(_POWERS5, 0xa4b8cab1a1563f52N, 6832n)
    WasmI64.store(_POWERS5, 0x577001b891185938N, 6840n)
    //5^86
    WasmI64.store(_POWERS5, 0xcde6fd5e09abcf26N, 6848n)
    WasmI64.store(_POWERS5, 0xed4c0226b55e6f86N, 6856n)
    //5^87
    WasmI64.store(_POWERS5, 0x80b05e5ac60b6178N, 6864n)
    WasmI64.store(_POWERS5, 0x544f8158315b05b4N, 6872n)
    //5^88
    WasmI64.store(_POWERS5, 0xa0dc75f1778e39d6N, 6880n)
    WasmI64.store(_POWERS5, 0x696361ae3db1c721N, 6888n)
    //5^89
    WasmI64.store(_POWERS5, 0xc913936dd571c84cN, 6896n)
    WasmI64.store(_POWERS5, 0x3bc3a19cd1e38e9N, 6904n)
    //5^90
    WasmI64.store(_POWERS5, 0xfb5878494ace3a5fN, 6912n)
    WasmI64.store(_POWERS5, 0x4ab48a04065c723N, 6920n)
    //5^91
    WasmI64.store(_POWERS5, 0x9d174b2dcec0e47bN, 6928n)
    WasmI64.store(_POWERS5, 0x62eb0d64283f9c76N, 6936n)
    //5^92
    WasmI64.store(_POWERS5, 0xc45d1df942711d9aN, 6944n)
    WasmI64.store(_POWERS5, 0x3ba5d0bd324f8394N, 6952n)
    //5^93
    WasmI64.store(_POWERS5, 0xf5746577930d6500N, 6960n)
    WasmI64.store(_POWERS5, 0xca8f44ec7ee36479N, 6968n)
    //5^94
    WasmI64.store(_POWERS5, 0x9968bf6abbe85f20N, 6976n)
    WasmI64.store(_POWERS5, 0x7e998b13cf4e1ecbN, 6984n)
    //5^95
    WasmI64.store(_POWERS5, 0xbfc2ef456ae276e8N, 6992n)
    WasmI64.store(_POWERS5, 0x9e3fedd8c321a67eN, 7000n)
    //5^96
    WasmI64.store(_POWERS5, 0xefb3ab16c59b14a2N, 7008n)
    WasmI64.store(_POWERS5, 0xc5cfe94ef3ea101eN, 7016n)
    //5^97
    WasmI64.store(_POWERS5, 0x95d04aee3b80ece5N, 7024n)
    WasmI64.store(_POWERS5, 0xbba1f1d158724a12N, 7032n)
    //5^98
    WasmI64.store(_POWERS5, 0xbb445da9ca61281fN, 7040n)
    WasmI64.store(_POWERS5, 0x2a8a6e45ae8edc97N, 7048n)
    //5^99
    WasmI64.store(_POWERS5, 0xea1575143cf97226N, 7056n)
    WasmI64.store(_POWERS5, 0xf52d09d71a3293bdN, 7064n)
    //5^100
    WasmI64.store(_POWERS5, 0x924d692ca61be758N, 7072n)
    WasmI64.store(_POWERS5, 0x593c2626705f9c56N, 7080n)
    //5^101
    WasmI64.store(_POWERS5, 0xb6e0c377cfa2e12eN, 7088n)
    WasmI64.store(_POWERS5, 0x6f8b2fb00c77836cN, 7096n)
    //5^102
    WasmI64.store(_POWERS5, 0xe498f455c38b997aN, 7104n)
    WasmI64.store(_POWERS5, 0xb6dfb9c0f956447N, 7112n)
    //5^103
    WasmI64.store(_POWERS5, 0x8edf98b59a373fecN, 7120n)
    WasmI64.store(_POWERS5, 0x4724bd4189bd5eacN, 7128n)
    //5^104
    WasmI64.store(_POWERS5, 0xb2977ee300c50fe7N, 7136n)
    WasmI64.store(_POWERS5, 0x58edec91ec2cb657N, 7144n)
    //5^105
    WasmI64.store(_POWERS5, 0xdf3d5e9bc0f653e1N, 7152n)
    WasmI64.store(_POWERS5, 0x2f2967b66737e3edN, 7160n)
    //5^106
    WasmI64.store(_POWERS5, 0x8b865b215899f46cN, 7168n)
    WasmI64.store(_POWERS5, 0xbd79e0d20082ee74N, 7176n)
    //5^107
    WasmI64.store(_POWERS5, 0xae67f1e9aec07187N, 7184n)
    WasmI64.store(_POWERS5, 0xecd8590680a3aa11N, 7192n)
    //5^108
    WasmI64.store(_POWERS5, 0xda01ee641a708de9N, 7200n)
    WasmI64.store(_POWERS5, 0xe80e6f4820cc9495N, 7208n)
    //5^109
    WasmI64.store(_POWERS5, 0x884134fe908658b2N, 7216n)
    WasmI64.store(_POWERS5, 0x3109058d147fdcddN, 7224n)
    //5^110
    WasmI64.store(_POWERS5, 0xaa51823e34a7eedeN, 7232n)
    WasmI64.store(_POWERS5, 0xbd4b46f0599fd415N, 7240n)
    //5^111
    WasmI64.store(_POWERS5, 0xd4e5e2cdc1d1ea96N, 7248n)
    WasmI64.store(_POWERS5, 0x6c9e18ac7007c91aN, 7256n)
    //5^112
    WasmI64.store(_POWERS5, 0x850fadc09923329eN, 7264n)
    WasmI64.store(_POWERS5, 0x3e2cf6bc604ddb0N, 7272n)
    //5^113
    WasmI64.store(_POWERS5, 0xa6539930bf6bff45N, 7280n)
    WasmI64.store(_POWERS5, 0x84db8346b786151cN, 7288n)
    //5^114
    WasmI64.store(_POWERS5, 0xcfe87f7cef46ff16N, 7296n)
    WasmI64.store(_POWERS5, 0xe612641865679a63N, 7304n)
    //5^115
    WasmI64.store(_POWERS5, 0x81f14fae158c5f6eN, 7312n)
    WasmI64.store(_POWERS5, 0x4fcb7e8f3f60c07eN, 7320n)
    //5^116
    WasmI64.store(_POWERS5, 0xa26da3999aef7749N, 7328n)
    WasmI64.store(_POWERS5, 0xe3be5e330f38f09dN, 7336n)
    //5^117
    WasmI64.store(_POWERS5, 0xcb090c8001ab551cN, 7344n)
    WasmI64.store(_POWERS5, 0x5cadf5bfd3072cc5N, 7352n)
    //5^118
    WasmI64.store(_POWERS5, 0xfdcb4fa002162a63N, 7360n)
    WasmI64.store(_POWERS5, 0x73d9732fc7c8f7f6N, 7368n)
    //5^119
    WasmI64.store(_POWERS5, 0x9e9f11c4014dda7eN, 7376n)
    WasmI64.store(_POWERS5, 0x2867e7fddcdd9afaN, 7384n)
    //5^120
    WasmI64.store(_POWERS5, 0xc646d63501a1511dN, 7392n)
    WasmI64.store(_POWERS5, 0xb281e1fd541501b8N, 7400n)
    //5^121
    WasmI64.store(_POWERS5, 0xf7d88bc24209a565N, 7408n)
    WasmI64.store(_POWERS5, 0x1f225a7ca91a4226N, 7416n)
    //5^122
    WasmI64.store(_POWERS5, 0x9ae757596946075fN, 7424n)
    WasmI64.store(_POWERS5, 0x3375788de9b06958N, 7432n)
    //5^123
    WasmI64.store(_POWERS5, 0xc1a12d2fc3978937N, 7440n)
    WasmI64.store(_POWERS5, 0x52d6b1641c83aeN, 7448n)
    //5^124
    WasmI64.store(_POWERS5, 0xf209787bb47d6b84N, 7456n)
    WasmI64.store(_POWERS5, 0xc0678c5dbd23a49aN, 7464n)
    //5^125
    WasmI64.store(_POWERS5, 0x9745eb4d50ce6332N, 7472n)
    WasmI64.store(_POWERS5, 0xf840b7ba963646e0N, 7480n)
    //5^126
    WasmI64.store(_POWERS5, 0xbd176620a501fbffN, 7488n)
    WasmI64.store(_POWERS5, 0xb650e5a93bc3d898N, 7496n)
    //5^127
    WasmI64.store(_POWERS5, 0xec5d3fa8ce427affN, 7504n)
    WasmI64.store(_POWERS5, 0xa3e51f138ab4cebeN, 7512n)
    //5^128
    WasmI64.store(_POWERS5, 0x93ba47c980e98cdfN, 7520n)
    WasmI64.store(_POWERS5, 0xc66f336c36b10137N, 7528n)
    //5^129
    WasmI64.store(_POWERS5, 0xb8a8d9bbe123f017N, 7536n)
    WasmI64.store(_POWERS5, 0xb80b0047445d4184N, 7544n)
    //5^130
    WasmI64.store(_POWERS5, 0xe6d3102ad96cec1dN, 7552n)
    WasmI64.store(_POWERS5, 0xa60dc059157491e5N, 7560n)
    //5^131
    WasmI64.store(_POWERS5, 0x9043ea1ac7e41392N, 7568n)
    WasmI64.store(_POWERS5, 0x87c89837ad68db2fN, 7576n)
    //5^132
    WasmI64.store(_POWERS5, 0xb454e4a179dd1877N, 7584n)
    WasmI64.store(_POWERS5, 0x29babe4598c311fbN, 7592n)
    //5^133
    WasmI64.store(_POWERS5, 0xe16a1dc9d8545e94N, 7600n)
    WasmI64.store(_POWERS5, 0xf4296dd6fef3d67aN, 7608n)
    //5^134
    WasmI64.store(_POWERS5, 0x8ce2529e2734bb1dN, 7616n)
    WasmI64.store(_POWERS5, 0x1899e4a65f58660cN, 7624n)
    //5^135
    WasmI64.store(_POWERS5, 0xb01ae745b101e9e4N, 7632n)
    WasmI64.store(_POWERS5, 0x5ec05dcff72e7f8fN, 7640n)
    //5^136
    WasmI64.store(_POWERS5, 0xdc21a1171d42645dN, 7648n)
    WasmI64.store(_POWERS5, 0x76707543f4fa1f73N, 7656n)
    //5^137
    WasmI64.store(_POWERS5, 0x899504ae72497ebaN, 7664n)
    WasmI64.store(_POWERS5, 0x6a06494a791c53a8N, 7672n)
    //5^138
    WasmI64.store(_POWERS5, 0xabfa45da0edbde69N, 7680n)
    WasmI64.store(_POWERS5, 0x487db9d17636892N, 7688n)
    //5^139
    WasmI64.store(_POWERS5, 0xd6f8d7509292d603N, 7696n)
    WasmI64.store(_POWERS5, 0x45a9d2845d3c42b6N, 7704n)
    //5^140
    WasmI64.store(_POWERS5, 0x865b86925b9bc5c2N, 7712n)
    WasmI64.store(_POWERS5, 0xb8a2392ba45a9b2N, 7720n)
    //5^141
    WasmI64.store(_POWERS5, 0xa7f26836f282b732N, 7728n)
    WasmI64.store(_POWERS5, 0x8e6cac7768d7141eN, 7736n)
    //5^142
    WasmI64.store(_POWERS5, 0xd1ef0244af2364ffN, 7744n)
    WasmI64.store(_POWERS5, 0x3207d795430cd926N, 7752n)
    //5^143
    WasmI64.store(_POWERS5, 0x8335616aed761f1fN, 7760n)
    WasmI64.store(_POWERS5, 0x7f44e6bd49e807b8N, 7768n)
    //5^144
    WasmI64.store(_POWERS5, 0xa402b9c5a8d3a6e7N, 7776n)
    WasmI64.store(_POWERS5, 0x5f16206c9c6209a6N, 7784n)
    //5^145
    WasmI64.store(_POWERS5, 0xcd036837130890a1N, 7792n)
    WasmI64.store(_POWERS5, 0x36dba887c37a8c0fN, 7800n)
    //5^146
    WasmI64.store(_POWERS5, 0x802221226be55a64N, 7808n)
    WasmI64.store(_POWERS5, 0xc2494954da2c9789N, 7816n)
    //5^147
    WasmI64.store(_POWERS5, 0xa02aa96b06deb0fdN, 7824n)
    WasmI64.store(_POWERS5, 0xf2db9baa10b7bd6cN, 7832n)
    //5^148
    WasmI64.store(_POWERS5, 0xc83553c5c8965d3dN, 7840n)
    WasmI64.store(_POWERS5, 0x6f92829494e5acc7N, 7848n)
    //5^149
    WasmI64.store(_POWERS5, 0xfa42a8b73abbf48cN, 7856n)
    WasmI64.store(_POWERS5, 0xcb772339ba1f17f9N, 7864n)
    //5^150
    WasmI64.store(_POWERS5, 0x9c69a97284b578d7N, 7872n)
    WasmI64.store(_POWERS5, 0xff2a760414536efbN, 7880n)
    //5^151
    WasmI64.store(_POWERS5, 0xc38413cf25e2d70dN, 7888n)
    WasmI64.store(_POWERS5, 0xfef5138519684abaN, 7896n)
    //5^152
    WasmI64.store(_POWERS5, 0xf46518c2ef5b8cd1N, 7904n)
    WasmI64.store(_POWERS5, 0x7eb258665fc25d69N, 7912n)
    //5^153
    WasmI64.store(_POWERS5, 0x98bf2f79d5993802N, 7920n)
    WasmI64.store(_POWERS5, 0xef2f773ffbd97a61N, 7928n)
    //5^154
    WasmI64.store(_POWERS5, 0xbeeefb584aff8603N, 7936n)
    WasmI64.store(_POWERS5, 0xaafb550ffacfd8faN, 7944n)
    //5^155
    WasmI64.store(_POWERS5, 0xeeaaba2e5dbf6784N, 7952n)
    WasmI64.store(_POWERS5, 0x95ba2a53f983cf38N, 7960n)
    //5^156
    WasmI64.store(_POWERS5, 0x952ab45cfa97a0b2N, 7968n)
    WasmI64.store(_POWERS5, 0xdd945a747bf26183N, 7976n)
    //5^157
    WasmI64.store(_POWERS5, 0xba756174393d88dfN, 7984n)
    WasmI64.store(_POWERS5, 0x94f971119aeef9e4N, 7992n)
    //5^158
    WasmI64.store(_POWERS5, 0xe912b9d1478ceb17N, 8000n)
    WasmI64.store(_POWERS5, 0x7a37cd5601aab85dN, 8008n)
    //5^159
    WasmI64.store(_POWERS5, 0x91abb422ccb812eeN, 8016n)
    WasmI64.store(_POWERS5, 0xac62e055c10ab33aN, 8024n)
    //5^160
    WasmI64.store(_POWERS5, 0xb616a12b7fe617aaN, 8032n)
    WasmI64.store(_POWERS5, 0x577b986b314d6009N, 8040n)
    //5^161
    WasmI64.store(_POWERS5, 0xe39c49765fdf9d94N, 8048n)
    WasmI64.store(_POWERS5, 0xed5a7e85fda0b80bN, 8056n)
    //5^162
    WasmI64.store(_POWERS5, 0x8e41ade9fbebc27dN, 8064n)
    WasmI64.store(_POWERS5, 0x14588f13be847307N, 8072n)
    //5^163
    WasmI64.store(_POWERS5, 0xb1d219647ae6b31cN, 8080n)
    WasmI64.store(_POWERS5, 0x596eb2d8ae258fc8N, 8088n)
    //5^164
    WasmI64.store(_POWERS5, 0xde469fbd99a05fe3N, 8096n)
    WasmI64.store(_POWERS5, 0x6fca5f8ed9aef3bbN, 8104n)
    //5^165
    WasmI64.store(_POWERS5, 0x8aec23d680043beeN, 8112n)
    WasmI64.store(_POWERS5, 0x25de7bb9480d5854N, 8120n)
    //5^166
    WasmI64.store(_POWERS5, 0xada72ccc20054ae9N, 8128n)
    WasmI64.store(_POWERS5, 0xaf561aa79a10ae6aN, 8136n)
    //5^167
    WasmI64.store(_POWERS5, 0xd910f7ff28069da4N, 8144n)
    WasmI64.store(_POWERS5, 0x1b2ba1518094da04N, 8152n)
    //5^168
    WasmI64.store(_POWERS5, 0x87aa9aff79042286N, 8160n)
    WasmI64.store(_POWERS5, 0x90fb44d2f05d0842N, 8168n)
    //5^169
    WasmI64.store(_POWERS5, 0xa99541bf57452b28N, 8176n)
    WasmI64.store(_POWERS5, 0x353a1607ac744a53N, 8184n)
    //5^170
    WasmI64.store(_POWERS5, 0xd3fa922f2d1675f2N, 8192n)
    WasmI64.store(_POWERS5, 0x42889b8997915ce8N, 8200n)
    //5^171
    WasmI64.store(_POWERS5, 0x847c9b5d7c2e09b7N, 8208n)
    WasmI64.store(_POWERS5, 0x69956135febada11N, 8216n)
    //5^172
    WasmI64.store(_POWERS5, 0xa59bc234db398c25N, 8224n)
    WasmI64.store(_POWERS5, 0x43fab9837e699095N, 8232n)
    //5^173
    WasmI64.store(_POWERS5, 0xcf02b2c21207ef2eN, 8240n)
    WasmI64.store(_POWERS5, 0x94f967e45e03f4bbN, 8248n)
    //5^174
    WasmI64.store(_POWERS5, 0x8161afb94b44f57dN, 8256n)
    WasmI64.store(_POWERS5, 0x1d1be0eebac278f5N, 8264n)
    //5^175
    WasmI64.store(_POWERS5, 0xa1ba1ba79e1632dcN, 8272n)
    WasmI64.store(_POWERS5, 0x6462d92a69731732N, 8280n)
    //5^176
    WasmI64.store(_POWERS5, 0xca28a291859bbf93N, 8288n)
    WasmI64.store(_POWERS5, 0x7d7b8f7503cfdcfeN, 8296n)
    //5^177
    WasmI64.store(_POWERS5, 0xfcb2cb35e702af78N, 8304n)
    WasmI64.store(_POWERS5, 0x5cda735244c3d43eN, 8312n)
    //5^178
    WasmI64.store(_POWERS5, 0x9defbf01b061adabN, 8320n)
    WasmI64.store(_POWERS5, 0x3a0888136afa64a7N, 8328n)
    //5^179
    WasmI64.store(_POWERS5, 0xc56baec21c7a1916N, 8336n)
    WasmI64.store(_POWERS5, 0x88aaa1845b8fdd0N, 8344n)
    //5^180
    WasmI64.store(_POWERS5, 0xf6c69a72a3989f5bN, 8352n)
    WasmI64.store(_POWERS5, 0x8aad549e57273d45N, 8360n)
    //5^181
    WasmI64.store(_POWERS5, 0x9a3c2087a63f6399N, 8368n)
    WasmI64.store(_POWERS5, 0x36ac54e2f678864bN, 8376n)
    //5^182
    WasmI64.store(_POWERS5, 0xc0cb28a98fcf3c7fN, 8384n)
    WasmI64.store(_POWERS5, 0x84576a1bb416a7ddN, 8392n)
    //5^183
    WasmI64.store(_POWERS5, 0xf0fdf2d3f3c30b9fN, 8400n)
    WasmI64.store(_POWERS5, 0x656d44a2a11c51d5N, 8408n)
    //5^184
    WasmI64.store(_POWERS5, 0x969eb7c47859e743N, 8416n)
    WasmI64.store(_POWERS5, 0x9f644ae5a4b1b325N, 8424n)
    //5^185
    WasmI64.store(_POWERS5, 0xbc4665b596706114N, 8432n)
    WasmI64.store(_POWERS5, 0x873d5d9f0dde1feeN, 8440n)
    //5^186
    WasmI64.store(_POWERS5, 0xeb57ff22fc0c7959N, 8448n)
    WasmI64.store(_POWERS5, 0xa90cb506d155a7eaN, 8456n)
    //5^187
    WasmI64.store(_POWERS5, 0x9316ff75dd87cbd8N, 8464n)
    WasmI64.store(_POWERS5, 0x9a7f12442d588f2N, 8472n)
    //5^188
    WasmI64.store(_POWERS5, 0xb7dcbf5354e9beceN, 8480n)
    WasmI64.store(_POWERS5, 0xc11ed6d538aeb2fN, 8488n)
    //5^189
    WasmI64.store(_POWERS5, 0xe5d3ef282a242e81N, 8496n)
    WasmI64.store(_POWERS5, 0x8f1668c8a86da5faN, 8504n)
    //5^190
    WasmI64.store(_POWERS5, 0x8fa475791a569d10N, 8512n)
    WasmI64.store(_POWERS5, 0xf96e017d694487bcN, 8520n)
    //5^191
    WasmI64.store(_POWERS5, 0xb38d92d760ec4455N, 8528n)
    WasmI64.store(_POWERS5, 0x37c981dcc395a9acN, 8536n)
    //5^192
    WasmI64.store(_POWERS5, 0xe070f78d3927556aN, 8544n)
    WasmI64.store(_POWERS5, 0x85bbe253f47b1417N, 8552n)
    //5^193
    WasmI64.store(_POWERS5, 0x8c469ab843b89562N, 8560n)
    WasmI64.store(_POWERS5, 0x93956d7478ccec8eN, 8568n)
    //5^194
    WasmI64.store(_POWERS5, 0xaf58416654a6babbN, 8576n)
    WasmI64.store(_POWERS5, 0x387ac8d1970027b2N, 8584n)
    //5^195
    WasmI64.store(_POWERS5, 0xdb2e51bfe9d0696aN, 8592n)
    WasmI64.store(_POWERS5, 0x6997b05fcc0319eN, 8600n)
    //5^196
    WasmI64.store(_POWERS5, 0x88fcf317f22241e2N, 8608n)
    WasmI64.store(_POWERS5, 0x441fece3bdf81f03N, 8616n)
    //5^197
    WasmI64.store(_POWERS5, 0xab3c2fddeeaad25aN, 8624n)
    WasmI64.store(_POWERS5, 0xd527e81cad7626c3N, 8632n)
    //5^198
    WasmI64.store(_POWERS5, 0xd60b3bd56a5586f1N, 8640n)
    WasmI64.store(_POWERS5, 0x8a71e223d8d3b074N, 8648n)
    //5^199
    WasmI64.store(_POWERS5, 0x85c7056562757456N, 8656n)
    WasmI64.store(_POWERS5, 0xf6872d5667844e49N, 8664n)
    //5^200
    WasmI64.store(_POWERS5, 0xa738c6bebb12d16cN, 8672n)
    WasmI64.store(_POWERS5, 0xb428f8ac016561dbN, 8680n)
    //5^201
    WasmI64.store(_POWERS5, 0xd106f86e69d785c7N, 8688n)
    WasmI64.store(_POWERS5, 0xe13336d701beba52N, 8696n)
    //5^202
    WasmI64.store(_POWERS5, 0x82a45b450226b39cN, 8704n)
    WasmI64.store(_POWERS5, 0xecc0024661173473N, 8712n)
    //5^203
    WasmI64.store(_POWERS5, 0xa34d721642b06084N, 8720n)
    WasmI64.store(_POWERS5, 0x27f002d7f95d0190N, 8728n)
    //5^204
    WasmI64.store(_POWERS5, 0xcc20ce9bd35c78a5N, 8736n)
    WasmI64.store(_POWERS5, 0x31ec038df7b441f4N, 8744n)
    //5^205
    WasmI64.store(_POWERS5, 0xff290242c83396ceN, 8752n)
    WasmI64.store(_POWERS5, 0x7e67047175a15271N, 8760n)
    //5^206
    WasmI64.store(_POWERS5, 0x9f79a169bd203e41N, 8768n)
    WasmI64.store(_POWERS5, 0xf0062c6e984d386N, 8776n)
    //5^207
    WasmI64.store(_POWERS5, 0xc75809c42c684dd1N, 8784n)
    WasmI64.store(_POWERS5, 0x52c07b78a3e60868N, 8792n)
    //5^208
    WasmI64.store(_POWERS5, 0xf92e0c3537826145N, 8800n)
    WasmI64.store(_POWERS5, 0xa7709a56ccdf8a82N, 8808n)
    //5^209
    WasmI64.store(_POWERS5, 0x9bbcc7a142b17ccbN, 8816n)
    WasmI64.store(_POWERS5, 0x88a66076400bb691N, 8824n)
    //5^210
    WasmI64.store(_POWERS5, 0xc2abf989935ddbfeN, 8832n)
    WasmI64.store(_POWERS5, 0x6acff893d00ea435N, 8840n)
    //5^211
    WasmI64.store(_POWERS5, 0xf356f7ebf83552feN, 8848n)
    WasmI64.store(_POWERS5, 0x583f6b8c4124d43N, 8856n)
    //5^212
    WasmI64.store(_POWERS5, 0x98165af37b2153deN, 8864n)
    WasmI64.store(_POWERS5, 0xc3727a337a8b704aN, 8872n)
    //5^213
    WasmI64.store(_POWERS5, 0xbe1bf1b059e9a8d6N, 8880n)
    WasmI64.store(_POWERS5, 0x744f18c0592e4c5cN, 8888n)
    //5^214
    WasmI64.store(_POWERS5, 0xeda2ee1c7064130cN, 8896n)
    WasmI64.store(_POWERS5, 0x1162def06f79df73N, 8904n)
    //5^215
    WasmI64.store(_POWERS5, 0x9485d4d1c63e8be7N, 8912n)
    WasmI64.store(_POWERS5, 0x8addcb5645ac2ba8N, 8920n)
    //5^216
    WasmI64.store(_POWERS5, 0xb9a74a0637ce2ee1N, 8928n)
    WasmI64.store(_POWERS5, 0x6d953e2bd7173692N, 8936n)
    //5^217
    WasmI64.store(_POWERS5, 0xe8111c87c5c1ba99N, 8944n)
    WasmI64.store(_POWERS5, 0xc8fa8db6ccdd0437N, 8952n)
    //5^218
    WasmI64.store(_POWERS5, 0x910ab1d4db9914a0N, 8960n)
    WasmI64.store(_POWERS5, 0x1d9c9892400a22a2N, 8968n)
    //5^219
    WasmI64.store(_POWERS5, 0xb54d5e4a127f59c8N, 8976n)
    WasmI64.store(_POWERS5, 0x2503beb6d00cab4bN, 8984n)
    //5^220
    WasmI64.store(_POWERS5, 0xe2a0b5dc971f303aN, 8992n)
    WasmI64.store(_POWERS5, 0x2e44ae64840fd61dN, 9000n)
    //5^221
    WasmI64.store(_POWERS5, 0x8da471a9de737e24N, 9008n)
    WasmI64.store(_POWERS5, 0x5ceaecfed289e5d2N, 9016n)
    //5^222
    WasmI64.store(_POWERS5, 0xb10d8e1456105dadN, 9024n)
    WasmI64.store(_POWERS5, 0x7425a83e872c5f47N, 9032n)
    //5^223
    WasmI64.store(_POWERS5, 0xdd50f1996b947518N, 9040n)
    WasmI64.store(_POWERS5, 0xd12f124e28f77719N, 9048n)
    //5^224
    WasmI64.store(_POWERS5, 0x8a5296ffe33cc92fN, 9056n)
    WasmI64.store(_POWERS5, 0x82bd6b70d99aaa6fN, 9064n)
    //5^225
    WasmI64.store(_POWERS5, 0xace73cbfdc0bfb7bN, 9072n)
    WasmI64.store(_POWERS5, 0x636cc64d1001550bN, 9080n)
    //5^226
    WasmI64.store(_POWERS5, 0xd8210befd30efa5aN, 9088n)
    WasmI64.store(_POWERS5, 0x3c47f7e05401aa4eN, 9096n)
    //5^227
    WasmI64.store(_POWERS5, 0x8714a775e3e95c78N, 9104n)
    WasmI64.store(_POWERS5, 0x65acfaec34810a71N, 9112n)
    //5^228
    WasmI64.store(_POWERS5, 0xa8d9d1535ce3b396N, 9120n)
    WasmI64.store(_POWERS5, 0x7f1839a741a14d0dN, 9128n)
    //5^229
    WasmI64.store(_POWERS5, 0xd31045a8341ca07cN, 9136n)
    WasmI64.store(_POWERS5, 0x1ede48111209a050N, 9144n)
    //5^230
    WasmI64.store(_POWERS5, 0x83ea2b892091e44dN, 9152n)
    WasmI64.store(_POWERS5, 0x934aed0aab460432N, 9160n)
    //5^231
    WasmI64.store(_POWERS5, 0xa4e4b66b68b65d60N, 9168n)
    WasmI64.store(_POWERS5, 0xf81da84d5617853fN, 9176n)
    //5^232
    WasmI64.store(_POWERS5, 0xce1de40642e3f4b9N, 9184n)
    WasmI64.store(_POWERS5, 0x36251260ab9d668eN, 9192n)
    //5^233
    WasmI64.store(_POWERS5, 0x80d2ae83e9ce78f3N, 9200n)
    WasmI64.store(_POWERS5, 0xc1d72b7c6b426019N, 9208n)
    //5^234
    WasmI64.store(_POWERS5, 0xa1075a24e4421730N, 9216n)
    WasmI64.store(_POWERS5, 0xb24cf65b8612f81fN, 9224n)
    //5^235
    WasmI64.store(_POWERS5, 0xc94930ae1d529cfcN, 9232n)
    WasmI64.store(_POWERS5, 0xdee033f26797b627N, 9240n)
    //5^236
    WasmI64.store(_POWERS5, 0xfb9b7cd9a4a7443cN, 9248n)
    WasmI64.store(_POWERS5, 0x169840ef017da3b1N, 9256n)
    //5^237
    WasmI64.store(_POWERS5, 0x9d412e0806e88aa5N, 9264n)
    WasmI64.store(_POWERS5, 0x8e1f289560ee864eN, 9272n)
    //5^238
    WasmI64.store(_POWERS5, 0xc491798a08a2ad4eN, 9280n)
    WasmI64.store(_POWERS5, 0xf1a6f2bab92a27e2N, 9288n)
    //5^239
    WasmI64.store(_POWERS5, 0xf5b5d7ec8acb58a2N, 9296n)
    WasmI64.store(_POWERS5, 0xae10af696774b1dbN, 9304n)
    //5^240
    WasmI64.store(_POWERS5, 0x9991a6f3d6bf1765N, 9312n)
    WasmI64.store(_POWERS5, 0xacca6da1e0a8ef29N, 9320n)
    //5^241
    WasmI64.store(_POWERS5, 0xbff610b0cc6edd3fN, 9328n)
    WasmI64.store(_POWERS5, 0x17fd090a58d32af3N, 9336n)
    //5^242
    WasmI64.store(_POWERS5, 0xeff394dcff8a948eN, 9344n)
    WasmI64.store(_POWERS5, 0xddfc4b4cef07f5b0N, 9352n)
    //5^243
    WasmI64.store(_POWERS5, 0x95f83d0a1fb69cd9N, 9360n)
    WasmI64.store(_POWERS5, 0x4abdaf101564f98eN, 9368n)
    //5^244
    WasmI64.store(_POWERS5, 0xbb764c4ca7a4440fN, 9376n)
    WasmI64.store(_POWERS5, 0x9d6d1ad41abe37f1N, 9384n)
    //5^245
    WasmI64.store(_POWERS5, 0xea53df5fd18d5513N, 9392n)
    WasmI64.store(_POWERS5, 0x84c86189216dc5edN, 9400n)
    //5^246
    WasmI64.store(_POWERS5, 0x92746b9be2f8552cN, 9408n)
    WasmI64.store(_POWERS5, 0x32fd3cf5b4e49bb4N, 9416n)
    //5^247
    WasmI64.store(_POWERS5, 0xb7118682dbb66a77N, 9424n)
    WasmI64.store(_POWERS5, 0x3fbc8c33221dc2a1N, 9432n)
    //5^248
    WasmI64.store(_POWERS5, 0xe4d5e82392a40515N, 9440n)
    WasmI64.store(_POWERS5, 0xfabaf3feaa5334aN, 9448n)
    //5^249
    WasmI64.store(_POWERS5, 0x8f05b1163ba6832dN, 9456n)
    WasmI64.store(_POWERS5, 0x29cb4d87f2a7400eN, 9464n)
    //5^250
    WasmI64.store(_POWERS5, 0xb2c71d5bca9023f8N, 9472n)
    WasmI64.store(_POWERS5, 0x743e20e9ef511012N, 9480n)
    //5^251
    WasmI64.store(_POWERS5, 0xdf78e4b2bd342cf6N, 9488n)
    WasmI64.store(_POWERS5, 0x914da9246b255416N, 9496n)
    //5^252
    WasmI64.store(_POWERS5, 0x8bab8eefb6409c1aN, 9504n)
    WasmI64.store(_POWERS5, 0x1ad089b6c2f7548eN, 9512n)
    //5^253
    WasmI64.store(_POWERS5, 0xae9672aba3d0c320N, 9520n)
    WasmI64.store(_POWERS5, 0xa184ac2473b529b1N, 9528n)
    //5^254
    WasmI64.store(_POWERS5, 0xda3c0f568cc4f3e8N, 9536n)
    WasmI64.store(_POWERS5, 0xc9e5d72d90a2741eN, 9544n)
    //5^255
    WasmI64.store(_POWERS5, 0x8865899617fb1871N, 9552n)
    WasmI64.store(_POWERS5, 0x7e2fa67c7a658892N, 9560n)
    //5^256
    WasmI64.store(_POWERS5, 0xaa7eebfb9df9de8dN, 9568n)
    WasmI64.store(_POWERS5, 0xddbb901b98feeab7N, 9576n)
    //5^257
    WasmI64.store(_POWERS5, 0xd51ea6fa85785631N, 9584n)
    WasmI64.store(_POWERS5, 0x552a74227f3ea565N, 9592n)
    //5^258
    WasmI64.store(_POWERS5, 0x8533285c936b35deN, 9600n)
    WasmI64.store(_POWERS5, 0xd53a88958f87275fN, 9608n)
    //5^259
    WasmI64.store(_POWERS5, 0xa67ff273b8460356N, 9616n)
    WasmI64.store(_POWERS5, 0x8a892abaf368f137N, 9624n)
    //5^260
    WasmI64.store(_POWERS5, 0xd01fef10a657842cN, 9632n)
    WasmI64.store(_POWERS5, 0x2d2b7569b0432d85N, 9640n)
    //5^261
    WasmI64.store(_POWERS5, 0x8213f56a67f6b29bN, 9648n)
    WasmI64.store(_POWERS5, 0x9c3b29620e29fc73N, 9656n)
    //5^262
    WasmI64.store(_POWERS5, 0xa298f2c501f45f42N, 9664n)
    WasmI64.store(_POWERS5, 0x8349f3ba91b47b8fN, 9672n)
    //5^263
    WasmI64.store(_POWERS5, 0xcb3f2f7642717713N, 9680n)
    WasmI64.store(_POWERS5, 0x241c70a936219a73N, 9688n)
    //5^264
    WasmI64.store(_POWERS5, 0xfe0efb53d30dd4d7N, 9696n)
    WasmI64.store(_POWERS5, 0xed238cd383aa0110N, 9704n)
    //5^265
    WasmI64.store(_POWERS5, 0x9ec95d1463e8a506N, 9712n)
    WasmI64.store(_POWERS5, 0xf4363804324a40aaN, 9720n)
    //5^266
    WasmI64.store(_POWERS5, 0xc67bb4597ce2ce48N, 9728n)
    WasmI64.store(_POWERS5, 0xb143c6053edcd0d5N, 9736n)
    //5^267
    WasmI64.store(_POWERS5, 0xf81aa16fdc1b81daN, 9744n)
    WasmI64.store(_POWERS5, 0xdd94b7868e94050aN, 9752n)
    //5^268
    WasmI64.store(_POWERS5, 0x9b10a4e5e9913128N, 9760n)
    WasmI64.store(_POWERS5, 0xca7cf2b4191c8326N, 9768n)
    //5^269
    WasmI64.store(_POWERS5, 0xc1d4ce1f63f57d72N, 9776n)
    WasmI64.store(_POWERS5, 0xfd1c2f611f63a3f0N, 9784n)
    //5^270
    WasmI64.store(_POWERS5, 0xf24a01a73cf2dccfN, 9792n)
    WasmI64.store(_POWERS5, 0xbc633b39673c8cecN, 9800n)
    //5^271
    WasmI64.store(_POWERS5, 0x976e41088617ca01N, 9808n)
    WasmI64.store(_POWERS5, 0xd5be0503e085d813N, 9816n)
    //5^272
    WasmI64.store(_POWERS5, 0xbd49d14aa79dbc82N, 9824n)
    WasmI64.store(_POWERS5, 0x4b2d8644d8a74e18N, 9832n)
    //5^273
    WasmI64.store(_POWERS5, 0xec9c459d51852ba2N, 9840n)
    WasmI64.store(_POWERS5, 0xddf8e7d60ed1219eN, 9848n)
    //5^274
    WasmI64.store(_POWERS5, 0x93e1ab8252f33b45N, 9856n)
    WasmI64.store(_POWERS5, 0xcabb90e5c942b503N, 9864n)
    //5^275
    WasmI64.store(_POWERS5, 0xb8da1662e7b00a17N, 9872n)
    WasmI64.store(_POWERS5, 0x3d6a751f3b936243N, 9880n)
    //5^276
    WasmI64.store(_POWERS5, 0xe7109bfba19c0c9dN, 9888n)
    WasmI64.store(_POWERS5, 0xcc512670a783ad4N, 9896n)
    //5^277
    WasmI64.store(_POWERS5, 0x906a617d450187e2N, 9904n)
    WasmI64.store(_POWERS5, 0x27fb2b80668b24c5N, 9912n)
    //5^278
    WasmI64.store(_POWERS5, 0xb484f9dc9641e9daN, 9920n)
    WasmI64.store(_POWERS5, 0xb1f9f660802dedf6N, 9928n)
    //5^279
    WasmI64.store(_POWERS5, 0xe1a63853bbd26451N, 9936n)
    WasmI64.store(_POWERS5, 0x5e7873f8a0396973N, 9944n)
    //5^280
    WasmI64.store(_POWERS5, 0x8d07e33455637eb2N, 9952n)
    WasmI64.store(_POWERS5, 0xdb0b487b6423e1e8N, 9960n)
    //5^281
    WasmI64.store(_POWERS5, 0xb049dc016abc5e5fN, 9968n)
    WasmI64.store(_POWERS5, 0x91ce1a9a3d2cda62N, 9976n)
    //5^282
    WasmI64.store(_POWERS5, 0xdc5c5301c56b75f7N, 9984n)
    WasmI64.store(_POWERS5, 0x7641a140cc7810fbN, 9992n)
    //5^283
    WasmI64.store(_POWERS5, 0x89b9b3e11b6329baN, 10000n)
    WasmI64.store(_POWERS5, 0xa9e904c87fcb0a9dN, 10008n)
    //5^284
    WasmI64.store(_POWERS5, 0xac2820d9623bf429N, 10016n)
    WasmI64.store(_POWERS5, 0x546345fa9fbdcd44N, 10024n)
    //5^285
    WasmI64.store(_POWERS5, 0xd732290fbacaf133N, 10032n)
    WasmI64.store(_POWERS5, 0xa97c177947ad4095N, 10040n)
    //5^286
    WasmI64.store(_POWERS5, 0x867f59a9d4bed6c0N, 10048n)
    WasmI64.store(_POWERS5, 0x49ed8eabcccc485dN, 10056n)
    //5^287
    WasmI64.store(_POWERS5, 0xa81f301449ee8c70N, 10064n)
    WasmI64.store(_POWERS5, 0x5c68f256bfff5a74N, 10072n)
    //5^288
    WasmI64.store(_POWERS5, 0xd226fc195c6a2f8cN, 10080n)
    WasmI64.store(_POWERS5, 0x73832eec6fff3111N, 10088n)
    //5^289
    WasmI64.store(_POWERS5, 0x83585d8fd9c25db7N, 10096n)
    WasmI64.store(_POWERS5, 0xc831fd53c5ff7eabN, 10104n)
    //5^290
    WasmI64.store(_POWERS5, 0xa42e74f3d032f525N, 10112n)
    WasmI64.store(_POWERS5, 0xba3e7ca8b77f5e55N, 10120n)
    //5^291
    WasmI64.store(_POWERS5, 0xcd3a1230c43fb26fN, 10128n)
    WasmI64.store(_POWERS5, 0x28ce1bd2e55f35ebN, 10136n)
    //5^292
    WasmI64.store(_POWERS5, 0x80444b5e7aa7cf85N, 10144n)
    WasmI64.store(_POWERS5, 0x7980d163cf5b81b3N, 10152n)
    //5^293
    WasmI64.store(_POWERS5, 0xa0555e361951c366N, 10160n)
    WasmI64.store(_POWERS5, 0xd7e105bcc332621fN, 10168n)
    //5^294
    WasmI64.store(_POWERS5, 0xc86ab5c39fa63440N, 10176n)
    WasmI64.store(_POWERS5, 0x8dd9472bf3fefaa7N, 10184n)
    //5^295
    WasmI64.store(_POWERS5, 0xfa856334878fc150N, 10192n)
    WasmI64.store(_POWERS5, 0xb14f98f6f0feb951N, 10200n)
    //5^296
    WasmI64.store(_POWERS5, 0x9c935e00d4b9d8d2N, 10208n)
    WasmI64.store(_POWERS5, 0x6ed1bf9a569f33d3N, 10216n)
    //5^297
    WasmI64.store(_POWERS5, 0xc3b8358109e84f07N, 10224n)
    WasmI64.store(_POWERS5, 0xa862f80ec4700c8N, 10232n)
    //5^298
    WasmI64.store(_POWERS5, 0xf4a642e14c6262c8N, 10240n)
    WasmI64.store(_POWERS5, 0xcd27bb612758c0faN, 10248n)
    //5^299
    WasmI64.store(_POWERS5, 0x98e7e9cccfbd7dbdN, 10256n)
    WasmI64.store(_POWERS5, 0x8038d51cb897789cN, 10264n)
    //5^300
    WasmI64.store(_POWERS5, 0xbf21e44003acdd2cN, 10272n)
    WasmI64.store(_POWERS5, 0xe0470a63e6bd56c3N, 10280n)
    //5^301
    WasmI64.store(_POWERS5, 0xeeea5d5004981478N, 10288n)
    WasmI64.store(_POWERS5, 0x1858ccfce06cac74N, 10296n)
    //5^302
    WasmI64.store(_POWERS5, 0x95527a5202df0ccbN, 10304n)
    WasmI64.store(_POWERS5, 0xf37801e0c43ebc8N, 10312n)
    //5^303
    WasmI64.store(_POWERS5, 0xbaa718e68396cffdN, 10320n)
    WasmI64.store(_POWERS5, 0xd30560258f54e6baN, 10328n)
    //5^304
    WasmI64.store(_POWERS5, 0xe950df20247c83fdN, 10336n)
    WasmI64.store(_POWERS5, 0x47c6b82ef32a2069N, 10344n)
    //5^305
    WasmI64.store(_POWERS5, 0x91d28b7416cdd27eN, 10352n)
    WasmI64.store(_POWERS5, 0x4cdc331d57fa5441N, 10360n)
    //5^306
    WasmI64.store(_POWERS5, 0xb6472e511c81471dN, 10368n)
    WasmI64.store(_POWERS5, 0xe0133fe4adf8e952N, 10376n)
    //5^307
    WasmI64.store(_POWERS5, 0xe3d8f9e563a198e5N, 10384n)
    WasmI64.store(_POWERS5, 0x58180fddd97723a6N, 10392n)
    //5^308
    WasmI64.store(_POWERS5, 0x8e679c2f5e44ff8fN, 10400n)
    WasmI64.store(_POWERS5, 0x570f09eaa7ea7648N, 10408n)
  }
  _POWERS5
}

/*
  Lookup table for pairwise char codes in range [0-99]
  "00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
  "10", "11", "12", "13", "14", "15", "16", "17", "18", "19",
  "20", "21", "22", "23", "24", "25", "26", "27", "28", "29",
  "30", "31", "32", "33", "34", "35", "36", "37", "38", "39",
  "40", "41", "42", "43", "44", "45", "46", "47", "48", "49",
  "50", "51", "52", "53", "54", "55", "56", "57", "58", "59",
  "60", "61", "62", "63", "64", "65", "66", "67", "68", "69",
  "70", "71", "72", "73", "74", "75", "76", "77", "78", "79",
  "80", "81", "82", "83", "84", "85", "86", "87", "88", "89",
  "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"
*/
@unsafe
let mut _DIGITS = -1n

@unsafe
let get_DIGITS = () => {
  if (_DIGITS == -1n) {
    _DIGITS = Memory.malloc(200n)
    WasmI32.store16(_DIGITS, 0x3030n, 0n)
    WasmI32.store16(_DIGITS, 0x3130n, 2n)
    WasmI32.store16(_DIGITS, 0x3230n, 4n)
    WasmI32.store16(_DIGITS, 0x3330n, 6n)
    WasmI32.store16(_DIGITS, 0x3430n, 8n)
    WasmI32.store16(_DIGITS, 0x3530n, 10n)
    WasmI32.store16(_DIGITS, 0x3630n, 12n)
    WasmI32.store16(_DIGITS, 0x3730n, 14n)
    WasmI32.store16(_DIGITS, 0x3830n, 16n)
    WasmI32.store16(_DIGITS, 0x3930n, 18n)
    WasmI32.store16(_DIGITS, 0x3031n, 20n)
    WasmI32.store16(_DIGITS, 0x3131n, 22n)
    WasmI32.store16(_DIGITS, 0x3231n, 24n)
    WasmI32.store16(_DIGITS, 0x3331n, 26n)
    WasmI32.store16(_DIGITS, 0x3431n, 28n)
    WasmI32.store16(_DIGITS, 0x3531n, 30n)
    WasmI32.store16(_DIGITS, 0x3631n, 32n)
    WasmI32.store16(_DIGITS, 0x3731n, 34n)
    WasmI32.store16(_DIGITS, 0x3831n, 36n)
    WasmI32.store16(_DIGITS, 0x3931n, 38n)
    WasmI32.store16(_DIGITS, 0x3032n, 40n)
    WasmI32.store16(_DIGITS, 0x3132n, 42n)
    WasmI32.store16(_DIGITS, 0x3232n, 44n)
    WasmI32.store16(_DIGITS, 0x3332n, 46n)
    WasmI32.store16(_DIGITS, 0x3432n, 48n)
    WasmI32.store16(_DIGITS, 0x3532n, 50n)
    WasmI32.store16(_DIGITS, 0x3632n, 52n)
    WasmI32.store16(_DIGITS, 0x3732n, 54n)
    WasmI32.store16(_DIGITS, 0x3832n, 56n)
    WasmI32.store16(_DIGITS, 0x3932n, 58n)
    WasmI32.store16(_DIGITS, 0x3033n, 60n)
    WasmI32.store16(_DIGITS, 0x3133n, 62n)
    WasmI32.store16(_DIGITS, 0x3233n, 64n)
    WasmI32.store16(_DIGITS, 0x3333n, 66n)
    WasmI32.store16(_DIGITS, 0x3433n, 68n)
    WasmI32.store16(_DIGITS, 0x3533n, 70n)
    WasmI32.store16(_DIGITS, 0x3633n, 72n)
    WasmI32.store16(_DIGITS, 0x3733n, 74n)
    WasmI32.store16(_DIGITS, 0x3833n, 76n)
    WasmI32.store16(_DIGITS, 0x3933n, 78n)
    WasmI32.store16(_DIGITS, 0x3034n, 80n)
    WasmI32.store16(_DIGITS, 0x3134n, 82n)
    WasmI32.store16(_DIGITS, 0x3234n, 84n)
    WasmI32.store16(_DIGITS, 0x3334n, 86n)
    WasmI32.store16(_DIGITS, 0x3434n, 88n)
    WasmI32.store16(_DIGITS, 0x3534n, 90n)
    WasmI32.store16(_DIGITS, 0x3634n, 92n)
    WasmI32.store16(_DIGITS, 0x3734n, 94n)
    WasmI32.store16(_DIGITS, 0x3834n, 96n)
    WasmI32.store16(_DIGITS, 0x3934n, 98n)
    WasmI32.store16(_DIGITS, 0x3035n, 100n)
    WasmI32.store16(_DIGITS, 0x3135n, 102n)
    WasmI32.store16(_DIGITS, 0x3235n, 104n)
    WasmI32.store16(_DIGITS, 0x3335n, 106n)
    WasmI32.store16(_DIGITS, 0x3435n, 108n)
    WasmI32.store16(_DIGITS, 0x3535n, 110n)
    WasmI32.store16(_DIGITS, 0x3635n, 112n)
    WasmI32.store16(_DIGITS, 0x3735n, 114n)
    WasmI32.store16(_DIGITS, 0x3835n, 116n)
    WasmI32.store16(_DIGITS, 0x3935n, 118n)
    WasmI32.store16(_DIGITS, 0x3036n, 120n)
    WasmI32.store16(_DIGITS, 0x3136n, 122n)
    WasmI32.store16(_DIGITS, 0x3236n, 124n)
    WasmI32.store16(_DIGITS, 0x3336n, 126n)
    WasmI32.store16(_DIGITS, 0x3436n, 128n)
    WasmI32.store16(_DIGITS, 0x3536n, 130n)
    WasmI32.store16(_DIGITS, 0x3636n, 132n)
    WasmI32.store16(_DIGITS, 0x3736n, 134n)
    WasmI32.store16(_DIGITS, 0x3836n, 136n)
    WasmI32.store16(_DIGITS, 0x3936n, 138n)
    WasmI32.store16(_DIGITS, 0x3037n, 140n)
    WasmI32.store16(_DIGITS, 0x3137n, 142n)
    WasmI32.store16(_DIGITS, 0x3237n, 144n)
    WasmI32.store16(_DIGITS, 0x3337n, 146n)
    WasmI32.store16(_DIGITS, 0x3437n, 148n)
    WasmI32.store16(_DIGITS, 0x3537n, 150n)
    WasmI32.store16(_DIGITS, 0x3637n, 152n)
    WasmI32.store16(_DIGITS, 0x3737n, 154n)
    WasmI32.store16(_DIGITS, 0x3837n, 156n)
    WasmI32.store16(_DIGITS, 0x3937n, 158n)
    WasmI32.store16(_DIGITS, 0x3038n, 160n)
    WasmI32.store16(_DIGITS, 0x3138n, 162n)
    WasmI32.store16(_DIGITS, 0x3238n, 164n)
    WasmI32.store16(_DIGITS, 0x3338n, 166n)
    WasmI32.store16(_DIGITS, 0x3438n, 168n)
    WasmI32.store16(_DIGITS, 0x3538n, 170n)
    WasmI32.store16(_DIGITS, 0x3638n, 172n)
    WasmI32.store16(_DIGITS, 0x3738n, 174n)
    WasmI32.store16(_DIGITS, 0x3838n, 176n)
    WasmI32.store16(_DIGITS, 0x3938n, 178n)
    WasmI32.store16(_DIGITS, 0x3039n, 180n)
    WasmI32.store16(_DIGITS, 0x3139n, 182n)
    WasmI32.store16(_DIGITS, 0x3239n, 184n)
    WasmI32.store16(_DIGITS, 0x3339n, 186n)
    WasmI32.store16(_DIGITS, 0x3439n, 188n)
    WasmI32.store16(_DIGITS, 0x3539n, 190n)
    WasmI32.store16(_DIGITS, 0x3639n, 192n)
    WasmI32.store16(_DIGITS, 0x3739n, 194n)
    WasmI32.store16(_DIGITS, 0x3839n, 196n)
    WasmI32.store16(_DIGITS, 0x3939n, 198n)
  }
  _DIGITS
}

// Lookup table for pairwise char codes in range [0x00-0xFF]
@unsafe
let mut _HEX_DIGITS = -1n

@unsafe
export let get_HEX_DIGITS = () => {
  if (_HEX_DIGITS == -1n) {
    _HEX_DIGITS = Memory.malloc(512n)
    WasmI32.store16(_HEX_DIGITS, 0x3030n, 0n) // 00
    WasmI32.store16(_HEX_DIGITS, 0x3130n, 2n) // 01
    WasmI32.store16(_HEX_DIGITS, 0x3230n, 4n)
    WasmI32.store16(_HEX_DIGITS, 0x3330n, 6n)
    WasmI32.store16(_HEX_DIGITS, 0x3430n, 8n)
    WasmI32.store16(_HEX_DIGITS, 0x3530n, 10n)
    WasmI32.store16(_HEX_DIGITS, 0x3630n, 12n)
    WasmI32.store16(_HEX_DIGITS, 0x3730n, 14n)
    WasmI32.store16(_HEX_DIGITS, 0x3830n, 16n)
    WasmI32.store16(_HEX_DIGITS, 0x3930n, 18n) // 09
    WasmI32.store16(_HEX_DIGITS, 0x6130n, 20n) // 0a
    WasmI32.store16(_HEX_DIGITS, 0x6230n, 22n)
    WasmI32.store16(_HEX_DIGITS, 0x6330n, 24n)
    WasmI32.store16(_HEX_DIGITS, 0x6430n, 26n)
    WasmI32.store16(_HEX_DIGITS, 0x6530n, 28n)
    WasmI32.store16(_HEX_DIGITS, 0x6630n, 30n) // 0f

    WasmI32.store16(_HEX_DIGITS, 0x3031n, 32n) // 10
    WasmI32.store16(_HEX_DIGITS, 0x3131n, 34n)
    WasmI32.store16(_HEX_DIGITS, 0x3231n, 36n)
    WasmI32.store16(_HEX_DIGITS, 0x3331n, 38n)
    WasmI32.store16(_HEX_DIGITS, 0x3431n, 40n)
    WasmI32.store16(_HEX_DIGITS, 0x3531n, 42n)
    WasmI32.store16(_HEX_DIGITS, 0x3631n, 44n)
    WasmI32.store16(_HEX_DIGITS, 0x3731n, 46n)
    WasmI32.store16(_HEX_DIGITS, 0x3831n, 48n)
    WasmI32.store16(_HEX_DIGITS, 0x3931n, 50n)
    WasmI32.store16(_HEX_DIGITS, 0x6131n, 52n)
    WasmI32.store16(_HEX_DIGITS, 0x6231n, 54n)
    WasmI32.store16(_HEX_DIGITS, 0x6331n, 56n)
    WasmI32.store16(_HEX_DIGITS, 0x6431n, 58n)
    WasmI32.store16(_HEX_DIGITS, 0x6531n, 60n)
    WasmI32.store16(_HEX_DIGITS, 0x6631n, 62n) // 1f

    WasmI32.store16(_HEX_DIGITS, 0x3032n, 64n) // 20
    WasmI32.store16(_HEX_DIGITS, 0x3132n, 66n)
    WasmI32.store16(_HEX_DIGITS, 0x3232n, 68n)
    WasmI32.store16(_HEX_DIGITS, 0x3332n, 70n)
    WasmI32.store16(_HEX_DIGITS, 0x3432n, 72n)
    WasmI32.store16(_HEX_DIGITS, 0x3532n, 74n)
    WasmI32.store16(_HEX_DIGITS, 0x3632n, 76n)
    WasmI32.store16(_HEX_DIGITS, 0x3732n, 78n)
    WasmI32.store16(_HEX_DIGITS, 0x3832n, 80n)
    WasmI32.store16(_HEX_DIGITS, 0x3932n, 82n)
    WasmI32.store16(_HEX_DIGITS, 0x6132n, 84n)
    WasmI32.store16(_HEX_DIGITS, 0x6232n, 86n)
    WasmI32.store16(_HEX_DIGITS, 0x6332n, 88n)
    WasmI32.store16(_HEX_DIGITS, 0x6432n, 90n)
    WasmI32.store16(_HEX_DIGITS, 0x6532n, 92n)
    WasmI32.store16(_HEX_DIGITS, 0x6632n, 94n) // 2f

    WasmI32.store16(_HEX_DIGITS, 0x3033n, 96n) // 30
    WasmI32.store16(_HEX_DIGITS, 0x3133n, 98n)
    WasmI32.store16(_HEX_DIGITS, 0x3233n, 100n)
    WasmI32.store16(_HEX_DIGITS, 0x3333n, 102n)
    WasmI32.store16(_HEX_DIGITS, 0x3433n, 104n)
    WasmI32.store16(_HEX_DIGITS, 0x3533n, 106n)
    WasmI32.store16(_HEX_DIGITS, 0x3633n, 108n)
    WasmI32.store16(_HEX_DIGITS, 0x3733n, 110n)
    WasmI32.store16(_HEX_DIGITS, 0x3833n, 112n)
    WasmI32.store16(_HEX_DIGITS, 0x3933n, 114n)
    WasmI32.store16(_HEX_DIGITS, 0x6133n, 116n)
    WasmI32.store16(_HEX_DIGITS, 0x6233n, 118n)
    WasmI32.store16(_HEX_DIGITS, 0x6333n, 120n)
    WasmI32.store16(_HEX_DIGITS, 0x6433n, 122n)
    WasmI32.store16(_HEX_DIGITS, 0x6533n, 124n)
    WasmI32.store16(_HEX_DIGITS, 0x6633n, 126n) // 3f

    WasmI32.store16(_HEX_DIGITS, 0x3034n, 128n) // 40
    WasmI32.store16(_HEX_DIGITS, 0x3134n, 130n)
    WasmI32.store16(_HEX_DIGITS, 0x3234n, 132n)
    WasmI32.store16(_HEX_DIGITS, 0x3334n, 134n)
    WasmI32.store16(_HEX_DIGITS, 0x3434n, 136n)
    WasmI32.store16(_HEX_DIGITS, 0x3534n, 138n)
    WasmI32.store16(_HEX_DIGITS, 0x3634n, 140n)
    WasmI32.store16(_HEX_DIGITS, 0x3734n, 142n)
    WasmI32.store16(_HEX_DIGITS, 0x3834n, 144n)
    WasmI32.store16(_HEX_DIGITS, 0x3934n, 146n)
    WasmI32.store16(_HEX_DIGITS, 0x6134n, 148n)
    WasmI32.store16(_HEX_DIGITS, 0x6234n, 150n)
    WasmI32.store16(_HEX_DIGITS, 0x6334n, 152n)
    WasmI32.store16(_HEX_DIGITS, 0x6434n, 154n)
    WasmI32.store16(_HEX_DIGITS, 0x6534n, 156n)
    WasmI32.store16(_HEX_DIGITS, 0x6634n, 158n) // 4f

    WasmI32.store16(_HEX_DIGITS, 0x3035n, 160n) // 50
    WasmI32.store16(_HEX_DIGITS, 0x3135n, 162n)
    WasmI32.store16(_HEX_DIGITS, 0x3235n, 164n)
    WasmI32.store16(_HEX_DIGITS, 0x3335n, 166n)
    WasmI32.store16(_HEX_DIGITS, 0x3435n, 168n)
    WasmI32.store16(_HEX_DIGITS, 0x3535n, 170n)
    WasmI32.store16(_HEX_DIGITS, 0x3635n, 172n)
    WasmI32.store16(_HEX_DIGITS, 0x3735n, 174n)
    WasmI32.store16(_HEX_DIGITS, 0x3835n, 176n)
    WasmI32.store16(_HEX_DIGITS, 0x3935n, 178n)
    WasmI32.store16(_HEX_DIGITS, 0x6135n, 180n)
    WasmI32.store16(_HEX_DIGITS, 0x6235n, 182n)
    WasmI32.store16(_HEX_DIGITS, 0x6335n, 184n)
    WasmI32.store16(_HEX_DIGITS, 0x6435n, 186n)
    WasmI32.store16(_HEX_DIGITS, 0x6535n, 188n)
    WasmI32.store16(_HEX_DIGITS, 0x6635n, 190n) // 5f

    WasmI32.store16(_HEX_DIGITS, 0x3036n, 192n) // 60
    WasmI32.store16(_HEX_DIGITS, 0x3136n, 194n)
    WasmI32.store16(_HEX_DIGITS, 0x3236n, 196n)
    WasmI32.store16(_HEX_DIGITS, 0x3336n, 198n)
    WasmI32.store16(_HEX_DIGITS, 0x3436n, 200n)
    WasmI32.store16(_HEX_DIGITS, 0x3536n, 202n)
    WasmI32.store16(_HEX_DIGITS, 0x3636n, 204n)
    WasmI32.store16(_HEX_DIGITS, 0x3736n, 206n)
    WasmI32.store16(_HEX_DIGITS, 0x3836n, 208n)
    WasmI32.store16(_HEX_DIGITS, 0x3936n, 210n)
    WasmI32.store16(_HEX_DIGITS, 0x6136n, 212n)
    WasmI32.store16(_HEX_DIGITS, 0x6236n, 214n)
    WasmI32.store16(_HEX_DIGITS, 0x6336n, 216n)
    WasmI32.store16(_HEX_DIGITS, 0x6436n, 218n)
    WasmI32.store16(_HEX_DIGITS, 0x6536n, 220n)
    WasmI32.store16(_HEX_DIGITS, 0x6636n, 222n) // 6f

    WasmI32.store16(_HEX_DIGITS, 0x3037n, 224n) // 70
    WasmI32.store16(_HEX_DIGITS, 0x3137n, 226n)
    WasmI32.store16(_HEX_DIGITS, 0x3237n, 228n)
    WasmI32.store16(_HEX_DIGITS, 0x3337n, 230n)
    WasmI32.store16(_HEX_DIGITS, 0x3437n, 232n)
    WasmI32.store16(_HEX_DIGITS, 0x3537n, 234n)
    WasmI32.store16(_HEX_DIGITS, 0x3637n, 236n)
    WasmI32.store16(_HEX_DIGITS, 0x3737n, 238n)
    WasmI32.store16(_HEX_DIGITS, 0x3837n, 240n)
    WasmI32.store16(_HEX_DIGITS, 0x3937n, 242n)
    WasmI32.store16(_HEX_DIGITS, 0x6137n, 244n)
    WasmI32.store16(_HEX_DIGITS, 0x6237n, 246n)
    WasmI32.store16(_HEX_DIGITS, 0x6337n, 248n)
    WasmI32.store16(_HEX_DIGITS, 0x6437n, 250n)
    WasmI32.store16(_HEX_DIGITS, 0x6537n, 252n)
    WasmI32.store16(_HEX_DIGITS, 0x6637n, 254n) // 7f

    WasmI32.store16(_HEX_DIGITS, 0x3038n, 256n) // 80
    WasmI32.store16(_HEX_DIGITS, 0x3138n, 258n)
    WasmI32.store16(_HEX_DIGITS, 0x3238n, 260n)
    WasmI32.store16(_HEX_DIGITS, 0x3338n, 262n)
    WasmI32.store16(_HEX_DIGITS, 0x3438n, 264n)
    WasmI32.store16(_HEX_DIGITS, 0x3538n, 266n)
    WasmI32.store16(_HEX_DIGITS, 0x3638n, 268n)
    WasmI32.store16(_HEX_DIGITS, 0x3738n, 270n)
    WasmI32.store16(_HEX_DIGITS, 0x3838n, 272n)
    WasmI32.store16(_HEX_DIGITS, 0x3938n, 274n)
    WasmI32.store16(_HEX_DIGITS, 0x6138n, 276n)
    WasmI32.store16(_HEX_DIGITS, 0x6238n, 278n)
    WasmI32.store16(_HEX_DIGITS, 0x6338n, 280n)
    WasmI32.store16(_HEX_DIGITS, 0x6438n, 282n)
    WasmI32.store16(_HEX_DIGITS, 0x6538n, 284n)
    WasmI32.store16(_HEX_DIGITS, 0x6638n, 286n) // 8f

    WasmI32.store16(_HEX_DIGITS, 0x3039n, 288n) // 90
    WasmI32.store16(_HEX_DIGITS, 0x3139n, 290n)
    WasmI32.store16(_HEX_DIGITS, 0x3239n, 292n)
    WasmI32.store16(_HEX_DIGITS, 0x3339n, 294n)
    WasmI32.store16(_HEX_DIGITS, 0x3439n, 296n)
    WasmI32.store16(_HEX_DIGITS, 0x3539n, 298n)
    WasmI32.store16(_HEX_DIGITS, 0x3639n, 300n)
    WasmI32.store16(_HEX_DIGITS, 0x3739n, 302n)
    WasmI32.store16(_HEX_DIGITS, 0x3839n, 304n)
    WasmI32.store16(_HEX_DIGITS, 0x3939n, 306n)
    WasmI32.store16(_HEX_DIGITS, 0x6139n, 308n)
    WasmI32.store16(_HEX_DIGITS, 0x6239n, 310n)
    WasmI32.store16(_HEX_DIGITS, 0x6339n, 312n)
    WasmI32.store16(_HEX_DIGITS, 0x6439n, 314n)
    WasmI32.store16(_HEX_DIGITS, 0x6539n, 316n)
    WasmI32.store16(_HEX_DIGITS, 0x6639n, 318n) // 9f

    WasmI32.store16(_HEX_DIGITS, 0x3061n, 320n) // a0
    WasmI32.store16(_HEX_DIGITS, 0x3161n, 322n)
    WasmI32.store16(_HEX_DIGITS, 0x3261n, 324n)
    WasmI32.store16(_HEX_DIGITS, 0x3361n, 326n)
    WasmI32.store16(_HEX_DIGITS, 0x3461n, 328n)
    WasmI32.store16(_HEX_DIGITS, 0x3561n, 330n)
    WasmI32.store16(_HEX_DIGITS, 0x3661n, 332n)
    WasmI32.store16(_HEX_DIGITS, 0x3761n, 334n)
    WasmI32.store16(_HEX_DIGITS, 0x3861n, 336n)
    WasmI32.store16(_HEX_DIGITS, 0x3961n, 338n)
    WasmI32.store16(_HEX_DIGITS, 0x6161n, 340n)
    WasmI32.store16(_HEX_DIGITS, 0x6261n, 342n)
    WasmI32.store16(_HEX_DIGITS, 0x6361n, 344n)
    WasmI32.store16(_HEX_DIGITS, 0x6461n, 346n)
    WasmI32.store16(_HEX_DIGITS, 0x6561n, 348n)
    WasmI32.store16(_HEX_DIGITS, 0x6661n, 350n) // af

    WasmI32.store16(_HEX_DIGITS, 0x3062n, 352n) // b0
    WasmI32.store16(_HEX_DIGITS, 0x3162n, 354n)
    WasmI32.store16(_HEX_DIGITS, 0x3262n, 356n)
    WasmI32.store16(_HEX_DIGITS, 0x3362n, 358n)
    WasmI32.store16(_HEX_DIGITS, 0x3462n, 360n)
    WasmI32.store16(_HEX_DIGITS, 0x3562n, 362n)
    WasmI32.store16(_HEX_DIGITS, 0x3662n, 364n)
    WasmI32.store16(_HEX_DIGITS, 0x3762n, 366n)
    WasmI32.store16(_HEX_DIGITS, 0x3862n, 368n)
    WasmI32.store16(_HEX_DIGITS, 0x3962n, 370n)
    WasmI32.store16(_HEX_DIGITS, 0x6162n, 372n)
    WasmI32.store16(_HEX_DIGITS, 0x6262n, 374n)
    WasmI32.store16(_HEX_DIGITS, 0x6362n, 376n)
    WasmI32.store16(_HEX_DIGITS, 0x6462n, 378n)
    WasmI32.store16(_HEX_DIGITS, 0x6562n, 380n)
    WasmI32.store16(_HEX_DIGITS, 0x6662n, 382n) // bf

    WasmI32.store16(_HEX_DIGITS, 0x3063n, 384n) // c0
    WasmI32.store16(_HEX_DIGITS, 0x3163n, 386n)
    WasmI32.store16(_HEX_DIGITS, 0x3263n, 388n)
    WasmI32.store16(_HEX_DIGITS, 0x3363n, 390n)
    WasmI32.store16(_HEX_DIGITS, 0x3463n, 392n)
    WasmI32.store16(_HEX_DIGITS, 0x3563n, 394n)
    WasmI32.store16(_HEX_DIGITS, 0x3663n, 396n)
    WasmI32.store16(_HEX_DIGITS, 0x3763n, 398n)
    WasmI32.store16(_HEX_DIGITS, 0x3863n, 400n)
    WasmI32.store16(_HEX_DIGITS, 0x3963n, 402n)
    WasmI32.store16(_HEX_DIGITS, 0x6163n, 404n)
    WasmI32.store16(_HEX_DIGITS, 0x6263n, 406n)
    WasmI32.store16(_HEX_DIGITS, 0x6363n, 408n)
    WasmI32.store16(_HEX_DIGITS, 0x6463n, 410n)
    WasmI32.store16(_HEX_DIGITS, 0x6563n, 412n)
    WasmI32.store16(_HEX_DIGITS, 0x6663n, 414n) // cf

    WasmI32.store16(_HEX_DIGITS, 0x3064n, 416n) // d0
    WasmI32.store16(_HEX_DIGITS, 0x3164n, 418n)
    WasmI32.store16(_HEX_DIGITS, 0x3264n, 420n)
    WasmI32.store16(_HEX_DIGITS, 0x3364n, 422n)
    WasmI32.store16(_HEX_DIGITS, 0x3464n, 424n)
    WasmI32.store16(_HEX_DIGITS, 0x3564n, 426n)
    WasmI32.store16(_HEX_DIGITS, 0x3664n, 428n)
    WasmI32.store16(_HEX_DIGITS, 0x3764n, 430n)
    WasmI32.store16(_HEX_DIGITS, 0x3864n, 432n)
    WasmI32.store16(_HEX_DIGITS, 0x3964n, 434n)
    WasmI32.store16(_HEX_DIGITS, 0x6164n, 436n)
    WasmI32.store16(_HEX_DIGITS, 0x6264n, 438n)
    WasmI32.store16(_HEX_DIGITS, 0x6364n, 440n)
    WasmI32.store16(_HEX_DIGITS, 0x6464n, 442n)
    WasmI32.store16(_HEX_DIGITS, 0x6564n, 444n)
    WasmI32.store16(_HEX_DIGITS, 0x6664n, 446n) // df

    WasmI32.store16(_HEX_DIGITS, 0x3065n, 448n) // e0
    WasmI32.store16(_HEX_DIGITS, 0x3165n, 450n)
    WasmI32.store16(_HEX_DIGITS, 0x3265n, 452n)
    WasmI32.store16(_HEX_DIGITS, 0x3365n, 454n)
    WasmI32.store16(_HEX_DIGITS, 0x3465n, 456n)
    WasmI32.store16(_HEX_DIGITS, 0x3565n, 458n)
    WasmI32.store16(_HEX_DIGITS, 0x3665n, 460n)
    WasmI32.store16(_HEX_DIGITS, 0x3765n, 462n)
    WasmI32.store16(_HEX_DIGITS, 0x3865n, 464n)
    WasmI32.store16(_HEX_DIGITS, 0x3965n, 466n)
    WasmI32.store16(_HEX_DIGITS, 0x6165n, 468n)
    WasmI32.store16(_HEX_DIGITS, 0x6265n, 470n)
    WasmI32.store16(_HEX_DIGITS, 0x6365n, 472n)
    WasmI32.store16(_HEX_DIGITS, 0x6465n, 474n)
    WasmI32.store16(_HEX_DIGITS, 0x6565n, 476n)
    WasmI32.store16(_HEX_DIGITS, 0x6665n, 478n) // ef

    WasmI32.store16(_HEX_DIGITS, 0x3066n, 480n) // f0
    WasmI32.store16(_HEX_DIGITS, 0x3166n, 482n)
    WasmI32.store16(_HEX_DIGITS, 0x3266n, 484n)
    WasmI32.store16(_HEX_DIGITS, 0x3366n, 486n)
    WasmI32.store16(_HEX_DIGITS, 0x3466n, 488n)
    WasmI32.store16(_HEX_DIGITS, 0x3566n, 490n)
    WasmI32.store16(_HEX_DIGITS, 0x3666n, 492n)
    WasmI32.store16(_HEX_DIGITS, 0x3766n, 494n)
    WasmI32.store16(_HEX_DIGITS, 0x3866n, 496n)
    WasmI32.store16(_HEX_DIGITS, 0x3966n, 498n)
    WasmI32.store16(_HEX_DIGITS, 0x6166n, 500n)
    WasmI32.store16(_HEX_DIGITS, 0x6266n, 502n)
    WasmI32.store16(_HEX_DIGITS, 0x6366n, 504n)
    WasmI32.store16(_HEX_DIGITS, 0x6466n, 506n)
    WasmI32.store16(_HEX_DIGITS, 0x6566n, 508n)
    WasmI32.store16(_HEX_DIGITS, 0x6666n, 510n) // ff
  }
  _HEX_DIGITS
}

@unsafe
let mut _ANY_DIGITS = -1n

@unsafe
let get_ANY_DIGITS = () => {
  if (_ANY_DIGITS == -1n) {
    _ANY_DIGITS = Memory.malloc(36n)
    WasmI32.store8(_ANY_DIGITS, 0x30n, 0n) // 0
    WasmI32.store8(_ANY_DIGITS, 0x31n, 1n) // 1
    WasmI32.store8(_ANY_DIGITS, 0x32n, 2n) // 2
    WasmI32.store8(_ANY_DIGITS, 0x33n, 3n) // 3
    WasmI32.store8(_ANY_DIGITS, 0x34n, 4n) // 4
    WasmI32.store8(_ANY_DIGITS, 0x35n, 5n) // 5
    WasmI32.store8(_ANY_DIGITS, 0x36n, 6n) // 6
    WasmI32.store8(_ANY_DIGITS, 0x37n, 7n) // 7
    WasmI32.store8(_ANY_DIGITS, 0x38n, 8n) // 8
    WasmI32.store8(_ANY_DIGITS, 0x39n, 9n) // 9
    WasmI32.store8(_ANY_DIGITS, 0x61n, 10n) // a
    WasmI32.store8(_ANY_DIGITS, 0x62n, 11n) // b
    WasmI32.store8(_ANY_DIGITS, 0x63n, 12n) // c
    WasmI32.store8(_ANY_DIGITS, 0x64n, 13n) // d
    WasmI32.store8(_ANY_DIGITS, 0x65n, 14n) // e
    WasmI32.store8(_ANY_DIGITS, 0x66n, 15n) // f
    WasmI32.store8(_ANY_DIGITS, 0x67n, 16n) // g
    WasmI32.store8(_ANY_DIGITS, 0x68n, 17n) // h
    WasmI32.store8(_ANY_DIGITS, 0x69n, 18n) // i
    WasmI32.store8(_ANY_DIGITS, 0x6an, 19n) // j
    WasmI32.store8(_ANY_DIGITS, 0x6bn, 20n) // k
    WasmI32.store8(_ANY_DIGITS, 0x6cn, 21n) // l
    WasmI32.store8(_ANY_DIGITS, 0x6dn, 22n) // m
    WasmI32.store8(_ANY_DIGITS, 0x6en, 23n) // n
    WasmI32.store8(_ANY_DIGITS, 0x6fn, 24n) // o
    WasmI32.store8(_ANY_DIGITS, 0x70n, 25n) // p
    WasmI32.store8(_ANY_DIGITS, 0x71n, 26n) // q
    WasmI32.store8(_ANY_DIGITS, 0x72n, 27n) // r
    WasmI32.store8(_ANY_DIGITS, 0x73n, 28n) // s
    WasmI32.store8(_ANY_DIGITS, 0x74n, 29n) // t
    WasmI32.store8(_ANY_DIGITS, 0x75n, 30n) // u
    WasmI32.store8(_ANY_DIGITS, 0x76n, 31n) // v
    WasmI32.store8(_ANY_DIGITS, 0x77n, 32n) // w
    WasmI32.store8(_ANY_DIGITS, 0x78n, 33n) // x
    WasmI32.store8(_ANY_DIGITS, 0x79n, 34n) // y
    WasmI32.store8(_ANY_DIGITS, 0x7an, 35n) // z
  }
  _ANY_DIGITS
}

@unsafe
let mut _EXP_POWERS = -1n

@unsafe
let get_EXP_POWERS = () => {
  if (_EXP_POWERS == -1n) {
    _EXP_POWERS = Memory.malloc(174n)
    WasmI32.store16(_EXP_POWERS, -1220n, 0n)
    WasmI32.store16(_EXP_POWERS, -1193n, 2n)
    WasmI32.store16(_EXP_POWERS, -1166n, 4n)
    WasmI32.store16(_EXP_POWERS, -1140n, 6n)
    WasmI32.store16(_EXP_POWERS, -1113n, 8n)
    WasmI32.store16(_EXP_POWERS, -1087n, 10n)
    WasmI32.store16(_EXP_POWERS, -1060n, 12n)
    WasmI32.store16(_EXP_POWERS, -1034n, 14n)
    WasmI32.store16(_EXP_POWERS, -1007n, 16n)
    WasmI32.store16(_EXP_POWERS, -980n, 18n)
    WasmI32.store16(_EXP_POWERS, -954n, 20n)
    WasmI32.store16(_EXP_POWERS, -927n, 22n)
    WasmI32.store16(_EXP_POWERS, -901n, 24n)
    WasmI32.store16(_EXP_POWERS, -874n, 26n)
    WasmI32.store16(_EXP_POWERS, -847n, 28n)
    WasmI32.store16(_EXP_POWERS, -821n, 30n)
    WasmI32.store16(_EXP_POWERS, -794n, 32n)
    WasmI32.store16(_EXP_POWERS, -768n, 34n)
    WasmI32.store16(_EXP_POWERS, -741n, 36n)
    WasmI32.store16(_EXP_POWERS, -715n, 38n)
    WasmI32.store16(_EXP_POWERS, -688n, 40n)
    WasmI32.store16(_EXP_POWERS, -661n, 42n)
    WasmI32.store16(_EXP_POWERS, -635n, 44n)
    WasmI32.store16(_EXP_POWERS, -608n, 46n)
    WasmI32.store16(_EXP_POWERS, -582n, 48n)
    WasmI32.store16(_EXP_POWERS, -555n, 50n)
    WasmI32.store16(_EXP_POWERS, -529n, 52n)
    WasmI32.store16(_EXP_POWERS, -502n, 54n)
    WasmI32.store16(_EXP_POWERS, -475n, 56n)
    WasmI32.store16(_EXP_POWERS, -449n, 58n)
    WasmI32.store16(_EXP_POWERS, -422n, 60n)
    WasmI32.store16(_EXP_POWERS, -396n, 62n)
    WasmI32.store16(_EXP_POWERS, -369n, 64n)
    WasmI32.store16(_EXP_POWERS, -343n, 66n)
    WasmI32.store16(_EXP_POWERS, -316n, 68n)
    WasmI32.store16(_EXP_POWERS, -289n, 70n)
    WasmI32.store16(_EXP_POWERS, -263n, 72n)
    WasmI32.store16(_EXP_POWERS, -236n, 74n)
    WasmI32.store16(_EXP_POWERS, -210n, 76n)
    WasmI32.store16(_EXP_POWERS, -183n, 78n)
    WasmI32.store16(_EXP_POWERS, -157n, 80n)
    WasmI32.store16(_EXP_POWERS, -130n, 82n)
    WasmI32.store16(_EXP_POWERS, -103n, 84n)
    WasmI32.store16(_EXP_POWERS, -77n, 86n)
    WasmI32.store16(_EXP_POWERS, -50n, 88n)
    WasmI32.store16(_EXP_POWERS, -24n, 90n)
    WasmI32.store16(_EXP_POWERS, 3n, 92n)
    WasmI32.store16(_EXP_POWERS, 30n, 94n)
    WasmI32.store16(_EXP_POWERS, 56n, 96n)
    WasmI32.store16(_EXP_POWERS, 83n, 98n)
    WasmI32.store16(_EXP_POWERS, 109n, 100n)
    WasmI32.store16(_EXP_POWERS, 136n, 102n)
    WasmI32.store16(_EXP_POWERS, 162n, 104n)
    WasmI32.store16(_EXP_POWERS, 189n, 106n)
    WasmI32.store16(_EXP_POWERS, 216n, 108n)
    WasmI32.store16(_EXP_POWERS, 242n, 110n)
    WasmI32.store16(_EXP_POWERS, 269n, 112n)
    WasmI32.store16(_EXP_POWERS, 295n, 114n)
    WasmI32.store16(_EXP_POWERS, 322n, 116n)
    WasmI32.store16(_EXP_POWERS, 348n, 118n)
    WasmI32.store16(_EXP_POWERS, 375n, 120n)
    WasmI32.store16(_EXP_POWERS, 402n, 122n)
    WasmI32.store16(_EXP_POWERS, 428n, 124n)
    WasmI32.store16(_EXP_POWERS, 455n, 126n)
    WasmI32.store16(_EXP_POWERS, 481n, 128n)
    WasmI32.store16(_EXP_POWERS, 508n, 130n)
    WasmI32.store16(_EXP_POWERS, 534n, 132n)
    WasmI32.store16(_EXP_POWERS, 561n, 134n)
    WasmI32.store16(_EXP_POWERS, 588n, 136n)
    WasmI32.store16(_EXP_POWERS, 614n, 138n)
    WasmI32.store16(_EXP_POWERS, 641n, 140n)
    WasmI32.store16(_EXP_POWERS, 667n, 142n)
    WasmI32.store16(_EXP_POWERS, 694n, 144n)
    WasmI32.store16(_EXP_POWERS, 720n, 146n)
    WasmI32.store16(_EXP_POWERS, 747n, 148n)
    WasmI32.store16(_EXP_POWERS, 774n, 150n)
    WasmI32.store16(_EXP_POWERS, 800n, 152n)
    WasmI32.store16(_EXP_POWERS, 827n, 154n)
    WasmI32.store16(_EXP_POWERS, 853n, 156n)
    WasmI32.store16(_EXP_POWERS, 880n, 158n)
    WasmI32.store16(_EXP_POWERS, 907n, 160n)
    WasmI32.store16(_EXP_POWERS, 933n, 162n)
    WasmI32.store16(_EXP_POWERS, 960n, 164n)
    WasmI32.store16(_EXP_POWERS, 986n, 166n)
    WasmI32.store16(_EXP_POWERS, 1013n, 168n)
    WasmI32.store16(_EXP_POWERS, 1039n, 170n)
    WasmI32.store16(_EXP_POWERS, 1066n, 172n)
  }
  _EXP_POWERS
}

// 1e-348, 1e-340, ..., 1e340
@unsafe
let mut _FRC_POWERS = -1n

@unsafe
let get_FRC_POWERS = () => {
  if (_FRC_POWERS == -1n) {
    _FRC_POWERS = Memory.malloc(696n)
    WasmI64.store(_FRC_POWERS, 0xFA8FD5A0081C0288N, 0n)
    WasmI64.store(_FRC_POWERS, 0xBAAEE17FA23EBF76N, 8n)
    WasmI64.store(_FRC_POWERS, 0x8B16FB203055AC76N, 16n)
    WasmI64.store(_FRC_POWERS, 0xCF42894A5DCE35EAN, 24n)
    WasmI64.store(_FRC_POWERS, 0x9A6BB0AA55653B2DN, 32n)
    WasmI64.store(_FRC_POWERS, 0xE61ACF033D1A45DFN, 40n)
    WasmI64.store(_FRC_POWERS, 0xAB70FE17C79AC6CAN, 48n)
    WasmI64.store(_FRC_POWERS, 0xFF77B1FCBEBCDC4FN, 56n)
    WasmI64.store(_FRC_POWERS, 0xBE5691EF416BD60CN, 64n)
    WasmI64.store(_FRC_POWERS, 0x8DD01FAD907FFC3CN, 72n)
    WasmI64.store(_FRC_POWERS, 0xD3515C2831559A83N, 80n)
    WasmI64.store(_FRC_POWERS, 0x9D71AC8FADA6C9B5N, 88n)
    WasmI64.store(_FRC_POWERS, 0xEA9C227723EE8BCBN, 96n)
    WasmI64.store(_FRC_POWERS, 0xAECC49914078536DN, 104n)
    WasmI64.store(_FRC_POWERS, 0x823C12795DB6CE57N, 112n)
    WasmI64.store(_FRC_POWERS, 0xC21094364DFB5637N, 120n)
    WasmI64.store(_FRC_POWERS, 0x9096EA6F3848984FN, 128n)
    WasmI64.store(_FRC_POWERS, 0xD77485CB25823AC7N, 136n)
    WasmI64.store(_FRC_POWERS, 0xA086CFCD97BF97F4N, 144n)
    WasmI64.store(_FRC_POWERS, 0xEF340A98172AACE5N, 152n)
    WasmI64.store(_FRC_POWERS, 0xB23867FB2A35B28EN, 160n)
    WasmI64.store(_FRC_POWERS, 0x84C8D4DFD2C63F3BN, 168n)
    WasmI64.store(_FRC_POWERS, 0xC5DD44271AD3CDBAN, 176n)
    WasmI64.store(_FRC_POWERS, 0x936B9FCEBB25C996N, 184n)
    WasmI64.store(_FRC_POWERS, 0xDBAC6C247D62A584N, 192n)
    WasmI64.store(_FRC_POWERS, 0xA3AB66580D5FDAF6N, 200n)
    WasmI64.store(_FRC_POWERS, 0xF3E2F893DEC3F126N, 208n)
    WasmI64.store(_FRC_POWERS, 0xB5B5ADA8AAFF80B8N, 216n)
    WasmI64.store(_FRC_POWERS, 0x87625F056C7C4A8BN, 224n)
    WasmI64.store(_FRC_POWERS, 0xC9BCFF6034C13053N, 232n)
    WasmI64.store(_FRC_POWERS, 0x964E858C91BA2655N, 240n)
    WasmI64.store(_FRC_POWERS, 0xDFF9772470297EBDN, 248n)
    WasmI64.store(_FRC_POWERS, 0xA6DFBD9FB8E5B88FN, 256n)
    WasmI64.store(_FRC_POWERS, 0xF8A95FCF88747D94N, 264n)
    WasmI64.store(_FRC_POWERS, 0xB94470938FA89BCFN, 272n)
    WasmI64.store(_FRC_POWERS, 0x8A08F0F8BF0F156BN, 280n)
    WasmI64.store(_FRC_POWERS, 0xCDB02555653131B6N, 288n)
    WasmI64.store(_FRC_POWERS, 0x993FE2C6D07B7FACN, 296n)
    WasmI64.store(_FRC_POWERS, 0xE45C10C42A2B3B06N, 304n)
    WasmI64.store(_FRC_POWERS, 0xAA242499697392D3N, 312n)
    WasmI64.store(_FRC_POWERS, 0xFD87B5F28300CA0EN, 320n)
    WasmI64.store(_FRC_POWERS, 0xBCE5086492111AEBN, 328n)
    WasmI64.store(_FRC_POWERS, 0x8CBCCC096F5088CCN, 336n)
    WasmI64.store(_FRC_POWERS, 0xD1B71758E219652CN, 344n)
    WasmI64.store(_FRC_POWERS, 0x9C40000000000000N, 352n)
    WasmI64.store(_FRC_POWERS, 0xE8D4A51000000000N, 360n)
    WasmI64.store(_FRC_POWERS, 0xAD78EBC5AC620000N, 368n)
    WasmI64.store(_FRC_POWERS, 0x813F3978F8940984N, 376n)
    WasmI64.store(_FRC_POWERS, 0xC097CE7BC90715B3N, 384n)
    WasmI64.store(_FRC_POWERS, 0x8F7E32CE7BEA5C70N, 392n)
    WasmI64.store(_FRC_POWERS, 0xD5D238A4ABE98068N, 400n)
    WasmI64.store(_FRC_POWERS, 0x9F4F2726179A2245N, 408n)
    WasmI64.store(_FRC_POWERS, 0xED63A231D4C4FB27N, 416n)
    WasmI64.store(_FRC_POWERS, 0xB0DE65388CC8ADA8N, 424n)
    WasmI64.store(_FRC_POWERS, 0x83C7088E1AAB65DBN, 432n)
    WasmI64.store(_FRC_POWERS, 0xC45D1DF942711D9AN, 440n)
    WasmI64.store(_FRC_POWERS, 0x924D692CA61BE758N, 448n)
    WasmI64.store(_FRC_POWERS, 0xDA01EE641A708DEAN, 456n)
    WasmI64.store(_FRC_POWERS, 0xA26DA3999AEF774AN, 464n)
    WasmI64.store(_FRC_POWERS, 0xF209787BB47D6B85N, 472n)
    WasmI64.store(_FRC_POWERS, 0xB454E4A179DD1877N, 480n)
    WasmI64.store(_FRC_POWERS, 0x865B86925B9BC5C2N, 488n)
    WasmI64.store(_FRC_POWERS, 0xC83553C5C8965D3DN, 496n)
    WasmI64.store(_FRC_POWERS, 0x952AB45CFA97A0B3N, 504n)
    WasmI64.store(_FRC_POWERS, 0xDE469FBD99A05FE3N, 512n)
    WasmI64.store(_FRC_POWERS, 0xA59BC234DB398C25N, 520n)
    WasmI64.store(_FRC_POWERS, 0xF6C69A72A3989F5CN, 528n)
    WasmI64.store(_FRC_POWERS, 0xB7DCBF5354E9BECEN, 536n)
    WasmI64.store(_FRC_POWERS, 0x88FCF317F22241E2N, 544n)
    WasmI64.store(_FRC_POWERS, 0xCC20CE9BD35C78A5N, 552n)
    WasmI64.store(_FRC_POWERS, 0x98165AF37B2153DFN, 560n)
    WasmI64.store(_FRC_POWERS, 0xE2A0B5DC971F303AN, 568n)
    WasmI64.store(_FRC_POWERS, 0xA8D9D1535CE3B396N, 576n)
    WasmI64.store(_FRC_POWERS, 0xFB9B7CD9A4A7443CN, 584n)
    WasmI64.store(_FRC_POWERS, 0xBB764C4CA7A44410N, 592n)
    WasmI64.store(_FRC_POWERS, 0x8BAB8EEFB6409C1AN, 600n)
    WasmI64.store(_FRC_POWERS, 0xD01FEF10A657842CN, 608n)
    WasmI64.store(_FRC_POWERS, 0x9B10A4E5E9913129N, 616n)
    WasmI64.store(_FRC_POWERS, 0xE7109BFBA19C0C9DN, 624n)
    WasmI64.store(_FRC_POWERS, 0xAC2820D9623BF429N, 632n)
    WasmI64.store(_FRC_POWERS, 0x80444B5E7AA7CF85N, 640n)
    WasmI64.store(_FRC_POWERS, 0xBF21E44003ACDD2DN, 648n)
    WasmI64.store(_FRC_POWERS, 0x8E679C2F5E44FF8FN, 656n)
    WasmI64.store(_FRC_POWERS, 0xD433179D9C8CB841N, 664n)
    WasmI64.store(_FRC_POWERS, 0x9E19DB92B4E31BA9N, 672n)
    WasmI64.store(_FRC_POWERS, 0xEB96BF6EBADF77D9N, 680n)
    WasmI64.store(_FRC_POWERS, 0xAF87023B9BF0EE6BN, 688n)
  }
  _FRC_POWERS
}

@unsafe
let isPowerOf2 = value => {
  WasmI32.popcnt(value) == 1n
}

// Count number of decimals for u32 values
// In our case input value always non-zero so we can simplify some parts
@unsafe
export let decimalCount32 = value => {
  if (WasmI32.ltU(value, 100000n)) {
    if (WasmI32.ltU(value, 100n)) {
      1n + (if (WasmI32.geU(value, 10n)) 1n else 0n)
    } else {
      3n +
        (if (WasmI32.geU(value, 10000n)) 1n else 0n) +
        (if (WasmI32.geU(value, 1000n)) 1n else 0n)
    }
  } else {
    if (WasmI32.ltU(value, 10000000n)) {
      6n + (if (WasmI32.geU(value, 1000000n)) 1n else 0n)
    } else {
      8n +
        (if (WasmI32.geU(value, 1000000000n)) 1n else 0n) +
        (if (WasmI32.geU(value, 100000000n)) 1n else 0n)
    }
  }
}

// Count number of decimals for u64 values
// In our case input value always greater than 2^32-1 so we can skip some parts
@unsafe
let decimalCount64High = value => {
  if (WasmI64.ltU(value, 1000000000000000N)) {
    if (WasmI64.ltU(value, 1000000000000N)) {
      10n +
        (if (WasmI64.geU(value, 100000000000N)) 1n else 0n) +
        (if (WasmI64.geU(value, 10000000000N)) 1n else 0n)
    } else {
      13n +
        (if (WasmI64.geU(value, 100000000000000N)) 1n else 0n) +
        (if (WasmI64.geU(value, 10000000000000N)) 1n else 0n)
    }
  } else {
    if (WasmI64.ltU(value, 100000000000000000N)) {
      16n + (if (WasmI64.geU(value, 10000000000000000N)) 1n else 0n)
    } else {
      18n +
        (if (WasmI64.geU(value, 0x8AC7230489E80000N)) 1n else 0n) +
        (if (WasmI64.geU(value, 1000000000000000000N)) 1n else 0n)
    }
  }
}

@unsafe
let ulog_base = (num, base) => {
  if (isPowerOf2(base)) {
    WasmI32.divU(
      63n - WasmI32.wrapI64(WasmI64.clz(num)),
      31n - WasmI32.clz(base)
    ) +
      1n
  } else {
    let b64 = WasmI64.extendI32U(base)
    let mut b = b64
    let mut e = 1n
    let mut num = num
    while (WasmI64.geU(num, b)) {
      num = WasmI64.divU(num, b)
      b = WasmI64.mul(b, b)
      e = WasmI32.shl(e, 1n)
    }
    while (WasmI64.geU(num, 1N)) {
      num = WasmI64.divU(num, b64)
      e += 1n
    }
    e - 1n
  }
}

@unsafe
let utoa32_dec_lut = (buffer, num, offset) => {
  let mut num = num
  let mut offset = offset
  while (WasmI32.geU(num, 10000n)) {
    // in most VMs i32/u32 div and modulo by constant can be shared
    let t = WasmI32.divU(num, 10000n)
    let r = WasmI32.remU(num, 10000n)
    num = t

    let d1 = WasmI32.divU(r, 100n)
    let d2 = WasmI32.remU(r, 100n)

    let digits1 = WasmI32.load16U(get_DIGITS() + (d1 << 1n), 0n)
    let digits2 = WasmI32.load16U(get_DIGITS() + (d2 << 1n), 0n)

    offset -= 4n
    WasmI32.store(buffer + offset, digits1 | digits2 << 16n, 0n)
  }

  if (WasmI32.geU(num, 100n)) {
    let t = WasmI32.divU(num, 100n)
    let d1 = WasmI32.remU(num, 100n)
    num = t
    offset -= 2n
    let digits = WasmI32.load16U(get_DIGITS() + (d1 << 1n), 0n)
    WasmI32.store16(buffer + offset, digits, 0n)
  }

  if (WasmI32.geU(num, 10n)) {
    offset -= 2n
    let digits = WasmI32.load16U(get_DIGITS() + (num << 1n), 0n)
    WasmI32.store16(buffer + offset, digits, 0n)
  } else {
    offset -= 1n
    let digit = _CHAR_CODE_0 + num
    WasmI32.store8(buffer + offset, digit, 0n)
  }
}

@unsafe
let utoa64_dec_lut = (buffer, num, offset) => {
  let mut num = num
  let mut offset = offset
  while (WasmI64.geU(num, 100000000N)) {
    let t = WasmI64.divU(num, 100000000N)
    let r = WasmI32.wrapI64(WasmI64.sub(num, WasmI64.mul(t, 100000000N)))
    num = t

    let b = WasmI32.divU(r, 10000n)
    let c = WasmI32.remU(r, 10000n)

    let b1 = WasmI32.divU(b, 100n)
    let b2 = WasmI32.remU(b, 100n)
    let c1 = WasmI32.divU(c, 100n)
    let c2 = WasmI32.remU(c, 100n)

    let mut digits1 = WasmI32.load16U(get_DIGITS() + (c1 << 1n), 0n)
    let mut digits2 = WasmI32.load16U(get_DIGITS() + (c2 << 1n), 0n)

    offset -= 4n
    WasmI32.store(buffer + offset, digits1 | digits2 << 16n, 0n)

    digits1 = WasmI32.load16U(get_DIGITS() + (b1 << 1n), 0n)
    digits2 = WasmI32.load16U(get_DIGITS() + (b2 << 1n), 0n)

    offset -= 4n
    WasmI32.store(buffer + offset, digits1 | digits2 << 16n, 0n)
  }

  utoa32_dec_lut(buffer, WasmI32.wrapI64(num), offset)
}

@unsafe
let utoa_hex_lut = (buffer, num, offset) => {
  let lut = get_HEX_DIGITS()
  let mut num = num
  let mut offset = offset
  while (WasmI32.geU(offset, 2n)) {
    offset -= 2n
    WasmI32.store16(
      buffer + offset,
      WasmI32.load16U(lut + ((WasmI32.wrapI64(num) & 0xFFn) << 1n), 0n),
      0n
    )
    num = WasmI64.shrU(num, 8N)
  }
  if (WasmI32.ne(offset & 1n, 0n)) {
    WasmI32.store8(
      buffer,
      WasmI32.load8U(lut + (WasmI32.wrapI64(num) << 5n), 0n),
      0n
    )
  }
}

@unsafe
let utoa32_dec_core = (buffer, num, offset) => {
  utoa32_dec_lut(buffer, num, offset)
}

@unsafe
let utoa32_hex_core = (buffer, num, offset) => {
  utoa_hex_lut(buffer, WasmI64.extendI32U(num), offset)
}

@unsafe
let utoa64_dec_core = (buffer, num, offset) => {
  utoa64_dec_lut(buffer, num, offset)
}

@unsafe
let utoa64_hex_core = (buffer, num, offset) => {
  utoa_hex_lut(buffer, num, offset)
}

@unsafe
let utoa64_any_core = (buffer, num, offset, radix) => {
  let lut = get_ANY_DIGITS()
  let base = WasmI64.extendI32U(radix)
  let mut num = num
  let mut offset = offset
  if ((radix & radix - 1n) == 0n) { // for radix which pow of two
    let shift = WasmI64.extendI32U(WasmI32.ctz(radix) & 7n)
    let mask = WasmI64.sub(base, 1N)
    for (;;) {
      offset -= 1n
      WasmI32.store8(
        buffer + offset,
        WasmI32.load8U(lut + WasmI32.wrapI64(WasmI64.and(num, mask)), 0n),
        0n
      )
      num = WasmI64.shrU(num, shift)
      if (WasmI64.eqz(num)) break
    }
  } else {
    for (;;) {
      offset -= 1n
      let q = WasmI64.divU(num, base)
      WasmI32.store8(
        buffer + offset,
        WasmI32.load8U(
          lut + WasmI32.wrapI64(WasmI64.sub(num, WasmI64.mul(q, base))),
          0n
        ),
        0n
      )
      num = q
      if (WasmI64.eqz(num)) break
    }
  }
}

@unsafe
export let utoa32Buffered = (buf, value, radix) => {
  if (WasmI32.ltS(radix, 2n) || WasmI32.gtS(radix, 36n)) {
    throw Exception.InvalidArgument(
      "toString() radix argument must be between 2 and 36"
    )
  }
  if (WasmI32.eqz(value)) {
    WasmI32.store8(buf, _CHAR_CODE_0, 0n)
  } else if (radix == 10n) {
    let decimals = decimalCount32(value)
    utoa32_dec_core(buf, value, decimals)
  } else if (radix == 16n) {
    let decimals = WasmI32.shrU(31n - WasmI32.clz(value), 2n) + 1n
    utoa32_hex_core(buf, value, decimals)
  } else {
    let decimals = ulog_base(WasmI64.extendI32U(value), radix)
    let out = allocateString(decimals)
    utoa64_any_core(buf, WasmI64.extendI32U(value), decimals, radix)
  }
}

@unsafe
export let utoa32 = (value, radix) => {
  if (WasmI32.ltS(radix, 2n) || WasmI32.gtS(radix, 36n)) {
    throw Exception.InvalidArgument(
      "toString() radix argument must be between 2 and 36"
    )
  }
  if (WasmI32.eqz(value)) {
    "0"
  } else if (radix == 10n) {
    let decimals = decimalCount32(value)
    let out = allocateString(decimals)
    utoa32_dec_core(out, value, decimals)
    WasmI32.toGrain(out): String
  } else if (radix == 16n) {
    let decimals = WasmI32.shrU(31n - WasmI32.clz(value), 2n) + 1n
    let out = allocateString(decimals)
    utoa32_hex_core(out, value, decimals)
    WasmI32.toGrain(out): String
  } else {
    let decimals = ulog_base(WasmI64.extendI32U(value), radix)
    let out = allocateString(decimals)
    utoa64_any_core(out, WasmI64.extendI32U(value), decimals, radix)
    WasmI32.toGrain(out): String
  }
}

@unsafe
export let itoa32 = (value, radix) => {
  let mut value = value
  if (WasmI32.ltS(radix, 2n) || WasmI32.gtS(radix, 36n)) {
    throw Exception.InvalidArgument(
      "toString() radix argument must be between 2 and 36"
    )
  }
  let sign = WasmI32.shrU(value, 31n)

  if (WasmI32.ne(sign, 0n)) value = 0n - value

  let out = if (WasmI32.eqz(value)) {
    "0"
  } else if (radix == 10n) {
    let decimals = decimalCount32(value) + sign
    let out = allocateString(decimals)
    utoa32_dec_core(out + 8n, value, decimals)
    WasmI32.toGrain(out): String
  } else if (radix == 16n) {
    let decimals = WasmI32.shrU(31n - WasmI32.clz(value), 2n) + 1n + sign
    let out = allocateString(decimals)
    utoa32_hex_core(out + 8n, value, decimals)
    WasmI32.toGrain(out): String
  } else {
    let val64 = WasmI64.extendI32U(value)
    let decimals = ulog_base(val64, radix) + sign
    let out = allocateString(decimals)
    utoa64_any_core(out + 8n, val64, decimals, radix)
    WasmI32.toGrain(out): String
  }
  if (WasmI32.ne(sign, 0n))
    WasmI32.store8(WasmI32.fromGrain(out), _CHAR_CODE_MINUS, 8n)
  out
}

@unsafe
export let utoa64 = (value, radix) => {
  if (WasmI32.ltS(radix, 2n) || WasmI32.gtS(radix, 36n)) {
    throw Exception.InvalidArgument(
      "toString() radix argument must be between 2 and 36"
    )
  }
  if (WasmI64.eqz(value)) {
    "0"
  } else if (radix == 10n) {
    if (WasmI64.leU(value, _I32_MAX)) {
      let val32 = WasmI32.wrapI64(value)
      let decimals = decimalCount32(val32)
      let out = allocateString(decimals)
      utoa32_dec_core(out + 8n, val32, decimals)
      WasmI32.toGrain(out): String
    } else {
      let decimals = decimalCount64High(value)
      let out = allocateString(decimals)
      utoa64_dec_core(out + 8n, value, decimals)
      WasmI32.toGrain(out): String
    }
  } else if (radix == 16n) {
    let decimals = WasmI32.shrU(63n - WasmI32.wrapI64(WasmI64.clz(value)), 2n) +
      1n
    let out = allocateString(decimals)
    utoa64_hex_core(out + 8n, value, decimals)
    WasmI32.toGrain(out): String
  } else {
    let decimals = ulog_base(value, radix)
    let out = allocateString(decimals)
    utoa64_any_core(out + 8n, value, decimals, radix)
    WasmI32.toGrain(out): String
  }
}

@unsafe
export let itoa64 = (value, radix) => {
  if (WasmI32.ltS(radix, 2n) || WasmI32.gtS(radix, 36n)) {
    throw Exception.InvalidArgument(
      "toString() radix argument must be between 2 and 36"
    )
  }

  let mut value = value

  let sign = WasmI32.wrapI64(WasmI64.shrU(value, 63N))
  if (sign != 0n) value = WasmI64.sub(0N, value)

  let out = if (WasmI64.eqz(value)) {
    "0"
  } else if (radix == 10n) {
    if (WasmI64.leU(value, _I32_MAX)) {
      let val32 = WasmI32.wrapI64(value)
      let decimals = decimalCount32(val32) + sign
      let out = allocateString(decimals)
      utoa32_dec_core(out + 8n, val32, decimals)
      WasmI32.toGrain(out): String
    } else {
      let decimals = decimalCount64High(value) + sign
      let out = allocateString(decimals)
      utoa64_dec_core(out + 8n, value, decimals)
      WasmI32.toGrain(out): String
    }
  } else if (radix == 16n) {
    let decimals = WasmI32.shrU(63n - WasmI32.wrapI64(WasmI64.clz(value)), 2n) +
      1n +
      sign
    let out = allocateString(decimals)
    utoa64_hex_core(out + 8n, value, decimals)
    WasmI32.toGrain(out): String
  } else {
    let decimals = ulog_base(value, radix) + sign
    let out = allocateString(decimals)
    utoa64_any_core(out + 8n, value, decimals, radix)
    WasmI32.toGrain(out): String
  }
  if (sign != 0n) WasmI32.store8(WasmI32.fromGrain(out), _CHAR_CODE_MINUS, 8n)
  out
}

@unsafe
let mut _K = 0n

@unsafe
let umul64f = (u, v) => {
  let u0 = WasmI64.and(u, 0xFFFFFFFFN)
  let v0 = WasmI64.and(v, 0xFFFFFFFFN)

  let u1 = WasmI64.shrU(u, 32N)
  let v1 = WasmI64.shrU(v, 32N)

  let l = WasmI64.mul(u0, v0)
  let mut t = WasmI64.add(WasmI64.mul(u1, v0), WasmI64.shrU(l, 32N))
  let mut w = WasmI64.add(WasmI64.mul(u0, v1), WasmI64.and(t, 0xFFFFFFFFN))

  w = WasmI64.add(w, 0x7FFFFFFFN) // rounding

  t = WasmI64.shrU(t, 32N)
  w = WasmI64.shrU(w, 32N)

  WasmI64.add(WasmI64.add(WasmI64.mul(u1, v1), t), w)
}

@unsafe
let umul64e = (e1, e2) => {
  e1 + e2 + 64n // where 64 is significand size
}

@unsafe
let grisuRound = (buffer, len, delta, rest, ten_kappa, wp_w) => {
  let mut lastp = buffer + len - 1n
  let mut digit = WasmI32.load8U(lastp, 0n)
  let mut rest = rest
  while (
    WasmI64.ltU(rest, wp_w) &&
    WasmI64.geU(WasmI64.sub(delta, rest), ten_kappa) &&
    (WasmI64.ltU(WasmI64.add(rest, ten_kappa), wp_w) ||
      WasmI64.gtU(
        WasmI64.sub(wp_w, rest),
        WasmI64.sub(WasmI64.add(rest, ten_kappa), wp_w)
      ))
  ) {
    digit -= 1n
    rest = WasmI64.add(rest, ten_kappa)
  }
  WasmI32.store8(lastp, digit, 0n)
}

@unsafe
let genDigits = (buffer, w_frc, mp_frc, mp_exp, delta, sign) => {
  let mut delta = delta
  let one_exp = 0n - mp_exp
  let one_frc = WasmI64.shl(1N, WasmI64.extendI32U(one_exp))
  let mask = WasmI64.sub(one_frc, 1N)

  let mut wp_w_frc = WasmI64.sub(mp_frc, w_frc)

  let mut p1 = WasmI32.wrapI64(
    WasmI64.shrU(mp_frc, WasmI64.extendI32U(one_exp))
  )
  let mut p2 = WasmI64.and(mp_frc, mask)

  let mut kappa = decimalCount32(p1)
  let mut len = sign

  let mut done = false

  while (WasmI32.gtS(kappa, 0n)) {
    let mut d = 0n
    match (kappa) {
      10n => {
        d = WasmI32.divU(p1, 1000000000n)
        p1 = WasmI32.remU(p1, 1000000000n)
      },
      9n => {
        d = WasmI32.divU(p1, 100000000n)
        p1 = WasmI32.remU(p1, 100000000n)
      },
      8n => {
        d = WasmI32.divU(p1, 10000000n)
        p1 = WasmI32.remU(p1, 10000000n)
      },
      7n => {
        d = WasmI32.divU(p1, 1000000n)
        p1 = WasmI32.remU(p1, 1000000n)
      },
      6n => {
        d = WasmI32.divU(p1, 100000n)
        p1 = WasmI32.remU(p1, 100000n)
      },
      5n => {
        d = WasmI32.divU(p1, 10000n)
        p1 = WasmI32.remU(p1, 10000n)
      },
      4n => {
        d = WasmI32.divU(p1, 1000n)
        p1 = WasmI32.remU(p1, 1000n)
      },
      3n => {
        d = WasmI32.divU(p1, 100n)
        p1 = WasmI32.remU(p1, 100n)
      },
      2n => {
        d = WasmI32.divU(p1, 10n)
        p1 = WasmI32.remU(p1, 10n)
      },
      1n => {
        d = p1
        p1 = 0n
      },
      _ => {
        d = 0n
      },
    }

    if (WasmI32.ne(d | len, 0n)) {
      WasmI32.store8(buffer + len, _CHAR_CODE_0 + (d & 0xffn), 0n)
      len += 1n
    }

    kappa -= 1n
    let tmp = WasmI64.add(
      WasmI64.shl(WasmI64.extendI32U(p1), WasmI64.extendI32U(one_exp)),
      p2
    )
    if (WasmI64.leU(tmp, delta)) {
      _K += kappa
      grisuRound(
        buffer,
        len,
        delta,
        tmp,
        WasmI64.shl(
          WasmI64.extendI32U(WasmI32.load(get_POWERS10() + (kappa << 2n), 0n)),
          WasmI64.extendI32U(one_exp)
        ),
        wp_w_frc
      )
      done = true
      break
    }
  }

  if (!done)
    while (true) {
      p2 = WasmI64.mul(p2, 10N)
      delta = WasmI64.mul(delta, 10N)

      let d = WasmI64.shrU(p2, WasmI64.extendI32U(one_exp))
      if (WasmI64.ne(WasmI64.or(d, WasmI64.extendI32U(len)), 0N)) {
        WasmI32.store8(
          buffer + len,
          _CHAR_CODE_0 + (WasmI32.wrapI64(d) & 0xffn),
          0n
        )
        len += 1n
      }

      p2 = WasmI64.and(p2, mask)
      kappa -= 1n
      if (WasmI64.ltU(p2, delta)) {
        _K += kappa
        wp_w_frc = WasmI64.mul(
          wp_w_frc,
          WasmI64.extendI32U(
            WasmI32.load(get_POWERS10() + (0n - kappa << 2n), 0n)
          )
        )
        grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc)
        break
      }
    }
  len
}

@unsafe
let genExponent = (buffer, k) => {
  let mut k = k
  let sign = WasmI32.ltS(k, 0n)
  if (sign) k = 0n - k
  let decimals = decimalCount32(k) + 1n
  utoa32_dec_core(buffer, k, decimals)
  WasmI32.store8(buffer, if (sign) _CHAR_CODE_MINUS else _CHAR_CODE_PLUS, 0n)
  decimals
}

@unsafe
let grisu2 = (value, buffer, sign) => {
  // frexp routine
  let uv = WasmI64.reinterpretF64(value)
  let mut exp = WasmI32.wrapI64(
    WasmI64.shrU(WasmI64.and(uv, 0x7FF0000000000000N), 52N)
  )
  let sid = WasmI64.and(uv, 0x000FFFFFFFFFFFFFN)
  let mut frc = WasmI64.add(
    WasmI64.shl(if (WasmI32.eqz(exp)) 0N else 1N, 52N),
    sid
  )
  exp = (if (WasmI32.eqz(exp)) 1n else exp) - (0x3FFn + 52n)

  // normalize boundaries
  let mut frc_norm = WasmI64.add(WasmI64.shl(frc, 1N), 1N)
  let mut exp_norm = exp - 1n
  let off_norm = WasmI64.clz(frc_norm)
  frc_norm = WasmI64.shl(frc_norm, off_norm)
  exp_norm -= WasmI32.wrapI64(off_norm)

  let m_norm = 1n + (if (WasmI64.eq(frc, 0x0010000000000000N)) 1n else 0n)

  let _frc_plus = frc_norm
  let _frc_minus = WasmI64.shl(
    WasmI64.sub(WasmI64.shl(frc, WasmI64.extendI32U(m_norm)), 1N),
    WasmI64.extendI32U(exp - m_norm - exp_norm)
  )
  let _exp = exp_norm

  // get cached power
  let c = WasmF64.reinterpretI64(
    0x3FD34413509F79FEN
  ) // 1 / lg(10) = 0.30102999566398114
  let dk = WasmF64.add(
    WasmF64.mul(WasmF64.convertI32S(-61n - _exp), c),
    347.0W
  ) // dk must be positive, so can do ceiling in positive
  let mut k = WasmI32.truncF64S(dk)
  k += if (WasmF64.ne(WasmF64.convertI32S(k), dk)) 1n
    else 0n // conversion with ceil

  let index = WasmI32.shrS(k, 3n) + 1n
  _K = 348n - (index << 3n) // decimal exponent doesn't need lookup table
  let _frc_pow = WasmI64.load(get_FRC_POWERS() + (index << 3n), 0n)
  let _exp_pow = WasmI32.load16S(get_EXP_POWERS() + (index << 1n), 0n)

  // normalize
  let off = WasmI32.wrapI64(WasmI64.clz(frc))
  frc = WasmI64.shl(frc, WasmI64.extendI32U(off))
  exp -= off

  let frc_pow = _frc_pow
  let exp_pow = _exp_pow

  let w_frc = umul64f(frc, frc_pow)

  let wp_frc = WasmI64.sub(umul64f(_frc_plus, frc_pow), 1N)
  let wp_exp = umul64e(_exp, exp_pow)

  let wm_frc = WasmI64.add(umul64f(_frc_minus, frc_pow), 1N)
  let delta = WasmI64.sub(wp_frc, wm_frc)

  genDigits(buffer, w_frc, wp_frc, wp_exp, delta, sign)
}

@unsafe
let prettify = (buffer, length, k) => {
  let mut length = length
  let kk = length + k
  if (WasmI32.eqz(k)) {
    WasmI32.store16(buffer + length, _CHAR_CODE_DOT | _CHAR_CODE_0 << 8n, 0n)
    length + 2n
  } else if (WasmI32.leS(length, kk) && WasmI32.leS(kk, 21n)) {
    // 1234e7 -> 12340000000
    for (let mut i = length; WasmI32.ltS(i, kk); i += 1n) {
      WasmI32.store8(buffer + i, _CHAR_CODE_0, 0n)
    }
    WasmI32.store16(buffer + kk, _CHAR_CODE_DOT | _CHAR_CODE_0 << 8n, 0n)
    kk + 2n
  } else if (WasmI32.gtS(kk, 0n) && WasmI32.leS(kk, 21n)) {
    // 1234e-2 -> 12.34
    let ptr = buffer + kk
    Memory.copy(ptr + 1n, ptr, 0n - k)
    WasmI32.store8(buffer + kk, _CHAR_CODE_DOT, 0n)
    length + 1n
  } else if (WasmI32.ltS(-6n, kk) && WasmI32.leS(kk, 0n)) {
    // 1234e-6 -> 0.001234
    let offset = 2n - kk
    Memory.copy(buffer + offset, buffer, length)
    WasmI32.store16(buffer, _CHAR_CODE_0 | _CHAR_CODE_DOT << 8n, 0n)
    for (let mut i = 2n; WasmI32.ltS(i, offset); i += 1n) {
      WasmI32.store8(buffer + i, _CHAR_CODE_0, 0n)
    }
    length + offset
  } else if (length == 1n) {
    // 1e30
    WasmI32.store8(buffer, _CHAR_CODE_e, 1n)
    length = genExponent(buffer + 2n, kk - 1n)
    length + 2n
  } else {
    let len = length
    Memory.copy(buffer + 2n, buffer + 1n, len - 1n)
    WasmI32.store8(buffer, _CHAR_CODE_DOT, 1n)
    WasmI32.store8(buffer + len, _CHAR_CODE_e, 1n)
    length += genExponent(buffer + len + 2n, kk - 1n)
    length + 2n
  }
}

@unsafe
let dtoa_core = (buffer, value) => {
  let mut value = value
  let hasSign = WasmF64.lt(value, 0.W)
  if (hasSign) {
    value = WasmF64.neg(value)
    WasmI32.store8(buffer, _CHAR_CODE_MINUS, 0n)
  }
  let sign = if (hasSign) 1n else 0n
  let len = grisu2(value, buffer, sign)
  let len = prettify(buffer + sign, len - sign, _K)
  len + sign
}

@unsafe
let mut _dtoa_buf = -1n

@unsafe
let get_dtoa_buf = () => {
  if (_dtoa_buf == -1n) {
    _dtoa_buf = Memory.malloc(_MAX_DOUBLE_LENGTH)
  }
  _dtoa_buf
}

@unsafe
let isFinite = value => {
  WasmF64.eq(WasmF64.sub(value, value), 0.W)
}

@unsafe
let isNaN = value => {
  WasmF64.ne(value, value)
}

@unsafe
export let dtoa = value => {
  let str = if (WasmF64.eq(value, 0.W)) {
    let ret = allocateString(3n)
    WasmI32.store8(ret, _CHAR_CODE_0, 8n)
    WasmI32.store8(ret, _CHAR_CODE_DOT, 9n)
    WasmI32.store8(ret, _CHAR_CODE_0, 10n)
    ret
  } else if (!isFinite(value)) {
    if (isNaN(value)) {
      let ret = allocateString(3n)
      WasmI32.store(ret, 0x4E614En, 8n) // NaN
      ret
    } else if (WasmF64.lt(value, 0.W)) {
      let ret = allocateString(9n)
      WasmI64.store(ret, 0x74696E69666E492DN, 8n) // tinifnI-
      WasmI32.store8(ret, 0x79n, 16n) // y
      ret
    } else {
      let ret = allocateString(8n)
      WasmI64.store(ret, 0x7974696E69666E49N, 8n) // ytinifnI
      ret
    }
  } else {
    let size = dtoa_core(get_dtoa_buf(), value)
    let result = allocateString(size)
    Memory.copy(result + 8n, get_dtoa_buf(), size)
    result
  }
  WasmI32.toGrain(str): String
}

Memory.utoa32Buffered := utoa32Buffered
Memory.decimalCount32 := decimalCount32
