@runtimeMode
module DataStructures

/**
 * Allocates a new Grain array.
 *
 * @param size: The number of elements to be contained in this array
 * @returns The pointer to the array
 */
provide primitive allocateArray = "@allocate.array"

/**
 * Allocates a new Grain tuple.
 *
 * @param size: The number of elements to be contained in this tuple
 * @returns The pointer to the tuple
 */
provide primitive allocateTuple = "@allocate.tuple"

/**
 * Allocates a new Grain bytes.
 *
 * @param size: The number of bytes to be contained in this buffer
 * @returns The pointer to the bytes
 */
provide primitive allocateBytes = "@allocate.bytes"

/**
 * Gets the array backing a Grain Bytes.
 *
 * @param ref: The Bytes ref
 * @returns The ref to the array
 */
provide primitive getBytesArrayRef = "@bytes.refarray"

/**
 * Allocates a new Grain string.
 *
 * @param size: The size (in bytes) of the string to allocate
 * @returns The pointer to the string
 */
provide primitive allocateString = "@allocate.string"

/**
 * Gets the array backing a Grain string.
 *
 * @param ref: The string ref
 * @returns The ref to the array
 */
provide primitive getStringArrayRef = "@string.refarray"

// INT32/INT64

/**
 * Allocates a new Int32 with a prepopulated value
 *
 * @param int: The value to store
 * @returns The pointer to the Int32
 */
provide primitive newInt32 = "@new.int32"

/**
 * Allocates a new Uint32 with a prepopulated value
 *
 * @param int: The value to store
 * @returns The pointer to the Uint32
 */
provide primitive newUint32 = "@new.uint32"

/**
 * Allocates a new Int64 with a prepopulated value
 *
 * @param int: The value to store
 * @returns The pointer to the Int64
 */
provide primitive newInt64 = "@new.int64"

/**
 * Allocates a new Uint64 with a prepopulated value
 *
 * @param int: The value to store
 * @returns The pointer to the Uint64
 */
provide primitive newUint64 = "@new.uint64"

// FLOATS

/**
 * Allocates a new Float32 with a prepopulated value
 *
 * @param float: The value to store
 * @returns the pointer to the Float32
 */
provide primitive newFloat32 = "@new.float32"

/**
 * Allocates a new Float64 with a prepopulated value
 *
 * @param float: The value to store
 * @returns The pointer to the Float64
 */
provide primitive newFloat64 = "@new.float64"

// RATIONALS

/**
 * Allocates a new Rational with a prepopulated value
 *
 * @param numerator: The numerator value to store
 * @param denominator: The denominator value to store
 * @returns The pointer to the Rational
 */
provide primitive newRational = "@new.rational"

// BIGINTS

/**
 * Allocates a new BigInt with the specified number of limbs
 *
 * @param limbs: The number of limbs
 * @returns The pointer to the BigInt
 */
provide primitive allocateBigInt = "@allocate.bigint"

/**
 * Gets number of limbs of a BigInt.
 *
 * @param ref: The BigInt ref
 * @returns The number of BigInt limbs
 */
provide primitive getBigIntSize = "@bigint.size"

/**
 * Gets the BigInt flags.
 *
 * @param ref: The BigInt ref
 * @returns The BigInt flags
 */
provide primitive getBigIntFlags = "@bigint.flags"

/**
 * Sets the BigInt flags.
 *
 * @param ref: The BigInt ref
 * @param flags: The BigInt flags to set
 */
provide primitive setBigIntFlags = "@bigint.set_flags"

/**
 * Gets the array backing a BigInt.
 *
 * @param ref: The BigInt ref
 * @returns The ref to the BigInt limbs
 */
provide primitive getBigIntArrayRef = "@bigint.refarray"

// BOXED NUMBERS

/**
 * Gets the tag of a Number.
 *
 * @param ref: The Number ref
 * @returns The boxed Number tag
 */
provide primitive getNumberTag = "@boxed_number.get_tag"

/**
 * Gets the value of a boxed Int32
 *
 * @param ref: The Number ref
 * @returns The inner i32
 */
provide primitive getInt32Value = "@boxed_number.get_int32"

/**
 * Gets the value of a boxed Uint32
 *
 * @param ref: The Number ref
 * @returns The inner i32
 */
provide primitive getUint32Value = "@boxed_number.get_uint32"

/**
 * Gets the value of a boxed Float32
 *
 * @param ref: The Number ref
 * @returns The inner f32
 */
provide primitive getFloat32Value = "@boxed_number.get_float32"

/**
 * Gets the value of a boxed Int64
 *
 * @param ref: The Number ref
 * @returns The inner i64
 */
provide primitive getInt64Value = "@boxed_number.get_int64"

/**
 * Gets the value of a boxed Float64
 *
 * @param ref: The Number ref
 * @returns The inner f64
 */
provide primitive getFloat64Value = "@boxed_number.get_float64"

/**
 * Gets the numerator of a boxed Rational
 *
 * @param ref: The Number ref
 * @returns The rational numerator
 */
provide primitive getRationalNumerator = "@boxed_number.get_rational_numerator"

/**
 * Gets the denominator of a boxed Rational
 *
 * @param ref: The Number ref
 * @returns The rational denominator
 */
provide primitive getRationalDenominator = "@boxed_number.get_rational_denominator"

/**
 * Load the (tagged) variant of an ADT.
 *
 * @param ptr: Untagged pointer to the ADT
 * @returns The (tagged) ADT variant id
 */
provide primitive loadAdtVariant = "@adt.load_variant"

/**
 * Load Grain heap value's tag.
 *
 * @param ptr: {ointer to the value
 * @returns The value tag
 */
provide primitive loadValueTag = "@grain_value.load_tag"

/**
 * Load an untagged string's size.
 *
 * @param ptr: Untagged pointer to the string
 * @returns The string size (in bytes)
 */
provide primitive stringSize = "@string.size"

/**
 * Load an untagged Bytes' size.
 *
 * @param ptr: Untagged pointer to the Bytes
 * @returns The Bytes size (in bytes)
 */
provide primitive bytesSize = "@bytes.size"

/**
 * Tag a simple number.
 *
 * @param num: The number to tag
 * @returns The tagged number
 */
provide primitive tagSimpleNumber = "@tag.simple_number"

/**
 * Untag a simple number.
 *
 * @param num: The number to untag
 * @returns The untagged number
 */
provide primitive untagSimpleNumber = "@untag.simple_number"

/**
 * Tag a char.
 *
 * @param char: The usv to tag
 * @returns The tagged char
 */
provide primitive tagChar = "@tag.char"

/**
 * Untag a char.
 *
 * @param char: The char to untag
 * @returns The untagged usv
 */
provide primitive untagChar = "@untag.char"

/**
 * Tag an int8.
 *
 * @param int: The int8 to tag
 * @returns The tagged int8
 */
provide primitive tagInt8 = "@tag.int8"

/**
 * Untag an int8.
 *
 * @param int: The int8 to untag
 * @returns The untagged int8
 */
provide primitive untagInt8 = "@untag.int8"

/**
 * Tag an int16.
 *
 * @param int: The int16 to tag
 * @returns The tagged int16
 */
provide primitive tagInt16 = "@tag.int16"

/**
 * Untag an int16.
 *
 * @param int: The int16 to untag
 * @returns The untagged int16
 */
provide primitive untagInt16 = "@untag.int16"

/**
 * Tag a uint8.
 *
 * @param int: The uint8 to tag
 * @returns The tagged uint8
 */
provide primitive tagUint8 = "@tag.uint8"

/**
 * Untag a uint8.
 *
 * @param int: The uint8 to untag
 * @returns The untagged uint8
 */
provide primitive untagUint8 = "@untag.uint8"

/**
 * Tag a uint16.
 *
 * @param int: The uint16 to tag
 * @returns The tagged uint16
 */
provide primitive tagUint16 = "@tag.uint16"

/**
 * Untag a uint16.
 *
 * @param int: The uint16 to untag
 * @returns The untagged uint16
 */
provide primitive untagUint16 = "@untag.uint16"
