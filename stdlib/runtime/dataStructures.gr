/* grainc-flags --no-pervasives */
module DataStructures

/**
 * Allocates a new Grain array.
 *
 * @param numElts: The number of elements to be contained in this array
 * @returns The pointer to the array
 */
@unsafe
provide primitive allocateArray: WasmI32 -> WasmI32 = "@allocate.array"

/**
 * Allocates a new Grain tuple.
 *
 * @param numElts: The number of elements to be contained in this tuple
 * @returns The pointer to the tuple
 */
@unsafe
provide primitive allocateTuple: WasmI32 -> WasmI32 = "@allocate.tuple"

/**
 * Allocates a new Grain bytes.
 *
 * @param size: The number of bytes to be contained in this buffer
 * @returns The pointer to the bytes
 */
@unsafe
provide primitive allocateBytes: WasmI32 -> WasmI32 = "@allocate.bytes"

/**
 * Allocates a new Grain string.
 *
 * @param size: The size (in bytes) of the string to allocate
 * @returns The pointer to the string
 */
@unsafe
provide primitive allocateString: WasmI32 -> WasmI32 = "@allocate.string"

// INT32/INT64

/**
 * Allocates a new Int32.
 *
 * @returns The pointer to the empty Int32
 */
@unsafe
provide primitive allocateInt32: () -> WasmI32 = "@allocate.int32"

/**
 * Allocates a new Int32 with a prepopulated value
 * @param value: The value to store
 * @returns The pointer to the Int32
 */
@unsafe
provide primitive newInt32: WasmI32 -> WasmI32 = "@new.int32"

/**
 * Allocates a new Int64.
 *
 * @returns The pointer to the empty Int64
 */
@unsafe
provide primitive allocateInt64: () -> WasmI32 = "@allocate.int64"

/**
 * Allocates a new Int64 with a prepopulated value
 * @param value: The value to store
 * @returns The pointer to the Int64
 */
@unsafe
provide primitive newInt64: WasmI64 -> WasmI32 = "@new.int64"

// FLOATS

/**
 * Allocates a new Float32.
 *
 * @returns The pointer to the empty Float32
 */
@unsafe
provide primitive allocateFloat32: () -> WasmI32 = "@allocate.float32"

/**
 * Allocates a new Float32 with a prepopulated value
 * @param value: The value to store
 * @returns the pointer to the Float32
 */
@unsafe
provide primitive newFloat32: WasmF32 -> WasmI32 = "@new.float32"

/**
 * Allocates a new Float64.
 *
 * @returns The pointer to the empty Float64
 */
@unsafe
provide primitive allocateFloat64: () -> WasmI32 = "@allocate.float64"

/**
 * Allocates a new Float64 with a prepopulated value
 * @param value: The value to store
 * @returns The pointer to the Float64
 */
@unsafe
provide primitive newFloat64: WasmF64 -> WasmI32 = "@new.float64"

// RATIONALS

/**
 * Allocates a new Rational.
 *
 * @returns The pointer to the empty Rational
 */
@unsafe
provide primitive allocateRational: () -> WasmI32 = "@allocate.rational"

/**
 * Allocates a new Rational with a prepopulated value
 * @param value: The numerator value to store
 * @param value: The denominator value to store
 * @returns The pointer to the Rational
 */
@unsafe
provide primitive newRational: (WasmI32, WasmI32) -> WasmI32 = "@new.rational"

/**
 * Load the (tagged) variant of an ADT.
 *
 * @param ptr: Untagged pointer to the ADT
 * @returns The (tagged) ADT variant id
 */
@unsafe
provide primitive loadAdtVariant: WasmI32 -> WasmI32 = "@adt.load_variant"

/**
 * Load an untagged string's size.
 *
 * @param ptr: Untagged pointer to the string
 * @returns The string size (in bytes)
 */
@unsafe
provide primitive stringSize: WasmI32 -> WasmI32 = "@string.size"

/**
 * Load an untagged Bytes' size.
 *
 * @param ptr: Untagged pointer to the Bytes
 * @returns The Bytes size (in bytes)
 */
@unsafe
provide primitive bytesSize: WasmI32 -> WasmI32 = "@bytes.size"

/**
 * Tag a simple number.
 *
 * @param num: The number to tag
 * @returns The tagged number
 */
@unsafe
provide primitive tagSimpleNumber: WasmI32 -> Number = "@tag.simple_number"

/**
 * Untag a simple number.
 *
 * @param num: The number to untag
 * @returns The untagged number
 */
@unsafe
provide primitive untagSimpleNumber: Number -> WasmI32 = "@untag.simple_number"

/**
 * Tag a char.
 *
 * @param num: The usv to tag
 * @returns The tagged char
 */
@unsafe
provide primitive tagChar: WasmI32 -> Char = "@tag.char"

/**
 * Untag a char.
 *
 * @param num: The char to untag
 * @returns The untagged usv
 */
@unsafe
provide primitive untagChar: Char -> WasmI32 = "@untag.char"
