/* grainc-flags --no-pervasives */
module DataStructures

/**
 * Allocates a new Grain array.
 *
 * @param numElts: The number of elements to be contained in this array
 * @returns The pointer to the array
 */
@unsafe
provide primitive allocateArray = "@allocate.array"

/**
 * Allocates a new Grain tuple.
 *
 * @param numElts: The number of elements to be contained in this tuple
 * @returns The pointer to the tuple
 */
@unsafe
provide primitive allocateTuple = "@allocate.tuple"

/**
 * Allocates a new Grain bytes.
 *
 * @param size: The number of bytes to be contained in this buffer
 * @returns The pointer to the bytes
 */
@unsafe
provide primitive allocateBytes = "@allocate.bytes"

/**
 * Allocates a new Grain string.
 *
 * @param size: The size (in bytes) of the string to allocate
 * @returns The pointer to the string
 */
@unsafe
provide primitive allocateString = "@allocate.string"

// INT32/INT64

/**
 * Allocates a new Int32.
 *
 * @returns The pointer to the empty Int32
 */
@unsafe
provide primitive allocateInt32 = "@allocate.int32"

/**
 * Allocates a new Int32 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns The pointer to the Int32
 */
@unsafe
provide primitive newInt32 = "@new.int32"

/**
 * Allocates a new Uint32.
 *
 * @returns The pointer to the empty Uint32
 */
@unsafe
provide primitive allocateUint32 = "@allocate.uint32"

/**
 * Allocates a new Uint32 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns The pointer to the Uint32
 */
@unsafe
provide primitive newUint32 = "@new.uint32"

/**
 * Allocates a new Int64.
 *
 * @returns The pointer to the empty Int64
 */
@unsafe
provide primitive allocateInt64 = "@allocate.int64"

/**
 * Allocates a new Int64 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns The pointer to the Int64
 */
@unsafe
provide primitive newInt64 = "@new.int64"

/**
 * Allocates a new Uint64.
 *
 * @returns The pointer to the empty Uint64
 */
@unsafe
provide primitive allocateUint64 = "@allocate.uint64"

/**
 * Allocates a new Uint64 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns The pointer to the Uint64
 */
@unsafe
provide primitive newUint64 = "@new.uint64"

// FLOATS

/**
 * Allocates a new Float32.
 *
 * @returns The pointer to the empty Float32
 */
@unsafe
provide primitive allocateFloat32 = "@allocate.float32"

/**
 * Allocates a new Float32 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns the pointer to the Float32
 */
@unsafe
provide primitive newFloat32 = "@new.float32"

/**
 * Allocates a new Float64.
 *
 * @returns The pointer to the empty Float64
 */
@unsafe
provide primitive allocateFloat64 = "@allocate.float64"

/**
 * Allocates a new Float64 with a prepopulated value
 * 
 * @param value: The value to store
 * @returns The pointer to the Float64
 */
@unsafe
provide primitive newFloat64 = "@new.float64"

// RATIONALS

/**
 * Allocates a new Rational.
 *
 * @returns The pointer to the empty Rational
 */
@unsafe
provide primitive allocateRational = "@allocate.rational"

/**
 * Allocates a new Rational with a prepopulated value
 * 
 * @param value: The numerator value to store
 * @param value: The denominator value to store
 * @returns The pointer to the Rational
 */
@unsafe
provide primitive newRational = "@new.rational"

/**
 * Load the (tagged) variant of an ADT.
 *
 * @param ptr: Untagged pointer to the ADT
 * @returns The (tagged) ADT variant id
 */
@unsafe
provide primitive loadAdtVariant = "@adt.load_variant"

/**
 * Load an untagged string's size.
 *
 * @param ptr: Untagged pointer to the string
 * @returns The string size (in bytes)
 */
@unsafe
provide primitive stringSize = "@string.size"

/**
 * Load an untagged Bytes' size.
 *
 * @param ptr: Untagged pointer to the Bytes
 * @returns The Bytes size (in bytes)
 */
@unsafe
provide primitive bytesSize = "@bytes.size"

/**
 * Tag a simple number.
 *
 * @param num: The number to tag
 * @returns The tagged number
 */
@unsafe
provide primitive tagSimpleNumber = "@tag.simple_number"

/**
 * Untag a simple number.
 *
 * @param num: The number to untag
 * @returns The untagged number
 */
@unsafe
provide primitive untagSimpleNumber = "@untag.simple_number"

/**
 * Tag a char.
 *
 * @param num: The usv to tag
 * @returns The tagged char
 */
@unsafe
provide primitive tagChar = "@tag.char"

/**
 * Untag a char.
 *
 * @param num: The char to untag
 * @returns The untagged usv
 */
@unsafe
provide primitive untagChar = "@untag.char"

/**
 * Tag an int8.
 *
 * @param num: The int8 to tag
 * @returns The tagged int8
 */
@unsafe
provide primitive tagInt8 = "@tag.int8"

/**
 * Untag an int8.
 *
 * @param num: The int8 to untag
 * @returns The untagged int8
 */
@unsafe
provide primitive untagInt8 = "@untag.int8"

/**
 * Tag an int16.
 *
 * @param num: The int16 to tag
 * @returns The tagged int16
 */
@unsafe
provide primitive tagInt16 = "@tag.int16"

/**
 * Untag an int16.
 *
 * @param num: The int16 to untag
 * @returns The untagged int16
 */
@unsafe
provide primitive untagInt16 = "@untag.int16"

/**
 * Tag a uint8.
 *
 * @param num: The uint8 to tag
 * @returns The tagged uint8
 */
@unsafe
provide primitive tagUint8 = "@tag.uint8"

/**
 * Untag a uint8.
 *
 * @param num: The uint8 to untag
 * @returns The untagged uint8
 */
@unsafe
provide primitive untagUint8 = "@untag.uint8"

/**
 * Tag a uint16.
 *
 * @param num: The uint16 to tag
 * @returns The tagged uint16
 */
@unsafe
provide primitive tagUint16 = "@tag.uint16"

/**
 * Untag a uint16.
 *
 * @param num: The uint16 to untag
 * @returns The untagged uint16
 */
@unsafe
provide primitive untagUint16 = "@untag.uint16"
