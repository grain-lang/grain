/* grainc-flags --compilation-mode=runtime */
module GC

/* Notes:
 *
 * Grain's memory system uses a reference-counted garbage collector.
 * It is incumbent upon the compiler (and any external modules which interact
 * with Grain's memory) to make sure that reference counting functionality
 * exists at appropriate places in code.
 *
 * Here is the basic idea for how this looks for an n-byte heap object:
 *
 * [ 32-bit counter ][ 32-bit padding ][ n-bit payload ]
 * ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
 * {start address}                    {pointer used by Grain runtime}
 *
 * Variable Naming Conventions:
 *   rawPtr  : The pointer returned by the call to the external malloc()
 *   userPtr : The pointer returned (and referenced by) to the Grain runtime
 */

include "runtime/malloc" as Malloc
include "runtime/unsafe/tags" as Tags
include "runtime/unsafe/wasmi32" as WasmI32
from WasmI32 use { (+), (-), (*), (&), (==), (!=) }

// Using foreigns directly here to avoid cyclic dependency
foreign wasm fd_write: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) => WasmI32 from "wasi_snapshot_preview1"

primitive (&&) = "@and"
primitive (||) = "@or"
primitive throw = "@throw"
primitive ignore = "@ignore"
primitive box = "@box"
primitive unbox = "@unbox"

exception DecRefError

let mut _DEBUG = false

let _HEADER_SIZE = 8n

let getRefCount = (userPtr: WasmI32) => {
  WasmI32.load(userPtr - _HEADER_SIZE, 0n)
}

let setRefCount = (userPtr: WasmI32, count: WasmI32) => {
  WasmI32.store(userPtr - _HEADER_SIZE, count, 0n)
}

provide let malloc = (size: WasmI32) => {
  // Add space for header
  let rawPtr = Malloc.malloc(size + _HEADER_SIZE)

  // Populate GC header
  WasmI32.store(rawPtr, 1n, 0n)
  WasmI32.store(rawPtr, 0n, 4n)

  // Return pointer past header
  rawPtr + _HEADER_SIZE
}

provide let free = (userPtr: WasmI32) => {
  // Free the raw pointer
  Malloc.free(userPtr - _HEADER_SIZE)
}

provide let incRef = (userPtr: WasmI32) => {
  if (WasmI32.eqz(userPtr & Tags._GRAIN_GENERIC_TAG_MASK) && userPtr != 0n) {
    // if (_DEBUG) {
    //   logIncRef(userPtr, getRefCount(userPtr))
    //   void;
    // }
    setRefCount(userPtr, getRefCount(userPtr) + 1n)
  }
  userPtr
}

let rec decRef = (userPtr: WasmI32, ignoreZeros: Bool) => {
  if (WasmI32.eqz(userPtr & Tags._GRAIN_GENERIC_TAG_MASK) && userPtr != 0n) {
    let refCount = getRefCount(userPtr)
    // if (_DEBUG) {
    //   logDecRef(userPtr, refCount, ignoreZeros)
    //   void
    // }

    if (WasmI32.eqz(refCount)) {
      if (ignoreZeros) {
        userPtr
      } else {
        throw DecRefError
      }
    } else {
      let refCount = refCount - 1n
      setRefCount(userPtr, refCount)

      if (WasmI32.eqz(refCount)) {
        decRefChildren(userPtr)
        free(userPtr)
      }

      userPtr
    }
  } else {
    userPtr
  }
}
and decRefChildren = (userPtr: WasmI32) => {
  match (WasmI32.load(userPtr, 0n)) {
    t when t == Tags._GRAIN_BOXED_NUM_HEAP_TAG => {
      let tag = WasmI32.load(userPtr, 4n)
      if (userPtr == Tags._GRAIN_RATIONAL_BOXED_NUM_TAG) {
        // decRef underlying BigInts
        ignore(decRef(WasmI32.load(userPtr, 8n), false))
        ignore(decRef(WasmI32.load(userPtr, 12n), false))
      }
    },
    t when t == Tags._GRAIN_ADT_HEAP_TAG => {
      let arity = WasmI32.load(userPtr, 16n)
      let maxOffset = arity * 4n
      for (let mut i = 0n; WasmI32.ltU(i, maxOffset); i += 4n) {
        ignore(decRef(WasmI32.load(userPtr + i, 20n), false))
      }
    },
    t when t == Tags._GRAIN_RECORD_HEAP_TAG => {
      let arity = WasmI32.load(userPtr, 12n)
      let maxOffset = arity * 4n
      for (let mut i = 0n; WasmI32.ltU(i, maxOffset); i += 4n) {
        ignore(decRef(WasmI32.load(userPtr + i, 16n), false))
      }
    },
    t when (
      t == Tags._GRAIN_ARRAY_HEAP_TAG || t == Tags._GRAIN_TUPLE_HEAP_TAG
    ) => {
      let arity = WasmI32.load(userPtr, 4n)
      let maxOffset = arity * 4n
      for (let mut i = 0n; WasmI32.ltU(i, maxOffset); i += 4n) {
        ignore(decRef(WasmI32.load(userPtr + i, 8n), false))
      }
    },
    t when t == Tags._GRAIN_LAMBDA_HEAP_TAG => {
      let arity = WasmI32.load(userPtr, 12n)
      let maxOffset = arity * 4n
      for (let mut i = 0n; WasmI32.ltU(i, maxOffset); i += 4n) {
        ignore(decRef(WasmI32.load(userPtr + i, 16n), false))
      }
    },
    _ => {
      // No travelsal necessary for other tags
      void
    },
  }
}

provide let decRef = userPtr => decRef(userPtr, false)
