module Conv

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/wasmi64"
include "runtime/unsafe/wasmf32"
include "runtime/unsafe/wasmf64"
include "runtime/dataStructures"
from DataStructures use {
  newInt32,
  newUint32,
  newInt64,
  newUint64,
  newFloat32,
  newFloat64,
}

@unsafe
provide let toInt32 = n => {
  WasmI32.toGrain(newInt32(n)): Int32
}

@unsafe
provide let toUint32 = n => {
  WasmI32.toGrain(newUint32(n)): Uint32
}

@unsafe
provide let fromInt32 = (n: Int32) => {
  let ptr = WasmI32.fromGrain(n)
  WasmI32.load(ptr, 4n)
}

@unsafe
provide let fromUint32 = (n: Uint32) => {
  let ptr = WasmI32.fromGrain(n)
  WasmI32.load(ptr, 4n)
}

@unsafe
provide let toInt64 = n => {
  WasmI32.toGrain(newInt64(n)): Int64
}

@unsafe
provide let toUint64 = n => {
  WasmI32.toGrain(newUint64(n)): Uint64
}

@unsafe
provide let fromInt64 = (n: Int64) => {
  let ptr = WasmI32.fromGrain(n)
  WasmI64.load(ptr, 8n)
}

@unsafe
provide let fromUint64 = (n: Uint64) => {
  let ptr = WasmI32.fromGrain(n)
  WasmI64.load(ptr, 8n)
}

@unsafe
provide let toFloat32 = n => {
  WasmI32.toGrain(newFloat32(n)): Float32
}

@unsafe
provide let fromFloat32 = (n: Float32) => {
  let ptr = WasmI32.fromGrain(n)
  WasmF32.load(ptr, 4n)
}

@unsafe
provide let toFloat64 = n => {
  WasmI32.toGrain(newFloat64(n)): Float64
}

@unsafe
provide let fromFloat64 = (n: Float64) => {
  let ptr = WasmI32.fromGrain(n)
  WasmF64.load(ptr, 8n)
}

/**
 * Converts a WasmI32 value to Number.
 *
 * @param n: The WasmI32 to convert
 * @returns The value converted to either a simple or a 32 bit heap allocated number.
 */
@unsafe
provide let wasmI32ToNumber = (n: WasmI32) => {
  from WasmI32 use { (^), (<<), (>>), (==) }
  // Follows a little optimization. Instead of testing if n is range of allowed
  // non heap allocated simple numbers (-1073741824n..1073741823n), actually
  // make a simple number, convert it back to WasmI32, and test if it stayed
  // the same. This may sound counter intuitive, but for numbers that fit into
  // the range it is faster than performing the check with WasmI32.geS and
  // WasmI32.leS by about 20%. An additional ~33% is gained by avoiding a
  // call to tagSimpleNumber and instead doing it inline. For the case of
  // numbers not fitting into the range, the cost of these simple ALU
  // instructions are negligible compared to heap allocations.

  // First step: naively convert to simple number, just like tagSimpleNumber.
  // This will overflow for values not in the range, but it's fine.
  let simple = n << 1n ^ 1n

  // Untag it, just like numbers.untagSimple.
  let untagged = simple >> 1n

  if (untagged == n) {
    // Just test if the untagged number is the same. If it didn't overflow, then
    // we're good. We just need to cast the raw value into a Number at the type
    // system level.
    return WasmI32.toGrain(simple): Number
  }

  // If it did overflow, then the value differs and we need to discard it and
  // allocate the number on the heap. We can do this by extending the 32 bit
  // number to an Int64.
  return WasmI32.toGrain(newInt64(WasmI64.extendI32S(n))): Number
}
