/* grainc-flags --compilation-mode=runtime */
module WasmF64

// WebAssembly Memory Instructions
provide primitive load: (WasmI32, WasmI32) -> WasmF64 = "@wasm.load_float64"
provide primitive store: (
  WasmI32,
  WasmF64,
  WasmI32,
) -> Void = "@wasm.store_float64"

// WebAssembly Unary Instructions
provide primitive neg: WasmF64 -> WasmF64 = "@wasm.neg_float64"
provide primitive abs: WasmF64 -> WasmF64 = "@wasm.abs_float64"
provide primitive ceil: WasmF64 -> WasmF64 = "@wasm.ceil_float64"
provide primitive floor: WasmF64 -> WasmF64 = "@wasm.floor_float64"
provide primitive trunc: WasmF64 -> WasmF64 = "@wasm.trunc_float64"
provide primitive nearest: WasmF64 -> WasmF64 = "@wasm.nearest_float64"
provide primitive sqrt: WasmF64 -> WasmF64 = "@wasm.sqrt_float64"

// WebAssembly Binary Instructions
provide primitive add: (WasmF64, WasmF64) -> WasmF64 = "@wasm.add_float64"
provide primitive sub: (WasmF64, WasmF64) -> WasmF64 = "@wasm.sub_float64"
provide primitive mul: (WasmF64, WasmF64) -> WasmF64 = "@wasm.mul_float64"
provide primitive div: (WasmF64, WasmF64) -> WasmF64 = "@wasm.div_float64"
provide primitive copySign: (
  WasmF64,
  WasmF64,
) -> WasmF64 = "@wasm.copy_sign_float64"
provide primitive min: (WasmF64, WasmF64) -> WasmF64 = "@wasm.min_float64"
provide primitive max: (WasmF64, WasmF64) -> WasmF64 = "@wasm.max_float64"
provide primitive eq: (WasmF64, WasmF64) -> Bool = "@wasm.eq_float64"
provide primitive ne: (WasmF64, WasmF64) -> Bool = "@wasm.ne_float64"
provide primitive lt: (WasmF64, WasmF64) -> Bool = "@wasm.lt_float64"
provide primitive le: (WasmF64, WasmF64) -> Bool = "@wasm.le_float64"
provide primitive gt: (WasmF64, WasmF64) -> Bool = "@wasm.gt_float64"
provide primitive ge: (WasmF64, WasmF64) -> Bool = "@wasm.ge_float64"

// WebAssembly Conversion instructions
provide primitive reinterpretI64: WasmI64 -> WasmF64 = "@wasm.reinterpret_int64"
provide primitive convertI32S: WasmI32 -> WasmF64 = "@wasm.convert_s_int32_to_float64"
provide primitive convertI32U: WasmI32 -> WasmF64 = "@wasm.convert_u_int32_to_float64"
provide primitive convertI64S: WasmI64 -> WasmF64 = "@wasm.convert_s_int64_to_float64"
provide primitive convertI64U: WasmI64 -> WasmF64 = "@wasm.convert_u_int64_to_float64"
provide primitive promoteF32: WasmF32 -> WasmF64 = "@wasm.promote_float32"
