@runtimeMode
module Panic

from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ (+) }
from "runtime/unsafe/wasmref" include WasmRef
from "runtime/unsafe/memory" include Memory
from "runtime/malloc" include Malloc

foreign wasm fd_write:
  (WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

primitive unreachable = "@unreachable"
primitive getStringArrayRef = "@string.refarray"

provide let panic = (msg: String) => {
  let msg = getStringArrayRef(WasmRef.fromGrain(msg))
  let msgLen = WasmRef.arrayLen(msg)

  // iov layout: [ <buf ptr> <buf len> <written ptr> <4 byte padding> <buf data> <lf char> ]
  let iov = Malloc.malloc(17n + msgLen)

  let bufPtr = iov + 16n
  let writtenPtr = iov + 8n
  let lf = iov + 36n
  WasmI32.store(iov, bufPtr, 0n)
  WasmI32.store(iov, msgLen + 1n, 4n)
  WasmI32.store(iov, writtenPtr, 8n)
  Memory.copyRefArrayToLinearMemory(bufPtr, msg, msgLen)
  WasmI32.store8(bufPtr, 10n, msgLen)

  fd_write(2n, iov, 2n, writtenPtr)
  unreachable()
}
