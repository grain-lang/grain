/* grainc-flags --compilation-mode=runtime */
module WasmI32

// WebAssembly Memory Instructions
provide primitive load = "@wasm.load_int32"
provide primitive load8S = "@wasm.load_8_s_int32"
provide primitive load8U = "@wasm.load_8_u_int32"
provide primitive load16S = "@wasm.load_16_s_int32"
provide primitive load16U = "@wasm.load_16_u_int32"
provide primitive store = "@wasm.store_int32"
provide primitive store8 = "@wasm.store_8_int32"
provide primitive store16 = "@wasm.store_16_int32"

// WebAssembly Unary Instructions
provide primitive clz = "@wasm.clz_int32"
provide primitive ctz = "@wasm.ctz_int32"
provide primitive popcnt = "@wasm.popcnt_int32"
provide primitive eqz = "@wasm.eq_z_int32"

// WebAssembly Binary Instructions
provide primitive (+) = "@wasm.add_int32"
provide primitive (-) = "@wasm.sub_int32"
provide primitive (*) = "@wasm.mul_int32"
provide primitive (/) = "@wasm.div_s_int32"
provide primitive divU = "@wasm.div_u_int32"
provide primitive remS = "@wasm.rem_s_int32"
provide primitive remU = "@wasm.rem_u_int32"
provide primitive (&) = "@wasm.and_int32"
provide primitive (|) = "@wasm.or_int32"
provide primitive (^) = "@wasm.xor_int32"
provide primitive (<<) = "@wasm.shl_int32"
provide primitive (>>) = "@wasm.shr_s_int32"
provide primitive (>>>) = "@wasm.shr_u_int32"
provide primitive rotl = "@wasm.rot_l_int32"
provide primitive rotr = "@wasm.rot_r_int32"
provide primitive (==) = "@wasm.eq_int32"
provide primitive (!=) = "@wasm.ne_int32"
provide primitive (<) = "@wasm.lt_s_int32"
provide primitive ltU = "@wasm.lt_u_int32"
provide primitive (<=) = "@wasm.le_s_int32"
provide primitive leU = "@wasm.le_u_int32"
provide primitive (>) = "@wasm.gt_s_int32"
provide primitive gtU = "@wasm.gt_u_int32"
provide primitive (>=) = "@wasm.ge_s_int32"
provide primitive geU = "@wasm.ge_u_int32"

// WebAssembly Conversion Instructions
provide primitive wrapI64 = "@wasm.wrap_int64"
provide primitive truncF32S = "@wasm.trunc_s_float32_to_int32"
provide primitive truncF32U = "@wasm.trunc_u_float32_to_int32"
provide primitive truncF64S = "@wasm.trunc_s_float64_to_int32"
provide primitive truncF64U = "@wasm.trunc_u_float64_to_int32"
provide primitive reinterpretF32 = "@wasm.reinterpret_float32"
provide primitive extendS8 = "@wasm.extend_s8_int32"
provide primitive extendS16 = "@wasm.extend_s16_int32"

// Grain Conversions
provide primitive fromGrain = "@wasm.fromGrain"
provide primitive toGrain = "@wasm.toGrain"
