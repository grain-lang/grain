@runtimeMode
module Memory

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmref" include WasmRef
use WasmI32.{ (+), (-), (!=), ltU as (<), gtU as (>) }

primitive arrayI8Get = "@wasm.ref_array_i8_get_u"
primitive arrayI8Set = "@wasm.ref_array_i8_set"

/**
 * Copies the source memory region to the destination memory region. Regions may overlap.
 *
 * @param dest: The destination memory region
 * @param src: The source memory region
 * @param length: The length of the memory region to copy
 */
provide let copy = (dest, src, length) => {
  if (dest != src) {
    if (dest < src) {
      for (let mut i = 0n; i < length; i += 1n) {
        WasmI32.store8(dest, WasmI32.load8U(src, i), i)
      }
    } else {
      // Copy backwards to ensure we do not overwrite on overlapping regions
      for (let mut n = length; n > 0n; n -= 1n) {
        WasmI32.store8(dest + n - 1n, WasmI32.load8U(src + n - 1n, 0n), 0n)
      }
    }
  }
}

/**
 * Fills the given memory region with the given 1-byte value. Values larger than 1 byte will be truncated.
 *
 * @param dest: The destination memory region
 * @param value: The value to fill the memory region with
 * @param length: The length of the memory region to fill
 */
provide let fill = (dest, value, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmI32.store8(dest, value, i)
  }
}

/**
 * Fills the given (array (mut i8)) with the given 1-byte value. Values larger than 1 byte will be truncated.
 *
 * @param dest: The destination array
 * @param offset: The offset in the destination array
 * @param value: The value to fill the array with
 * @param length: The length of the array to fill
 */
provide let fillArrayI8 = (dest, offset, value, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmRef.arrayI8Set(dest, offset + i, value)
  }
}

provide primitive compare = "@wasm.memory_compare"

/**
 * Compares two (array i8).
 *
 * @param first: The first array
 * @param second: The second array
 * @param length: How many elements to check
 */
provide let compareArrayI8 = (first, second, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    let delta = arrayI8Get(first, i) - arrayI8Get(second, i)
    if (delta != 0n) return delta
  }
  return 0n
}

/**
 * Copies data from a (array i8) to linear memory.
 * 
 * @param dest: The destination memory region
 * @param src: The source array
 * @param length: The number of bytes to copy
 */
provide let copyRefArrayToLinearMemory = (dest, src, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmI32.store8(dest, arrayI8Get(src, i), i)
  }
}

/**
 * Copies data from linear memory to a (array mut i8).
 * 
 * @param dest: The destination array
 * @param src: The source memory region
 * @param length: The number of bytes to copy
 */
provide let copyLinearMemoryToRefArray = (dest, src, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    arrayI8Set(dest, i, WasmI32.load(src, i))
  }
}

/**
 * Copies data from a (array i8) to a (array mut i8).
 * 
 * @param dest: The destination array
 * @param destIndex: The destination index
 * @param src: The source array
 * @param srcIndex: The source index
 * @param length: The number of values to copy
 */
provide primitive copyRefArrayI8 = "@wasm.ref_array_i8_copy"

/**
 * Copies data from a (array i64) to a (array mut i64).
 * 
 * @param dest: The destination array
 * @param destIndex: The destination index
 * @param src: The source array
 * @param srcIndex: The source index
 * @param length: The number of values to copy
 */
provide primitive copyRefArrayI64 = "@wasm.ref_array_i64_copy"

/**
 * Copies data from a (array (ref any)) to a (array mut (ref any)).
 * 
 * @param dest: The destination array
 * @param destIndex: The destination index
 * @param src: The source array
 * @param srcIndex: The source index
 * @param length: The number of values to copy
 */
provide primitive copyRefArrayAny = "@wasm.ref_array_any_copy"
