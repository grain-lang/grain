@runtimeMode
module Memory

from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ (+), (-), (!=), ltU as (<), gtU as (>) }

primitive arrayGet = "@wasm.ref_array_i8_get_u"
primitive arraySet = "@wasm.ref_array_i8_set"

/**
 * Copies the source memory region to the destination memory region. Regions may overlap.
 *
 * @param dest: The destination memory region
 * @param src: The source memory region
 * @param length: The length of the memory region to copy
 */
provide let copy = (dest, src, length) => {
  if (dest != src) {
    if (dest < src) {
      for (let mut i = 0n; i < length; i += 1n) {
        WasmI32.store8(dest, WasmI32.load8U(src, i), i)
      }
    } else {
      // Copy backwards to ensure we do not overwrite on overlapping regions
      for (let mut n = length; n > 0n; n -= 1n) {
        WasmI32.store8(dest + n - 1n, WasmI32.load8U(src + n - 1n, 0n), 0n)
      }
    }
  }
}

/**
 * Fills the given memory region with the given 1-byte value. Values larger than 1 byte will be truncated.
 *
 * @param dest: The destination memory region
 * @param value: The value to fill the memory region with
 * @param length: The length of the memory region to fill
 */
provide let fill = (dest, value, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmI32.store8(dest, value, i)
  }
}

provide primitive compare = "@wasm.memory_compare"

/**
 * Copies data from a (ref (array i8)) to linear memory.
 * 
 * @param dest: The destination memory region
 * @param src: The source array
 * @param length: The number of bytes to copy
 */
provide let copyRefArrayToLinearMemory = (dest, src, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmI32.store8(dest, arrayGet(src, i), i)
  }
}

/**
 * Copies data from linear memory to a (ref (array mut i8)).
 * 
 * @param dest: The destination array
 * @param src: The source memory region
 * @param length: The number of bytes to copy
 */
provide let copyLinearMemoryToRefArray = (dest, src, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    arraySet(dest, WasmI32.load(src, i), i)
  }
}
