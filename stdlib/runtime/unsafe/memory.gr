@runtimeMode
module Memory

from "runtime/gc" include GC
use GC.{ malloc, free, incRef, decRef }
from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ (+), (-), (!=), ltU as (<), gtU as (>) }

provide { malloc, free, incRef, decRef }

/**
 * Copies the given memory region into the given destination.
 *
 * @param dest: The destination memory region
 * @param src: The source memory region
 * @param length: The length of the memory region to copy
 */
provide let copy = (dest, src, length) => {
  if (dest != src) {
    if (dest < src) {
      for (let mut i = 0n; i < length; i += 1n) {
        WasmI32.store8(dest, WasmI32.load8U(src, i), i)
      }
    } else {
      // Copy backwards to ensure we do not overwrite on overlapping regions
      for (let mut n = length; n > 0n; n -= 1n) {
        WasmI32.store8(dest + n - 1n, WasmI32.load8U(src + n - 1n, 0n), 0n)
      }
    }
  }
}

/**
 * Fills the given memory region with the given value.
 *
 * @param dest: The destination memory region
 * @param value: The value to fill the memory region with
 * @param length: The length of the memory region to fill
 */
provide let fill = (dest, value, length) => {
  for (let mut i = 0n; i < length; i += 1n) {
    WasmI32.store8(dest, value, i)
  }
}

provide primitive compare = "@wasm.memory_compare"
