import Conv from "runtime/unsafe/conv"
import WasmI32 from "runtime/unsafe/wasmi32"
import Memory from "runtime/unsafe/memory"

// [FIXME] These all leak ATM (grain-lang/grain#791)

@disableGC
export let printI32 = val => {
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(toString))
  let conv = Conv.toInt32(val)
  Memory.incRef(WasmI32.fromGrain(conv))
  Memory.incRef(WasmI32.fromGrain(toString))
  let s1 = toString(conv)
  let s2 = "n"
  Memory.incRef(WasmI32.fromGrain(s1))
  Memory.incRef(WasmI32.fromGrain(s2))
  Memory.incRef(WasmI32.fromGrain((++)))
  let s = s1 ++ s2
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(s))
  print(s)
}

@disableGC
export let printI64 = val => {
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(toString))
  let conv = Conv.toInt64(val)
  Memory.incRef(WasmI32.fromGrain(conv))
  Memory.incRef(WasmI32.fromGrain(toString))
  let s1 = toString(conv)
  let s2 = "N"
  Memory.incRef(WasmI32.fromGrain(s1))
  Memory.incRef(WasmI32.fromGrain(s2))
  Memory.incRef(WasmI32.fromGrain((++)))
  let s = s1 ++ s2
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(s))
  print(s)
}

@disableGC
export let printF32 = val => {
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(toString))
  let conv = Conv.toFloat32(val)
  Memory.incRef(WasmI32.fromGrain(conv))
  Memory.incRef(WasmI32.fromGrain(toString))
  let s1 = toString(conv)
  let s2 = "w"
  Memory.incRef(WasmI32.fromGrain(s1))
  Memory.incRef(WasmI32.fromGrain(s2))
  Memory.incRef(WasmI32.fromGrain((++)))
  let s = s1 ++ s2
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(s))
  print(s)
}

@disableGC
export let printF64 = val => {
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(toString))
  let conv = Conv.toFloat64(val)
  Memory.incRef(WasmI32.fromGrain(conv))
  Memory.incRef(WasmI32.fromGrain(toString))
  let s1 = toString(conv)
  let s2 = "W"
  Memory.incRef(WasmI32.fromGrain(s1))
  Memory.incRef(WasmI32.fromGrain(s2))
  Memory.incRef(WasmI32.fromGrain((++)))
  let s = s1 ++ s2
  Memory.incRef(WasmI32.fromGrain(print))
  Memory.incRef(WasmI32.fromGrain(s))
  print(s)
}
