/* grainc-flags --compilation-mode=runtime */
module Exception

include "runtime/unsafe/wasmi32" as WasmI32
from WasmI32 use { (==), (+), (-) }

foreign wasm fd_write: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) => WasmI32 from "wasi_snapshot_preview1"

primitive unreachable = "@unreachable"

provide let mut printers = 0n

// These functions are dangerous because they leak runtime memory and perform
// no GC operations. As such, they should only be called by this module and/or
// modules that understand these restrictions, namely Pervasives.

provide let dangerouslyRegisterBasePrinter = f => {
  let mut current = printers
  while (true) {
    // There will be at least one printer registered by the time this is called
    let (_, next) = WasmI32.toGrain(current): (
      Exception => Option<String>,
      WasmI32
    )
    if (next == 0n) {
      // Using a tuple in runtime mode is typically disallowed as there is no way
      // to reclaim the memory, but this function is only called once
      let newBase = (WasmI32.fromGrain(f), 0n)
      WasmI32.store(current, WasmI32.fromGrain(newBase), 12n)
      break
    }
    current = next
  }
  // We don't decRef the closure or arguments here to avoid a cyclic dep. on Memory.
  // This is fine, as this function should only be called once.
  void
}

provide let dangerouslyRegisterPrinter = f => {
  printers = WasmI32.fromGrain((f, printers))
  // We don't decRef the closure or arguments here to avoid a cyclic dep. on Memory.
  // This is fine, as this function is only called seldomly.
  void
}

// avoid cirular dependency on gc
let incRef = v => {
  let ptr = WasmI32.fromGrain(v) - 8n
  WasmI32.store(ptr, WasmI32.load(ptr, 0n) + 1n, 0n)
  v
}

let _GENERIC_EXCEPTION_NAME = "GrainException"

let exceptionToString = (e: Exception) => {
  let mut result = _GENERIC_EXCEPTION_NAME
  let mut current = printers
  while (true) {
    if (current == 0n) return result
    let (printer, next) = WasmI32.toGrain(current): (
      Exception => Option<String>,
      WasmI32
    )
    // as GC is not available, manually increment the references
    match (incRef(printer)(incRef(e))) {
      Some(str) => return str,
      None => {
        current = next
      },
    }
  }
  return result
}

// HACK: Allocate static buffer for printing (40 bytes)
// Would be nice to have a better way to allocate a static block from
// the runtime heap, but this is the only module that needs to do it
let iov = WasmI32.fromGrain([> 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n])

provide let panic = (msg: String) => {
  let ptr = WasmI32.fromGrain(msg)
  let written = iov + 32n
  let lf = iov + 36n
  WasmI32.store(iov, ptr + 8n, 0n)
  WasmI32.store(iov, WasmI32.load(ptr, 4n), 4n)
  WasmI32.store8(lf, 10n, 0n)
  WasmI32.store(iov, lf, 8n)
  WasmI32.store(iov, 1n, 12n)
  fd_write(2n, iov, 2n, written)
  unreachable()
}

provide let panicWithException = (e: Exception) => {
  panic(exceptionToString(e))
}

provide exception DivisionByZero
provide exception ModuloByZero
provide exception Overflow
provide exception NumberNotIntlike
provide exception NumberNotRational
provide exception MatchFailure
/*
 * `assert <condition>` is essentially syntactic sugar for:
 * `if (!<condition>) throw AssertionError(<message>)`
 * where <message> is a string injected by the compiler, containing file and line information.
 * This would be better as `AssertionError(String, Number)` to allow the exception printer in
 * this file to construct the error, but constructing a string in this module is impractical as we
 * don't have access to memory allocation since malloc.gr depends on this module.
 */

provide exception InvalidArgument(String)

let runtimeErrorPrinter = e => {
  match (e) {
    IndexOutOfBounds => Some("IndexOutOfBounds: Index out of bounds"),
    IndexNonInteger => Some("IndexNonInteger: Index not an integer"),
    DivisionByZero => Some("DivisionByZero: Division by zero"),
    ModuloByZero => Some("ModuloByZero: Modulo by zero"),
    Overflow => Some("Overflow: Number overflow"),
    NumberNotIntlike =>
      Some("NumberNotIntlike: Can't coerce number to integer"),
    NumberNotRational =>
      Some("NumberNotRational: Can't coerce number to rational"),
    MatchFailure => Some("MatchFailure: No matching pattern"),
    AssertionError(s) => Some(s),
    InvalidArgument(msg) => Some(msg),
    _ => None,
  }
}

dangerouslyRegisterPrinter(runtimeErrorPrinter)
