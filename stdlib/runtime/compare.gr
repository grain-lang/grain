/* grainc-flags --no-pervasives */
module Compare

include "runtime/unsafe/wasmi32" as WasmI32
from WasmI32 use {
  (==),
  (!=),
  (&),
  (^),
  (|),
  (+),
  (-),
  (*),
  (<),
  (>),
  remS as (%),
  (<<),
  (>>>),
}
include "runtime/unsafe/wasmi64" as WasmI64
include "runtime/unsafe/wasmf32" as WasmF32
include "runtime/unsafe/memory" as Memory
include "runtime/unsafe/tags" as Tags
include "runtime/dataStructures" as DataStructures
from DataStructures use { tagSimpleNumber }
include "runtime/numbers" as Numbers
from Numbers use { isNumber, cmp as numberCompare }

primitive (!) = "@not"
primitive (||) = "@or"
primitive (&&) = "@and"

@unsafe
let zero = WasmI32.fromGrain(0)

@unsafe
let rec heapCompareHelp = (heapTag, xptr, yptr) => {
  match (heapTag) {
    t when t == Tags._GRAIN_ADT_HEAP_TAG => {
      // Check if the same constructor variant
      let xvariant = WasmI32.load(xptr, 12n)
      let yvariant = WasmI32.load(yptr, 12n)
      if (xvariant != yvariant) {
        return tagSimpleNumber(xvariant - yvariant)
      }
      let xarity = WasmI32.load(xptr, 16n)
      let yarity = WasmI32.load(yptr, 16n)

      let bytes = xarity * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        let sub = compareHelp(
          WasmI32.load(xptr + i, 20n),
          WasmI32.load(yptr + i, 20n)
        )
        if (WasmI32.fromGrain(sub) != zero) {
          return sub
        }
      }

      return 0
    },
    t when t == Tags._GRAIN_RECORD_HEAP_TAG => {
      let xlength = WasmI32.load(xptr, 12n)
      let ylength = WasmI32.load(yptr, 12n)

      let bytes = xlength * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        let sub = compareHelp(
          WasmI32.load(xptr + i, 16n),
          WasmI32.load(yptr + i, 16n)
        )
        if (WasmI32.fromGrain(sub) != zero) {
          return sub
        }
      }

      return 0
    },
    t when t == Tags._GRAIN_ARRAY_HEAP_TAG => {
      let xlength = WasmI32.load(xptr, 4n)
      let ylength = WasmI32.load(yptr, 4n)

      // Check if the same length
      if (xlength != ylength) {
        return tagSimpleNumber(xlength - ylength)
      }
      let bytes = xlength * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        let sub = compareHelp(
          WasmI32.load(xptr + i, 8n),
          WasmI32.load(yptr + i, 8n)
        )
        if (WasmI32.fromGrain(sub) != zero) {
          return sub
        }
      }

      return 0
    },
    t when (
      t == Tags._GRAIN_STRING_HEAP_TAG || t == Tags._GRAIN_BYTES_HEAP_TAG
    ) => {
      let xlength = WasmI32.load(xptr, 4n)
      let ylength = WasmI32.load(yptr, 4n)

      if (xlength == ylength) {
        return tagSimpleNumber(Memory.compare(xptr + 8n, yptr + 8n, xlength))
      }
      if (xlength < ylength) {
        let sub = Memory.compare(xptr + 8n, yptr + 8n, xlength)
        // The shorter one comes first
        return if (sub == 0n) -1 else tagSimpleNumber(sub)
      } else {
        let sub = Memory.compare(xptr + 8n, yptr + 8n, ylength)
        // The shorter one comes first
        return if (sub == 0n) 1 else tagSimpleNumber(sub)
      }
    },
    t when t == Tags._GRAIN_TUPLE_HEAP_TAG => {
      let xsize = WasmI32.load(xptr, 4n)
      let ysize = WasmI32.load(yptr, 4n)

      let bytes = xsize * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        let sub = compareHelp(
          WasmI32.load(xptr + i, 8n),
          WasmI32.load(yptr + i, 8n)
        )
        if (WasmI32.fromGrain(sub) != zero) {
          return sub
        }
      }

      return 0
    },
    t when t == Tags._GRAIN_INT32_HEAP_TAG => {
      let xval = WasmI32.load(xptr, 4n)
      let yval = WasmI32.load(yptr, 4n)
      return if (xval < yval) -1 else if (xval > yval) 1 else 0
    },
    // Float32 is handled by compareHelp directly
    t when t == Tags._GRAIN_UINT32_HEAP_TAG => {
      let xval = WasmI32.load(xptr, 4n)
      let yval = WasmI32.load(yptr, 4n)
      return if (WasmI32.ltU(xval, yval)) -1 else if (WasmI32.gtU(xval, yval)) 1
      else 0
    },
    t when t == Tags._GRAIN_UINT64_HEAP_TAG => {
      let xval = WasmI64.load(xptr, 8n)
      let yval = WasmI64.load(yptr, 8n)
      return if (WasmI64.ltU(xval, yval)) -1 else if (WasmI64.gtU(xval, yval)) 1
      else 0
    },
    _ => {
      // No other implementation
      return tagSimpleNumber(xptr - yptr)
    },
  }
},
compareHelp = (x, y) => {
  let xtag = x & Tags._GRAIN_GENERIC_TAG_MASK
  let ytag = y & Tags._GRAIN_GENERIC_TAG_MASK
  if ((xtag & ytag) != Tags._GRAIN_GENERIC_HEAP_TAG_TYPE) {
    // Short circuit for non-pointer values
    if ((xtag & Tags._GRAIN_NUMBER_TAG_MASK) == Tags._GRAIN_NUMBER_TAG_TYPE) {
      // Signed comparisons are necessary for numbers
      if (x < y) -1 else if (x > y) 1 else 0
    } else if (xtag == Tags._GRAIN_SHORTVAL_TAG_TYPE) {
      let shortValTag = x & Tags._GRAIN_GENERIC_SHORTVAL_TAG_MASK
      if (
        shortValTag == Tags._GRAIN_INT8_TAG_MASK ||
        shortValTag == Tags._GRAIN_INT16_TAG_MASK
      ) {
        if (x < y) -1 else if (x > y) 1 else 0
      } else {
        if (WasmI32.ltU(x, y)) -1 else if (WasmI32.gtU(x, y)) 1 else 0
      }
    } else {
      // Unsigned comparisons are necessary for other stack-allocated values
      if (WasmI32.ltU(x, y)) -1 else if (WasmI32.gtU(x, y)) 1 else 0
    }
  } else if (isNumber(x)) {
    // Numbers have special comparison rules, e.g. NaN == NaN
    tagSimpleNumber(numberCompare(x, y))
  } else if (WasmI32.load(x, 0n) == Tags._GRAIN_FLOAT32_HEAP_TAG) {
    // Short circuit for Float32 to correctly handle NaN comparisons
    let xval = WasmF32.load(x, 4n)
    let yval = WasmF32.load(y, 4n)
    from WasmF32 use { (!=) }
    let xIsNaN = xval != xval
    let yIsNaN = yval != yval
    if (xIsNaN) {
      if (yIsNaN) 0 else -1
    } else if (yIsNaN) {
      // x is confirmed to be not NaN at this point
      1
    } else {
      from WasmF32 use { (<), (>) }
      if (xval < yval) -1 else if (xval > yval) 1 else 0
    }
  } else {
    // Handle all other heap allocated things
    // Can short circuit if pointers are the same
    if (x == y) {
      0
    } else {
      heapCompareHelp(WasmI32.load(x, 0n), x, y)
    }
  }
}

/**
 * Compares the first argument to the second argument and produces an integer result.
 * Provides a consistent ordering over all types and is suitable for sorting and other kinds of ordering.
 * `compare` treats `NaN` differently than the other comparison operators in that it considers `NaN` equal to itself and smaller than any other number.
 *
 * @param num1: The first operand
 * @param num2: The second operand
 * @returns A negative integer if the first operand is less than the second operand, `0` if they are equal, or a positive integer otherwise
 *
 * @since v0.5.3
 */
@unsafe
provide let compare = (x: a, y: a) => {
  compareHelp(WasmI32.fromGrain(x), WasmI32.fromGrain(y))
}
