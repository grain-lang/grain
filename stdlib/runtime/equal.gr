@noPervasives
module Equal

from "runtime/unsafe/memory" include Memory
from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{
  (==),
  (!=),
  (&),
  (^),
  (+),
  (-),
  (*),
  (<),
  remS as (%),
  (<<),
  (>>),
}
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/tags" include Tags
from "runtime/numbers" include Numbers
use Numbers.{ isNumber, numberEqual }

primitive (!) = "@not"
primitive (||) = "@or"
primitive (&&) = "@and"
primitive ignore = "@ignore"
primitive builtinId = "@builtin.id"

@unsafe
let _LIST_ID = WasmI32.fromGrain(builtinId("List"))

@unsafe
let cycleMarker = 0x80000000n

@unsafe
let rec heapEqualHelp = (heapTag, xptr, yptr) => {
  match (heapTag) {
    t when t == Tags._GRAIN_ADT_HEAP_TAG => {
      // Check if the same constructor variant
      let mut xVariantTag = WasmI32.load(xptr, 12n)
      let mut yVariantTag = WasmI32.load(yptr, 12n)
      if (xVariantTag != yVariantTag) {
        return false
      }

      // Handle lists separately to avoid stack overflow
      if (WasmI32.load(xptr, 8n) == _LIST_ID) {
        if (xVariantTag >> 1n == 1n) return true // End of list

        if (!equalHelp(WasmI32.load(xptr, 20n), WasmI32.load(yptr, 20n))) {
          return false
        }

        return equalHelp(WasmI32.load(xptr, 24n), WasmI32.load(yptr, 24n))
      } else {
        let xarity = WasmI32.load(xptr, 16n)
        let yarity = WasmI32.load(yptr, 16n)

        // Cycle check
        if ((xarity & cycleMarker) == cycleMarker) {
          return true
        }

        WasmI32.store(xptr, xarity ^ cycleMarker, 16n)
        WasmI32.store(yptr, yarity ^ cycleMarker, 16n)

        let bytes = xarity * 4n
        for (let mut i = 0n; i < bytes; i += 4n) {
          if (
            !equalHelp(WasmI32.load(xptr + i, 20n), WasmI32.load(yptr + i, 20n))
          ) {
            WasmI32.store(xptr, xarity, 16n)
            WasmI32.store(yptr, yarity, 16n)
            return false
          }
        }
        WasmI32.store(xptr, xarity, 16n)
        WasmI32.store(yptr, yarity, 16n)

        return true
      }
    },
    t when t == Tags._GRAIN_RECORD_HEAP_TAG => {
      let xlength = WasmI32.load(xptr, 12n)
      let ylength = WasmI32.load(yptr, 12n)

      // Cycle check
      if ((xlength & cycleMarker) == cycleMarker) {
        return true
      }

      WasmI32.store(xptr, xlength ^ cycleMarker, 12n)
      WasmI32.store(yptr, ylength ^ cycleMarker, 12n)

      let bytes = xlength * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        if (
          !equalHelp(WasmI32.load(xptr + i, 16n), WasmI32.load(yptr + i, 16n))
        ) {
          WasmI32.store(xptr, xlength, 12n)
          WasmI32.store(yptr, ylength, 12n)
          return false
        }
      }
      WasmI32.store(xptr, xlength, 12n)
      WasmI32.store(yptr, ylength, 12n)

      return true
    },
    t when t == Tags._GRAIN_ARRAY_HEAP_TAG => {
      let xlength = WasmI32.load(xptr, 4n)
      let ylength = WasmI32.load(yptr, 4n)

      // Check if the same length
      if (xlength != ylength) {
        return false
      }

      // Cycle check
      if ((xlength & cycleMarker) == cycleMarker) {
        return true
      }

      WasmI32.store(xptr, xlength ^ cycleMarker, 4n)
      WasmI32.store(yptr, ylength ^ cycleMarker, 4n)

      let bytes = xlength * 4n
      for (let mut i = 0n; i < bytes; i += 4n) {
        if (!equalHelp(WasmI32.load(xptr + i, 8n), WasmI32.load(yptr + i, 8n))) {
          WasmI32.store(xptr, xlength, 4n)
          WasmI32.store(yptr, ylength, 4n)
          return false
        }
      }

      WasmI32.store(xptr, xlength, 4n)
      WasmI32.store(yptr, ylength, 4n)

      return true
    },
    t when t == Tags._GRAIN_STRING_HEAP_TAG || t == Tags._GRAIN_BYTES_HEAP_TAG => {
      let xlength = WasmI32.load(xptr, 4n)
      let ylength = WasmI32.load(yptr, 4n)

      // Check if the same length
      return if (xlength != ylength) {
        false
      } else {
        Memory.compare(xptr + 8n, yptr + 8n, xlength) == 0n
      }
    },
    t when t == Tags._GRAIN_TUPLE_HEAP_TAG => {
      let xsize = WasmI32.load(xptr, 4n)
      let ysize = WasmI32.load(yptr, 4n)

      if ((xsize & cycleMarker) == cycleMarker) {
        return true
      } else {
        WasmI32.store(xptr, xsize ^ cycleMarker, 4n)
        WasmI32.store(yptr, ysize ^ cycleMarker, 4n)

        let bytes = xsize * 4n
        for (let mut i = 0n; i < bytes; i += 4n) {
          if (
            !equalHelp(WasmI32.load(xptr + i, 8n), WasmI32.load(yptr + i, 8n))
          ) {
            WasmI32.store(xptr, xsize, 4n)
            WasmI32.store(yptr, ysize, 4n)
            return false
          }
        }

        WasmI32.store(xptr, xsize, 4n)
        WasmI32.store(yptr, ysize, 4n)

        return true
      }
    },
    t when t == Tags._GRAIN_UINT32_HEAP_TAG || t == Tags._GRAIN_INT32_HEAP_TAG => {
      let xval = WasmI32.load(xptr, 4n)
      let yval = WasmI32.load(yptr, 4n)
      return xval == yval
    },
    // Float32 is handled by equalHelp directly
    t when t == Tags._GRAIN_UINT64_HEAP_TAG => {
      use WasmI64.{ (==) }
      let xval = WasmI64.load(xptr, 8n)
      let yval = WasmI64.load(yptr, 8n)
      return xval == yval
    },
    // No other implementation
    _ => return xptr == yptr,
  }
}
and equalHelp = (x, y) => {
  if (
    (x & Tags._GRAIN_GENERIC_TAG_MASK) != 0n &&
    (y & Tags._GRAIN_GENERIC_TAG_MASK) != 0n
  ) {
    // Short circuit for non-pointer values
    x == y
  } else if (isNumber(x)) {
    // Numbers have special equality rules, e.g. NaN != NaN
    numberEqual(x, y)
  } else if (WasmI32.load(x, 0n) == Tags._GRAIN_FLOAT32_HEAP_TAG) {
    // Short circuit for Float32 to correctly handle NaN != NaN
    let xval = WasmF32.load(x, 4n)
    let yval = WasmF32.load(y, 4n)
    use WasmF32.{ (==) }
    xval == yval
  } else {
    // Handle all other heap allocated things
    // Can short circuit if pointers are the same
    x == y || heapEqualHelp(WasmI32.load(x, 0n), x, y)
  }
}

/**
 * Check that two values are equal. This checks for structural equality,
 * so it also works for comparing things like tuples and lists.
 *
 * @param value1: The first operand
 * @param value2: The second operand
 * @returns `true` if the values are structurally equal or `false` otherwise
 *
 * @since v0.1.0
 */
@unsafe
provide let equal = (value1: a, value2: a) => {
  let value = equalHelp(WasmI32.fromGrain(value1), WasmI32.fromGrain(value2))
  ignore(value1)
  ignore(value2)
  value
}
