@noPervasives
module DebugPrint

from "runtime/numberUtils" include NumberUtils as Utils
from "runtime/unsafe/wasmi32" include WasmI32
use WasmI32.{ (+) }
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/wasmref" include WasmRef
from "runtime/unsafe/memory" include Memory
from "runtime/malloc" include Malloc
from "runtime/dataStructures" include DataStructures

foreign wasm fd_write:
  (WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

primitive ignore = "@ignore"

@unsafe
provide let print = (msg: String) => {
  let msg = DataStructures.getStringArrayRef(WasmRef.fromGrain(msg))
  let msgLen = WasmRef.arrayLen(msg)

  // iov layout: [ <buf ptr> <buf len> <written ptr> <4 byte padding> <buf data> <lf char> ]
  let iov = Malloc.malloc(17n + msgLen)

  let bufPtr = iov + 16n
  let writtenPtr = iov + 8n
  let lf = iov + 36n
  WasmI32.store(iov, bufPtr, 0n)
  WasmI32.store(iov, msgLen + 1n, 4n)
  WasmI32.store(iov, writtenPtr, 8n)
  Memory.copyRefArrayToLinearMemory(bufPtr, msg, msgLen)
  WasmI32.store8(bufPtr, 10n, msgLen)

  fd_write(2n, iov, 2n, writtenPtr)

  void
}

@unsafe
provide let printI32 = val => {
  print(Utils.itoa32(val, 10n))
}

@unsafe
provide let printI64 = val => {
  print(Utils.itoa64(val, 10n))
}

@unsafe
provide let printF32 = val => {
  print(Utils.dtoa(WasmF64.promoteF32(val)))
}

@unsafe
provide let printF64 = val => {
  print(Utils.dtoa(val))
}

@unsafe
provide let toStringI32 = val => {
  Utils.itoa32(val, 10n)
}

@unsafe
provide let toStringI64 = val => {
  Utils.itoa64(val, 10n)
}

@unsafe
provide let toStringF32 = val => {
  Utils.dtoa(WasmF64.promoteF32(val))
}

@unsafe
provide let toStringF64 = val => {
  Utils.dtoa(val)
}
