module Wasi

from "runtime/unsafe/wasmi32" include WasmI32
from "exception" include Exception
from "runtime/string" include String
use String.{ concat as (++), toString }
from "runtime/dataStructures" include DataStructures
use DataStructures.{ untagSimpleNumber }

// env
provide foreign wasm args_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm args_sizes_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm environ_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm environ_sizes_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

// proc
provide foreign wasm proc_exit: WasmI32 => Void from "wasi_snapshot_preview1"
provide foreign wasm proc_raise:
  WasmI32 => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm sched_yield: () => WasmI32 from "wasi_snapshot_preview1"

// random
provide foreign wasm random_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

// time
provide foreign wasm clock_time_get:
  (WasmI32, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

// file
provide foreign wasm path_open:
  (
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI64,
    WasmI64,
    WasmI32,
    WasmI32,
  ) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_read:
  (WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_pread:
  (WasmI32, WasmI32, WasmI32, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_prestat_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_prestat_dir_name:
  (WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
/**
 * Invokes the `fd_write` system call.
 *
 * @param 0: The file descriptor to write to
 * @param 1: The pointer to the array of iovs to write
 * @param 2: The length of the array of iovs
 * @param 3: Where to store the number of bytes written
 * @returns The number of bytes written
 */
provide foreign wasm fd_write:
  (WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_pwrite:
  (WasmI32, WasmI32, WasmI32, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_allocate:
  (WasmI32, WasmI64, WasmI64) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_close: WasmI32 => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_datasync:
  WasmI32 => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_sync: WasmI32 => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_fdstat_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_fdstat_set_flags:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_fdstat_set_rights:
  (WasmI32, WasmI64, WasmI64) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_filestat_get:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_filestat_set_size:
  (WasmI32, WasmI64) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_filestat_set_times:
  (WasmI32, WasmI64, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_readdir:
  (WasmI32, WasmI32, WasmI32, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_renumber:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_seek:
  (WasmI32, WasmI64, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm fd_tell:
  (WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_create_directory:
  (WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_filestat_get:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_filestat_set_times:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI64, WasmI64, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_link:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_symlink:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_unlink_file:
  (WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_readlink:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_remove_directory:
  (WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"
provide foreign wasm path_rename:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => WasmI32 from "wasi_snapshot_preview1"

// clocks
@unsafe
provide let _CLOCK_REALTIME = 0n
@unsafe
provide let _CLOCK_MONOTONIC = 1n
@unsafe
provide let _CLOCK_PROCESS_CPUTIME = 2n
@unsafe
provide let _CLOCK_THREAD_CPUTIME = 3n

// time

@unsafe
provide let _TIME_SET_ATIM = 1n
@unsafe
provide let _TIME_SET_ATIM_NOW = 2n
@unsafe
provide let _TIME_SET_MTIM = 4n
@unsafe
provide let _TIME_SET_MTIM_NOW = 8n

// lookup flags
@unsafe
provide let _LOOKUP_FLAG_SYMLINK_FOLLOW = 1n

// open flags
@unsafe
provide let _OPEN_FLAG_CREAT = 1n
@unsafe
provide let _OPEN_FLAG_DIRECTORY = 2n
@unsafe
provide let _OPEN_FLAG_EXCL = 4n
@unsafe
provide let _OPEN_FLAG_TRUNC = 8n

// fdflags
@unsafe
provide let _FDFLAG_APPEND = 1n
@unsafe
provide let _FDFLAG_DSYNC = 2n
@unsafe
provide let _FDFLAG_NONBLOCK = 4n
@unsafe
provide let _FDFLAG_RSYNC = 8n
@unsafe
provide let _FDFLAG_SYNC = 16n

// whence
@unsafe
provide let _WHENCE_SET = 0n
@unsafe
provide let _WHENCE_CUR = 1n
@unsafe
provide let _WHENCE_END = 2n

// error codes
@unsafe
provide let _ESUCCESS = 0n
@unsafe
provide let _ETOOBIG = 1n
@unsafe
provide let _EACCES = 2n
@unsafe
provide let _EADDRINUSE = 3n
@unsafe
provide let _EADDRNOTAVAIL = 4n
@unsafe
provide let _EAFNOSUPPORT = 5n
@unsafe
provide let _EAGAIN = 6n
@unsafe
provide let _EALREADY = 7n
@unsafe
provide let _EBADF = 8n
@unsafe
provide let _EBADMSG = 9n
@unsafe
provide let _EBUSY = 10n
@unsafe
provide let _ECANCELED = 11n
@unsafe
provide let _ECHILD = 12n
@unsafe
provide let _ECONNABORTED = 13n
@unsafe
provide let _ECONNREFUSED = 14n
@unsafe
provide let _ECONNRESET = 15n
@unsafe
provide let _EDEADLK = 16n
@unsafe
provide let _EDESTADDRREQ = 17n
@unsafe
provide let _EDOM = 18n
@unsafe
provide let _EDQUOT = 19n
@unsafe
provide let _EEXIST = 20n
@unsafe
provide let _EFAULT = 21n
@unsafe
provide let _EFBIG = 22n
@unsafe
provide let _EHOSTUNREACH = 23n
@unsafe
provide let _EIDRM = 24n
@unsafe
provide let _EILSEQ = 25n
@unsafe
provide let _EINPROGRESS = 26n
@unsafe
provide let _EINTR = 27n
@unsafe
provide let _EINVAL = 28n
@unsafe
provide let _EIO = 29n
@unsafe
provide let _EISCONN = 30n
@unsafe
provide let _EISDIR = 31n
@unsafe
provide let _ELOOP = 32n
@unsafe
provide let _EMFILE = 33n
@unsafe
provide let _EMLINK = 34n
@unsafe
provide let _EMSGSIZE = 35n
@unsafe
provide let _EMULTIHOP = 36n
@unsafe
provide let _ENAMETOOLONG = 37n
@unsafe
provide let _ENETDOWN = 38n
@unsafe
provide let _ENETRESET = 39n
@unsafe
provide let _ENETUNREACH = 40n
@unsafe
provide let _ENFILE = 41n
@unsafe
provide let _ENOBUFS = 42n
@unsafe
provide let _ENODEV = 43n
@unsafe
provide let _ENOENT = 44n
@unsafe
provide let _ENOEXEC = 45n
@unsafe
provide let _ENOLCK = 46n
@unsafe
provide let _ENOLINK = 47n
@unsafe
provide let _ENOMEM = 48n
@unsafe
provide let _ENOMSG = 49n
@unsafe
provide let _ENOPROTOOPT = 50n
@unsafe
provide let _ENOSPC = 51n
@unsafe
provide let _ENOSYS = 52n
@unsafe
provide let _ENOTCONN = 53n
@unsafe
provide let _ENOTDIR = 54n
@unsafe
provide let _ENOTEMPTY = 55n
@unsafe
provide let _ENOTRECOVERABLE = 56n
@unsafe
provide let _ENOTSOCK = 57n
@unsafe
provide let _ENOTSUP = 58n
@unsafe
provide let _ENOTTY = 59n
@unsafe
provide let _ENXIO = 60n
@unsafe
provide let _EOVERFLOW = 61n
@unsafe
provide let _EOWNERDEAD = 62n
@unsafe
provide let _EPERM = 63n
@unsafe
provide let _EPIPE = 64n
@unsafe
provide let _EPROTO = 65n
@unsafe
provide let _EPROTONOSUPPORT = 66n
@unsafe
provide let _EPROTOTYPE = 67n
@unsafe
provide let _ERANGE = 68n
@unsafe
provide let _EROFS = 69n
@unsafe
provide let _ESPIPE = 70n
@unsafe
provide let _ESRCH = 71n
@unsafe
provide let _ESTALE = 72n
@unsafe
provide let _ETIMEDOUT = 73n
@unsafe
provide let _ETXTBSY = 74n
@unsafe
provide let _EXDEV = 75n
@unsafe
provide let _ENOTCAPABLE = 76n

provide exception SystemError(Number)

@disableGC
provide let stringOfSystemError = (code: Number) => {
  use WasmI32.{ (==), (>>) }
  let n = untagSimpleNumber(code)
  match (n) {
    n when n == _ESUCCESS =>
      "SystemError: No error occurred. System call completed successfully.",
    n when n == _ETOOBIG => "SystemError: Argument list too long.",
    n when n == _EACCES => "SystemError: Permission denied.",
    n when n == _EADDRINUSE => "SystemError: Address in use.",
    n when n == _EADDRNOTAVAIL => "SystemError: Address not available.",
    n when n == _EAFNOSUPPORT => "SystemError: Address family not supported.",
    n when n == _EAGAIN =>
      "SystemError: Resource unavailable, or operation would block.",
    n when n == _EALREADY => "SystemError: Connection already in progress.",
    n when n == _EBADF => "SystemError: Bad file descriptor.",
    n when n == _EBADMSG => "SystemError: Bad message.",
    n when n == _EBUSY => "SystemError: Device or resource busy.",
    n when n == _ECANCELED => "SystemError: Operation canceled.",
    n when n == _ECHILD => "SystemError: No child processes.",
    n when n == _ECONNABORTED => "SystemError: Connection aborted.",
    n when n == _ECONNREFUSED => "SystemError: Connection refused.",
    n when n == _ECONNRESET => "SystemError: Connection reset.",
    n when n == _EDEADLK => "SystemError: Resource deadlock would occur.",
    n when n == _EDESTADDRREQ => "SystemError: Destination address required.",
    n when n == _EDOM =>
      "SystemError: Mathematics argument out of domain of function.",
    n when n == _EDQUOT => "SystemError: Reserved.",
    n when n == _EEXIST => "SystemError: File exists.",
    n when n == _EFAULT => "SystemError: Bad address.",
    n when n == _EFBIG => "SystemError: File too large.",
    n when n == _EHOSTUNREACH => "SystemError: Host is unreachable.",
    n when n == _EIDRM => "SystemError: Identifier removed.",
    n when n == _EILSEQ => "SystemError: Illegal byte sequence.",
    n when n == _EINPROGRESS => "SystemError: Operation in progress.",
    n when n == _EINTR => "SystemError: Interrupted function.",
    n when n == _EINVAL => "SystemError: Invalid argument.",
    n when n == _EIO => "SystemError: I/O error.",
    n when n == _EISCONN => "SystemError: Socket is connected.",
    n when n == _EISDIR => "SystemError: Is a directory.",
    n when n == _ELOOP => "SystemError: Too many levels of symbolic links.",
    n when n == _EMFILE => "SystemError: File descriptor value too large.",
    n when n == _EMLINK => "SystemError: Too many links.",
    n when n == _EMSGSIZE => "SystemError: Message too large.",
    n when n == _EMULTIHOP => "SystemError: Reserved.",
    n when n == _ENAMETOOLONG => "SystemError: Filename too long.",
    n when n == _ENETDOWN => "SystemError: Network is down.",
    n when n == _ENETRESET => "SystemError: Connection aborted by network.",
    n when n == _ENETUNREACH => "SystemError: Network unreachable.",
    n when n == _ENFILE => "SystemError: Too many files open in system.",
    n when n == _ENOBUFS => "SystemError: No buffer space available.",
    n when n == _ENODEV => "SystemError: No such device.",
    n when n == _ENOENT => "SystemError: No such file or directory.",
    n when n == _ENOEXEC => "SystemError: Executable file format error.",
    n when n == _ENOLCK => "SystemError: No locks available.",
    n when n == _ENOLINK => "SystemError: Reserved.",
    n when n == _ENOMEM => "SystemError: Not enough space.",
    n when n == _ENOMSG => "SystemError: No message of the desired type.",
    n when n == _ENOPROTOOPT => "SystemError: Protocol not available.",
    n when n == _ENOSPC => "SystemError: No space left on device.",
    n when n == _ENOSYS => "SystemError: Function not supported.",
    n when n == _ENOTCONN => "SystemError: The socket is not connected.",
    n when n == _ENOTDIR =>
      "SystemError: Not a directory or a symbolic link to a directory.",
    n when n == _ENOTEMPTY => "SystemError: Directory not empty.",
    n when n == _ENOTRECOVERABLE => "SystemError: State not recoverable.",
    n when n == _ENOTSOCK => "SystemError: Not a socket.",
    n when n == _ENOTSUP =>
      "SystemError: Not supported, or operation not supported on socket.",
    n when n == _ENOTTY => "SystemError: Inappropriate I/O control operation.",
    n when n == _ENXIO => "SystemError: No such device or address.",
    n when n == _EOVERFLOW =>
      "SystemError: Value too large to be stored in data type.",
    n when n == _EOWNERDEAD => "SystemError: Previous owner died.",
    n when n == _EPERM => "SystemError: Operation not permitted.",
    n when n == _EPIPE => "SystemError: Broken pipe.",
    n when n == _EPROTO => "SystemError: Protocol error.",
    n when n == _EPROTONOSUPPORT => "SystemError: Protocol not supported.",
    n when n == _EPROTOTYPE => "SystemError: Protocol wrong type for socket.",
    n when n == _ERANGE => "SystemError: Result too large.",
    n when n == _EROFS => "SystemError: Read-only file system.",
    n when n == _ESPIPE => "SystemError: Invalid seek.",
    n when n == _ESRCH => "SystemError: No such process.",
    n when n == _ESTALE => "SystemError: Reserved.",
    n when n == _ETIMEDOUT => "SystemError: Connection timed out.",
    n when n == _ETXTBSY => "SystemError: Text file busy.",
    n when n == _EXDEV => "SystemError: Cross-device link.",
    n when n == _ENOTCAPABLE =>
      "SystemError: Extension: Capabilities insufficient.",
    _ => "SystemError: Unknown system error: " ++ toString(code),
  }
}

Exception.registerPrinter(e => {
  match (e) {
    SystemError(n) => Some(stringOfSystemError(n)),
    _ => None,
  }
})
