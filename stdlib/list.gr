// Standard library for list functionality

export *

let init = (length, fn) => {
  // This method can be further improved by checking the length against a specific size
  // and determining if it can be made tail-recursive, then use List.reverse on it.
  // Which would be the same as OCaml does it in https://github.com/ocaml/ocaml/blob/03839754f46319aa36d9dad56940a6f3c3bcb48a/stdlib/list.ml#L79
  let rec iter = (idx, length) => {
    if (idx >= length) {
      []
    } else {
      [fn(idx), ...iter(idx + 1, length)]
    }
  }
  iter(0, length)
}

let length = (list) => {
  let rec iter = (len, list) => {
    match (list) {
      [] => len,
      [_, ...rest] => iter(len + 1, rest)
    }
  }
  iter(0, list)
}

let sum = list => {
  let rec iter = (n, list) => {
    match (list) {
      [] => n,
      [first, ...rest] => iter(n + first, rest)
    }
  }
  iter(0, list)
}

let reverse = (list) => {
  let rec iter = (list, acc) => {
    match (list) {
      [] => acc,
      [first, ...rest] => iter(rest, [first, ...acc])
    }
  }
  iter(list, [])
}

let rec append = (list1, list2) => {
  match (list1) {
    [] => list2,
    [first, ...rest] => [first, ...append(rest, list2)]
  }
}

let rec contains = (value, list) => {
  match (list) {
    [] => false,
    [first, ...rest] => (first == value) || contains(value, rest)
  }
}

let rec reduce = (fn, acc, list) => {
  match (list) {
    [] => acc,
    [first, ...rest] => reduce(fn, fn(acc, first), rest)
  }
}

let rec reduceRight = (fn, acc, list) => {
  match (list) {
    [] => acc,
    [first, ...rest] => fn(first, reduceRight(fn, acc, rest))
  }
}

let rec map = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => [fn(first), ...map(fn, rest)]
  }
}

let mapi = (fn, list) => {
  let rec iter = (fn, list, index) => {
    match (list) {
      [] => [],
      [first, ...rest] => [fn(first, index), ...iter(fn, rest, index + 1)]
    }
  }
  iter(fn, list, 0)
}

let rec flatMap = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => append(fn(first), flatMap(fn, rest))
  }
}

let every = (fn, list) => {
  reduce((acc, value) => { acc && fn(value) }, true, list)
}

let some = (fn, list) => {
  reduce((acc, value) => { acc || fn(value) }, false, list)
}

let rec forEach = (fn, list) => {
  match (list) {
    [] => void,
    [first, ...rest] => {
      fn(first)
      forEach(fn, rest)
    }
  }
}

let forEachi = (fn, list) => {
  let rec iter = (fn, list, index) => {
    match (list) {
      [] => void,
      [first, ...rest] => {
        fn(first, index)
        iter(fn, rest, index + 1)
      }
    }
  }
  iter(fn, list, 0)
}

let rec filter = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => if (fn(first)) [first, ...filter(fn, rest)] else filter(fn, rest)
  }
}

let filteri = (fn, list) => {
  let rec iter = (fn, list, index) => {
    match (list) {
      [] => [],
      [first, ...rest] => if (fn(first, index)) [first, ...iter(fn, rest, index + 1)] else iter(fn, rest, index + 1)
    }
  }
  iter(fn, list, 0)
}

let rec reject = (fn, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => if (!fn(first)) [first, ...reject(fn, rest)] else reject(fn, rest)
  }
}

let head = (list) => {
  match (list) {
    [] => None,
    [first, ..._] => Some(first)
  }
}

let tail = (list) => {
  match (list) {
    [] => None,
    [_, ...rest] => Some(rest)
  }
}

let rec nth = (index, list) => {
  if (index < 0) {
    None
  } else {
    match (list) {
      [] => None,
      [first, ...rest] => if (index == 0) Some(first) else nth(index - 1, rest)
    }
  }
}

let rec flatten = (list) => {
  match (list) {
    [] => [],
    [first, ...rest] => append(first, flatten(rest))
  }
}

let rec insert = (value, index, list) => {
  if (index < 0) {
    fail "insert index cannot be a negative number"
  } else {
    match(list) {
      [] => if (index == 0) [value] else fail "insert index is out-of-bounds",
      [first, ...rest] => if (index == 0) [value, ...list] else [first, ...insert(value, index - 1, rest)]
    }
  }
}

let count = (fn, list) => {
  let rec iter = (n, list) => {
    match (list) {
      [] => n,
      [first, ...rest] => if (fn(first)) iter(n + 1, rest) else iter(n, rest)
    }
  }
  iter(0, list)
}

let part = (count, list) => {
  if (count < 0) {
    fail "part count cannot be a negative number"
  } else {
    let rec iter = (list1, list2, count) => {
      match (list2) {
        [] => if (count > 0) fail "part count is out-of-bounds" else (list1, list2),
        [first, ...rest] => if (count > 0) iter([first, ...list1], rest, count - 1) else (list1, list2)
      }
    }
    let (pt1, pt2) = iter([], list, count)
    (reverse(pt1), pt2)
  }
}

let rotate = (count, list) => {
  let (beginning, end) = if (count >= 0) part(count, list) else part(length(list) + count, list)
  append(end, beginning)
}

let unique = (list) => {
  let rec iter = (list, acc) => {
    match (list) {
      [] => reverse(acc),
      [first, ...rest] => if (contains(first, acc)) iter(rest, acc) else iter(rest, [first, ...acc])
    }
  }
  iter(list, [])
}

let rec drop = (n, list) => {
  if (n < 0) {
    fail "number of items to drop cannot be a negative number"
  } else {
    match ((n, list)) {
      (_,[]) => [],
      (n, _) when n == 0 => list,
      (n, [first, ...rest]) => drop(n - 1, rest)
    }
  }
}

let rec dropWhile = (fn, list) => {
  match (list) {
    [] => list,
    [first, ...rest] => if (fn(first)) dropWhile(fn, rest) else list
  }
}

let rec take = (n, list) => {
  if (n < 0) {
    fail "number of items to take cannot be a negative number"
  } else {
    match ((n, list)) {
      (_, []) => list,
      (n, _) when n == 0 => [],
      (n, [first, ...rest]) => [first, ...take(n-1, rest)]
    }
  }
}

let rec takeWhile = (p, list) => {
  match (list) {
    [] => [],
    [first, ...rest] => if (p(first)) [first, ...takeWhile(p, rest)] else []
  }
}

let rec find = (fn, list) => {
  match (list) {
    [] => None,
    [first, ...rest] => if (fn(first)) Some(first) else find(fn, rest)
  }
}

let findIndex = (fn, list) => {
  let rec findItemIndex = (l, index) => {
    match (l) {
      [] => None,
      [first, ...rest] => if (fn(first)) Some(index) else findItemIndex(rest, index + 1)
    }
  }
  findItemIndex(list, 0)
}

let product = (a, b) => {
  let mut list = []
  forEach((aItem) => {
    forEach((bItem) => {
     list = [(aItem, bItem), ...list]
    },b)
  }, a)
  reverse(list)
}

let sub = (start, length, list) => {
  take(length, drop(start, list))
}

// Join the given list of strings with the given separator
// @param separator: String - The separator to insert between items in the string
// @param items: List<String> - The input strings
// @returns String
let join = (separator: String, items: List<String>) => {
  let rec iter = (sep, acc, rem) => {
    match(rem) {
      [] => acc,
      [hd, ...tl] => {
        let newAcc = match(acc) {
          None => Some(hd),
          Some(s) => Some(hd ++ sep ++ s)
        }
        iter(sep, newAcc, tl)
      }
    }
  }

  // Reverse and reduce to take advantage of TCE
  match(iter(separator, None, reverse(items))) {
    None => "",
    Some(s) => s,
  }
}
