// Standard library for Map (aka HashMap) functionality

import List from "list"
import Array from "array"
import { hash } from "hash"
import Memory from "runtime/unsafe/memory"
import WasmI32 from "runtime/unsafe/wasmi32"
import { allocateArray } from "runtime/dataStructures"

// TODO: Consider implementing this as List<(Box<k>, Box<v>)>
record Bucket<k, v> {
  mut key: k,
  mut value: v,
  mut next: Option<Bucket<k, v>>,
}

record Map<k, v> {
  mut size: Number,
  mut buckets: Array<Option<Bucket<k, v>>>,
}

// TODO: This could take an `eq` function to custom comparisons
export let makeSized = size => {
  let buckets = Array.make(size, None)
  { size: 0, buckets }
}

export let make = () => {
  makeSized(16)
}

let getBucketIndex = (key, buckets) => {
  let bucketsLength = Array.length(buckets)
  let hashedKey = hash(key)
  hashedKey % bucketsLength
}

let rec copyNodeWithNewHash = (oldNode, next, tail) => {
  match (oldNode) {
    None => void,
    Some(node) => {
      let idx = getBucketIndex(node.key, next)
      let newNode = Some(node)
      match (tail[idx]) {
        None => {
          next[idx] = newNode
        },
        Some(tailNode) => {
          // If there's already a tail node, we add this to the end
          tailNode.next = newNode
        },
      }
      // Always place this node as the new tail
      tail[idx] = newNode
      // Recurse with the next node
      copyNodeWithNewHash(node.next, next, tail)
    },
  }
}

let resize = map => {
  let currentBuckets = map.buckets
  let currentSize = Array.length(currentBuckets)
  let nextSize = currentSize * 2
  if (nextSize >= currentSize) {
    let nextBuckets = Array.make(nextSize, None)
    // This tracks the tail nodes so we can set their `next` to None
    let tailNodes = Array.make(nextSize, None)
    map.buckets = nextBuckets
    Array.forEach(old => {
      copyNodeWithNewHash(old, nextBuckets, tailNodes)
    }, currentBuckets)
    Array.forEach(tail => {
      match (tail) {
        None => void,
        Some(node) => {
          node.next = None
        },
      }
    }, tailNodes)
  } else {
    void
  }
}

let rec replaceInBucket = (key, value, node) => {
  if (key == node.key) {
    node.value = value
    false
  } else {
    match (node.next) {
      None => true,
      Some(next) => replaceInBucket(key, value, next),
    }
  }
}

export let set = (key, value, map) => {
  let buckets = map.buckets
  let idx = getBucketIndex(key, buckets)
  let bucket = buckets[idx]
  match (bucket) {
    None => {
      buckets[idx] = Some({ key, value, next: None })
      map.size = incr(map.size)
    },
    Some(node) => {
      if (replaceInBucket(key, value, node)) {
        buckets[idx] = Some({ key, value, next: bucket })
        map.size = incr(map.size)
      }
    },
  }
  // Resize if there are more than 2x the amount of nodes as buckets
  if (map.size > Array.length(buckets) * 2) {
    resize(map)
  } else {
    void
  }
}

let rec valueFromBucket = (key, node) => {
  if (key == node.key) {
    Some(node.value)
  } else {
    match (node.next) {
      None => None,
      Some(next) => valueFromBucket(key, next),
    }
  }
}

export let get = (key, map) => {
  let buckets = map.buckets
  let idx = getBucketIndex(key, buckets)
  let bucket = buckets[idx]
  match (bucket) {
    None => None,
    Some(node) => valueFromBucket(key, node),
  }
}

let rec nodeInBucket = (key, node) => {
  if (key == node.key) {
    true
  } else {
    match (node.next) {
      None => false,
      Some(next) => nodeInBucket(key, next),
    }
  }
}

export let contains = (key, map) => {
  let buckets = map.buckets
  let idx = getBucketIndex(key, buckets)
  let bucket = buckets[idx]
  match (bucket) {
    None => false,
    Some(node) => nodeInBucket(key, node),
  }
}

let rec removeInBucket = (key, node) => {
  match (node.next) {
    None => false,
    Some(next) => {
      if (key == next.key) {
        node.next = next.next
        true
      } else {
        removeInBucket(key, next)
      }
    },
  }
}

export let remove = (key, map) => {
  let buckets = map.buckets
  let idx = getBucketIndex(key, buckets)
  let bucket = buckets[idx]
  match (bucket) {
    None => void,
    Some(node) => {
      // If it is a top-level node, just replace with next node
      if (key == node.key) {
        map.size = decr(map.size)
        buckets[idx] = node.next
      } else {
        if (removeInBucket(key, node)) {
          map.size = decr(map.size)
        }
      }
    },
  }
}

export let update = (key, fn, map) => {
  let val = get(key, map)
  match (fn(val)) {
    Some(next) => set(key, next, map),
    None => remove(key, map),
  }
}

export let size = map => {
  map.size
}

export let isEmpty = map => {
  size(map) == 0
}

export let clear = map => {
  map.size = 0
  let buckets = map.buckets
  Array.forEachi((bucket, idx) => {
    buckets[idx] = None
  }, buckets)
}

let rec forEachBucket = (fn, node) => {
  match (node) {
    None => void,
    Some({ key, value, next }) => {
      fn(key, value)
      forEachBucket(fn, next)
    },
  }
}

export let forEach = (fn, map) => {
  let buckets = map.buckets
  Array.forEach(bucket => {
    forEachBucket(fn, bucket)
  }, buckets)
}

let rec reduceEachBucket = (fn, node, acc) => {
  match (node) {
    None => acc,
    Some({ key, value, next }) =>
      reduceEachBucket(fn, next, fn(acc, key, value)),
  }
}

export let reduce = (fn, init, map) => {
  let buckets = map.buckets
  let mut acc = init
  Array.forEach(bucket => {
    acc = reduceEachBucket(fn, bucket, acc)
  }, buckets)
  acc
}

export let keys = map => {
  reduce((list, key, _value) => [key, ...list], [], map)
}

export let values = map => {
  reduce((list, _key, value) => [value, ...list], [], map)
}

export let toList = map => {
  reduce((list, key, value) => [(key, value), ...list], [], map)
}

export let fromList = list => {
  let map = make()
  List.forEach(pair => {
    let (key, value) = pair
    set(key, value, map)
  }, list)
  map
}

let setInArray = array => {
  @disableGC
  let rec iter = (i, key, value) => {
    array[i] = (key, value)
    // no decRef on key and value, since they are stored in array
    Memory.decRef(WasmI32.fromGrain(iter))
    i + 1
  }
  iter
}

@disableGC
export let rec toArray = map => {
  let length = WasmI32.shrS(WasmI32.fromGrain(map.size), 1n)
  let array = WasmI32.toGrain(allocateArray(length)): (Array<a>)
  Memory.incRef(WasmI32.fromGrain(setInArray))
  Memory.incRef(WasmI32.fromGrain(array))
  let setInArray = setInArray(array)
  Memory.incRef(WasmI32.fromGrain(reduce))
  Memory.incRef(WasmI32.fromGrain(setInArray))
  Memory.incRef(WasmI32.fromGrain(map))
  reduce(setInArray, 0, map)
  Memory.decRef(WasmI32.fromGrain(setInArray))
  Memory.decRef(WasmI32.fromGrain(map))
  Memory.decRef(WasmI32.fromGrain(toArray))
  array
}

export let fromArray = array => {
  let map = make()
  Array.forEach(pair => {
    let (key, value) = pair
    set(key, value, map)
  }, array)
  map
}

export let filter = (predicate, map) => {
  let keysToRemove = reduce((list, key, value) => if (!predicate(key, value)) {
    [key, ...list]
  } else {
    list
  }, [], map)
  List.forEach(key => {
    remove(key, map)
  }, keysToRemove)
}

export let reject = (predicate, map) => {
  filter((key, value) => !predicate(key, value), map)
}

// TODO: Should return a Record type instead of a Tuple
// Waiting on https://github.com/grain-lang/grain/issues/190
export let getInternalStats = map => {
  (map.size, Array.length(map.buckets))
}
