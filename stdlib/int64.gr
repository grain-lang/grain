/**
 * Utilities for working with the Int64 type.
 *
 * @example include "int64"
 *
 * @since v0.2.0
 */

module Int64

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/wasmi64"
from WasmI64 use {
  (==),
  (!=),
  (&),
  (|),
  (^),
  (+),
  (-),
  (*),
  (/),
  (<<),
  (>>),
  (<),
  (<=),
  (>),
  (>=),
}
include "runtime/exception"

include "runtime/dataStructures"
from DataStructures use { newInt64 }

include "runtime/numbers"
from Numbers use {
  coerceNumberToInt64 as fromNumber,
  coerceInt64ToNumber as toNumber,
}

provide { fromNumber, toNumber }

/**
 * Converts a Uint64 to an Int64.
 *
 * @param number: The value to convert
 * @returns The Uint64 represented as an Int64
 *
 * @since v0.6.0
 */
@unsafe
provide let fromUint64 = (x: Uint64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let result = newInt64(x)
  WasmI32.toGrain(result): Int64
}

/**
 * Increments the value by one.
 *
 * @param value: The value to increment
 * @returns The incremented value
 *
 * @since v0.2.0
 */
@unsafe
provide let incr = (value: Int64) => {
  let value = WasmI32.fromGrain(value)
  let ptr = newInt64(WasmI64.load(value, 8n) + 1N)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Decrements the value by one.
 *
 * @param value: The value to decrement
 * @returns The decremented value
 *
 * @since v0.2.0
 */
@unsafe
provide let decr = (value: Int64) => {
  let value = WasmI32.fromGrain(value)
  let ptr = newInt64(WasmI64.load(value, 8n) - 1N)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let add = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv + yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let sub = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv - yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let mul = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv * yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the quotient of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @since v0.2.0
 */
@unsafe
provide let div = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv / yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the remainder of the division of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @since v0.2.0
 */
@unsafe
provide let rem = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remS(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

@unsafe
let abs = n => {
  let mask = n >> 63N
  (n ^ mask) - mask
}

/**
 * Computes the remainder of the division of the first operand by the second.
 * The result will have the sign of the second operand.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The modulus of its operands
 *
 * @throws ModuloByZero: When `y` is zero
 *
 * @since v0.2.0
 */
@unsafe
provide let mod = (x: Int64, y: Int64) => {
  let xval = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yval = WasmI64.load(WasmI32.fromGrain(y), 8n)

  if (WasmI64.eqz(yval)) {
    throw Exception.ModuloByZero
  }

  let ptr = if ((xval ^ yval) < 0N) {
    let xabs = abs(xval)
    let yabs = abs(yval)
    let mval = WasmI64.remS(xabs, yabs)
    let mres = yabs - mval
    newInt64(if (mval != 0N) (if (yval < 0N) 0N - mres else mres) else 0N)
  } else {
    newInt64(WasmI64.remS(xval, yval))
  }
  WasmI32.toGrain(ptr): Int64
}

/**
 * Rotates the bits of the value left by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @since v0.4.0
 */
@unsafe
provide let rotl = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(WasmI64.rotl(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Rotates the bits of the value right by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @since v0.4.0
 */
@unsafe
provide let rotr = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(WasmI64.rotr(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Shifts the bits of the value left by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The number of bits to shift by
 * @returns The shifted value
 *
 * @since v0.2.0
 */
@unsafe
provide let shl = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(xv << yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Shifts the bits of the value right by the given number of bits, preserving the sign bit.
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @since v0.2.0
 */
@unsafe
provide let shr = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(xv >> yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Checks if the first value is equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is equal to the second value or `false` otherwise
 *
 * @since v0.4.0
 */
@unsafe
provide let eq = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv == yv
}

/**
 * Checks if the first value is not equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is not equal to the second value or `false` otherwise
 *
 * @since v0.4.0
 */
@unsafe
provide let ne = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv != yv
}

/**
 * Checks if the given value is equal to zero.
 *
 * @param value: The value to inspect
 * @returns `true` if the first value is equal to zero or `false` otherwise
 *
 * @since v0.4.0
 */
@unsafe
provide let eqz = (value: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  WasmI64.eqz(xv)
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let lt = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let gt = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let lte = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let gte = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv >= yv
}

/**
 * Computes the bitwise NOT of the given value.
 *
 * @param value: The given value
 * @returns Containing the inverted bits of the given value
 *
 * @since v0.2.0
 */
@unsafe
provide let lnot = (value: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(xv ^ 0xffffffffffffffffN)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise AND (`&`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of both operands are `1`
 *
 * @since v0.2.0
 */
@unsafe
provide let land = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv & yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise OR (`|`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either or both operands are `1`
 *
 * @since v0.2.0
 */
@unsafe
provide let lor = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv | yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise XOR (`^`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either but not both operands are `1`
 *
 * @since v0.2.0
 */
@unsafe
provide let lxor = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv ^ yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of leading zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of leading zeros
 *
 * @since v0.4.0
 */
@unsafe
provide let clz = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.clz(nv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of trailing zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of trailing zeros
 *
 * @since v0.4.0
 */
@unsafe
provide let ctz = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.ctz(nv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of bits set to `1` in the value, also known as a population count.
 *
 * @param value: The value to inspect
 * @returns The amount of 1-bits in its operand
 *
 * @since v0.4.0
 */
@unsafe
provide let popcnt = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.popcnt(nv))
  WasmI32.toGrain(ptr): Int64
}
