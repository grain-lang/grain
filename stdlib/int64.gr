import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Errors from "runtime/unsafe/errors"

import foreign wasm throwError: (WasmI32, WasmI32, WasmI32) -> a from "grainRuntime"

import {
  newInt64
} from "runtime/dataStructures"

import {
  coerceNumberToInt64 as fromNumber,
  coerceInt64ToNumber as toNumber
} from "runtime/numbers"

export fromNumber
export toNumber

@disableGC
export let incr = (n: Int64) => {
  let n = WasmI32.fromGrain(n)
  let ptr = newInt64(WasmI64.add(WasmI64.load(n, 8n), 1N))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let decr = (n: Int64) => {
  let n = WasmI32.fromGrain(n)
  let ptr = newInt64(WasmI64.sub(WasmI64.load(n, 8n), 1N))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let add = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.add(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let sub = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.sub(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let mul = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.mul(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let div = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.divS(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let divU = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.divU(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let rem = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remS(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let remU = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remU(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
let abs = (n) => {
  let mask = WasmI64.shrS(n, 63N)
  WasmI64.sub(WasmI64.xor(n, mask), mask)
}

@disableGC
export let mod = (x: Int64, y: Int64) => {
  let xval = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yval = WasmI64.load(WasmI32.fromGrain(y), 8n)

  if (WasmI64.eqz(yval)) {
    throwError(Errors._GRAIN_ERR_MODULO_BY_ZERO, 0n, 0n)
  }

  let ptr = if (WasmI64.ltS(WasmI64.xor(xval, yval), 0N)) {
    let xabs = abs(xval)
    let yabs = abs(yval)
    let mval = WasmI64.remS(xabs, yabs)
    let mres = WasmI64.sub(yabs, mval)
    newInt64(if (WasmI64.ne(mval, 0N)) (if (WasmI64.ltS(yval, 0N)) WasmI64.sub(0N, mres) else mres) else 0N)
  } else {
    newInt64(WasmI64.remS(xval, yval))
  }
  WasmI32.toGrain(ptr): Int64
}

// Int64 comparisons

@disableGC
export let lt = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  WasmI64.ltS(x, y)
}

@disableGC
export let gt = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  WasmI64.gtS(x, y)
}

@disableGC
export let lte = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  WasmI64.leS(x, y)
}

@disableGC
export let gte = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  WasmI64.geS(x, y)
}

// Int64 bit/logical operations
@disableGC
export let lnot = (x: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let ptr = newInt64(WasmI64.xor(x, 0xffffffffffffffffN))
  WasmI32.toGrain(ptr): Int64
}


@disableGC
export let land = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.and(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let lor = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.or(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let lxor = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.xor(x, y))
  WasmI32.toGrain(ptr): Int64
}


@disableGC
export let shl = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shl(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let shr = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shrS(x, y))
  WasmI32.toGrain(ptr): Int64
}

@disableGC
export let shrU = (x: Int64, y: Int64) => {
  let x = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let y = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shrU(x, y))
  WasmI32.toGrain(ptr): Int64
}
