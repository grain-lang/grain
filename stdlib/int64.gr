import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Exception from "runtime/exception"
import Memory from "runtime/unsafe/memory"

import {
  newInt64
} from "runtime/dataStructures"

import {
  coerceNumberToInt64 as fromNumber,
  coerceInt64ToNumber as toNumber
} from "runtime/numbers"

export fromNumber
export toNumber

@disableGC
export let rec incr = (n: Int64) => {
  let n = WasmI32.fromGrain(n)
  let ptr = newInt64(WasmI64.add(WasmI64.load(n, 8n), 1N))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(n)
  Memory.decRef(WasmI32.fromGrain(incr))
  ret
}

@disableGC
export let decr = (n: Int64) => {
  let n = WasmI32.fromGrain(n)
  let ptr = newInt64(WasmI64.sub(WasmI64.load(n, 8n), 1N))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(n)
  Memory.decRef(WasmI32.fromGrain(decr))
  ret
}

@disableGC
export let rec add = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.add(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(add))
  ret
}

@disableGC
export let rec sub = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.sub(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(sub))
  ret
}

@disableGC
export let rec mul = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.mul(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(mul))
  ret
}

@disableGC
export let rec div = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.divS(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(div))
  ret
}

@disableGC
export let rec divU = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.divU(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(divU))
  ret
}

@disableGC
export let rec rem = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remS(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(rem))
  ret
}

@disableGC
export let rec remU = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remU(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(remU))
  ret
}

@disableGC
let abs = (n) => {
  let mask = WasmI64.shrS(n, 63N)
  WasmI64.sub(WasmI64.xor(n, mask), mask)
}

@disableGC
export let rec mod = (x: Int64, y: Int64) => {
  let xval = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yval = WasmI64.load(WasmI32.fromGrain(y), 8n)

  if (WasmI64.eqz(yval)) {
    throw Exception.ModuloByZero
  }

  let ptr = if (WasmI64.ltS(WasmI64.xor(xval, yval), 0N)) {
    let xabs = abs(xval)
    let yabs = abs(yval)
    let mval = WasmI64.remS(xabs, yabs)
    let mres = WasmI64.sub(yabs, mval)
    newInt64(if (WasmI64.ne(mval, 0N)) (if (WasmI64.ltS(yval, 0N)) WasmI64.sub(0N, mres) else mres) else 0N)
  } else {
    newInt64(WasmI64.remS(xval, yval))
  }
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(mod))
  ret
}

// Int64 comparisons

@disableGC
export let rec lt = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmI64.ltS(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lt))
  ret
}

@disableGC
export let rec gt = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmI64.gtS(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(gt))
  ret
}

@disableGC
export let rec lte = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmI64.leS(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lte))
  ret
}

@disableGC
export let rec gte = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ret = WasmI64.geS(xv, yv)
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(gte))
  ret
}

// Int64 bit/logical operations
@disableGC
export let rec lnot = (x: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let ptr = newInt64(WasmI64.xor(xv, 0xffffffffffffffffN))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(lnot))
  ret
}


@disableGC
export let rec land = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.and(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(land))
  ret
}

@disableGC
export let rec lor = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.or(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lor))
  ret
}

@disableGC
export let rec lxor = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.xor(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(lxor))
  ret
}


@disableGC
export let rec shl = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shl(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(shl))
  ret
}

@disableGC
export let rec shr = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shrS(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(shr))
  ret
}

@disableGC
export let rec shrU = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.shrU(xv, yv))
  let ret = WasmI32.toGrain(ptr): Int64
  Memory.decRef(WasmI32.fromGrain(x))
  Memory.decRef(WasmI32.fromGrain(y))
  Memory.decRef(WasmI32.fromGrain(shrU))
  ret
}
