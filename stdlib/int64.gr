/**
 * Utilities for working with the Int64 type.
 *
 * @example from "int64" include Int64
 *
 * @example 1L
 * @example -1L
 *
 * @since v0.2.0
 */
module Int64

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
use WasmI64.{ (==), (!=), (&), (|), (^), (<<), (>>), (<), (<=), (>), (>=) }
from "runtime/exception" include Exception

from "runtime/dataStructures" include DataStructures
use DataStructures.{ newInt64 }

from "runtime/numbers" include Numbers
use Numbers.{
  coerceNumberToInt64 as fromNumber,
  coerceInt64ToNumber as toNumber,
}

provide { fromNumber, toNumber }

/**
 * Converts a Uint64 to an Int64.
 *
 * @param number: The value to convert
 * @returns The Uint64 represented as an Int64
 *
 * @example Int64.fromUint64(1uL) == 1L
 *
 * @since v0.6.0
 */
@unsafe
provide let fromUint64 = (number: Uint64) => {
  let x = WasmI64.load(WasmI32.fromGrain(number), 8n)
  let result = newInt64(x)
  WasmI32.toGrain(result): Int64
}

/**
 * Increments the value by one.
 *
 * @param value: The value to increment
 * @returns The incremented value
 *
 * @example Int64.incr(1L) == 2L
 * @example Int64.incr(-2L) == -1L
 *
 * @since v0.2.0
 */
@unsafe
provide let incr = (value: Int64) => {
  use WasmI64.{ (+) }
  let value = WasmI32.fromGrain(value)
  let ptr = newInt64(WasmI64.load(value, 8n) + 1N)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Decrements the value by one.
 *
 * @param value: The value to decrement
 * @returns The decremented value
 *
 * @example Int64.decr(2L) == 1L
 * @example Int64.decr(0L) == -1L
 *
 * @since v0.2.0
 */
@unsafe
provide let decr = (value: Int64) => {
  use WasmI64.{ (-) }
  let value = WasmI32.fromGrain(value)
  let ptr = newInt64(WasmI64.load(value, 8n) - 1N)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @example
 * use Int64.{ (+) }
 * assert 1L + 1L == 2L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `add`
 */
@unsafe
provide let (+) = (x: Int64, y: Int64) => {
  use WasmI64.{ (+) }
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv + yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @example
 * use Int64.{ (-) }
 * assert 2L - 1L == 1L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `sub`
 */
@unsafe
provide let (-) = (x: Int64, y: Int64) => {
  use WasmI64.{ (-) }
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv - yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @example
 * use Int64.{ (*) }
 * assert 2L * 2L == 4L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `*`
 */
@unsafe
provide let (*) = (x: Int64, y: Int64) => {
  use WasmI64.{ (*) }
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv * yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the quotient of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @example
 * use Int64.{ (/) }
 * assert 8L / 2L == 4L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `div`
 */
@unsafe
provide let (/) = (x: Int64, y: Int64) => {
  use WasmI64.{ (/) }
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv / yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the remainder of the division of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @example Int64.rem(8L, 3L) == 2L
 *
 * @since v0.2.0
 */
@unsafe
provide let rem = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(WasmI64.remS(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

@unsafe
let abs = n => {
  use WasmI64.{ (-) }
  let mask = n >> 63N
  (n ^ mask) - mask
}

/**
 * Computes the remainder of the division of the first operand by the second.
 * The result will have the sign of the second operand.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The modulus of its operands
 *
 * @throws ModuloByZero: When `y` is zero
 *
 * @example
 * use Int64.{ (%) }
 * assert -5L % 3L == 1L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `mod`
 */
@unsafe
provide let (%) = (x: Int64, y: Int64) => {
  use WasmI64.{ (-) }
  let xval = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yval = WasmI64.load(WasmI32.fromGrain(y), 8n)

  if (WasmI64.eqz(yval)) {
    throw Exception.ModuloByZero
  }

  let ptr = if ((xval ^ yval) < 0N) {
    let xabs = abs(xval)
    let yabs = abs(yval)
    let mval = WasmI64.remS(xabs, yabs)
    let mres = yabs - mval
    newInt64(if (mval != 0N) (if (yval < 0N) 0N - mres else mres) else 0N)
  } else {
    newInt64(WasmI64.remS(xval, yval))
  }
  WasmI32.toGrain(ptr): Int64
}

/**
 * Rotates the bits of the value left by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @example Int64.rotl(1L, 1L) == 2L
 * @example Int64.rotl(1L, 2L) == 4L
 *
 * @since v0.4.0
 */
@unsafe
provide let rotl = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(WasmI64.rotl(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Rotates the bits of the value right by the given number of bits.
 *
 * @param value: The value to rotate
 * @param amount: The number of bits to rotate by
 * @returns The rotated value
 *
 * @example Int64.rotr(2L, 1L) == 1L
 * @example Int64.rotr(4L, 2L) == 1L
 *
 * @since v0.4.0
 */
@unsafe
provide let rotr = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(WasmI64.rotr(xv, yv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Shifts the bits of the value left by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The number of bits to shift by
 * @returns The shifted value
 *
 * @example
 * use Int64.{ (<<) }
 * assert (5L << 1L) == 10L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `shl`
 */
@unsafe
provide let (<<) = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(xv << yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Shifts the bits of the value right by the given number of bits, preserving the sign bit.
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @example
 * use Int64.{ (>>) }
 * assert (5L >> 1L) == 2L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `shr`
 */
@unsafe
provide let (>>) = (value: Int64, amount: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(amount), 8n)
  let ptr = newInt64(xv >> yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Checks if the first value is equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is equal to the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (==) }
 * assert 1L == 1L
 *
 * @since v0.6.0
 * @history v0.4.0: Originally named `eq`
 */
@unsafe
provide let (==) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv == yv
}

/**
 * Checks if the first value is not equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is not equal to the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (!=) }
 * assert 1L != 2L
 *
 * @since v0.6.0
 * @history v0.4.0: Originally named `ne`
 */
@unsafe
provide let (!=) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv != yv
}

/**
 * Checks if the given value is equal to zero.
 *
 * @param value: The value to inspect
 * @returns `true` if the first value is equal to zero or `false` otherwise
 *
 * @example Int64.eqz(0L) == true
 * @example Int64.eqz(1L) == false
 *
 * @since v0.4.0
 */
@unsafe
provide let eqz = (value: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  WasmI64.eqz(xv)
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (<) }
 * assert 1L < 2L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lt`
 */
@unsafe
provide let (<) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (>) }
 * assert 2L > 1L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gt`
 */
@unsafe
provide let (>) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (<=) }
 * assert 1L <= 2L
 * @example
 * use Int64.{ (<=) }
 * assert 1L <= 1L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lte`
 */
@unsafe
provide let (<=) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @example
 * use Int64.{ (>=) }
 * assert 2L >= 1L
 * @example
 * use Int64.{ (>=) }
 * assert 1L >= 1L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gte`
 */
@unsafe
provide let (>=) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  xv >= yv
}

/**
 * Computes the bitwise NOT of the given value.
 *
 * @param value: The given value
 * @returns Containing the inverted bits of the given value
 *
 * @example Int64.lnot(-5L) == 4L
 *
 * @since v0.2.0
 */
@unsafe
provide let lnot = (value: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(xv ^ 0xffffffffffffffffN)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise AND (`&`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of both operands are `1`
 *
 * @example
 * use Int64.{ (&) }
 * assert (3L & 4L) == 0L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `land`
 */
@unsafe
provide let (&) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv & yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise OR (`|`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either or both operands are `1`
 *
 * @example
 * use Int64.{ (|) }
 * assert (3L | 4L) == 7L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lor`
 */
@unsafe
provide let (|) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv | yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Computes the bitwise XOR (`^`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either but not both operands are `1`
 *
 * @example
 * use Int64.{ (^) }
 * assert (3L ^ 5L) == 6L
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lxor`
 */
@unsafe
provide let (^) = (x: Int64, y: Int64) => {
  let xv = WasmI64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmI64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newInt64(xv ^ yv)
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of leading zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of leading zeros
 *
 * @example Int64.clz(1L) == 63L
 * @example Int64.clz(4L) == 61L
 *
 * @since v0.4.0
 */
@unsafe
provide let clz = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.clz(nv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of trailing zero bits in the value.
 *
 * @param value: The value to inspect
 * @returns The amount of trailing zeros
 *
 * @example Int64.ctz(1L) == 0L
 * @example Int64.ctz(4L) == 2L
 *
 * @since v0.4.0
 */
@unsafe
provide let ctz = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.ctz(nv))
  WasmI32.toGrain(ptr): Int64
}

/**
 * Counts the number of bits set to `1` in the value, also known as a population count.
 *
 * @param value: The value to inspect
 * @returns The amount of 1-bits in its operand
 *
 * @example Int64.popcnt(1L) == 1L
 * @example Int64.popcnt(3L) == 2L
 *
 * @since v0.4.0
 */
@unsafe
provide let popcnt = (value: Int64) => {
  let nv = WasmI64.load(WasmI32.fromGrain(value), 8n)
  let ptr = newInt64(WasmI64.popcnt(nv))
  WasmI32.toGrain(ptr): Int64
}

// Exponentiation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring special path for int^int
let rec expBySquaring = (y, x, n) => {
  if (n == 0L) {
    1L
  } else if (n == 1L) {
    x * y
  } else if (n % 2L == 0L) {
    expBySquaring(y, x * x, n / 2L)
  } else {
    expBySquaring(x * y, x * x, (n - 1L) / 2L)
  }
}

/**
 * Computes the exponentiation of the given base and power.
 *
 * @param base: The base number
 * @param power: The exponent number
 * @returns The base raised to the given power
 *
 * @example
 * from Int64 use { (**) }
 * assert 2L ** 3L == 8L
 *
 * @since v0.6.0
 */
provide let (**) = (base, power) => {
  if (power < 0L)
    return expBySquaring(1L, 1L / base, power * -1L)
  else
    return expBySquaring(1L, base, power)
}
