/**
 * Utilities for working with the Float64 type.
 *
 * @example include "float64"
 *
 * @since v0.2.0
 */

module Float64

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/wasmf64"
from WasmF64 use { (-), (+), (*), (/), (<), (<=), (>), (>=) }
include "runtime/dataStructures"
from DataStructures use { newFloat64 }

include "runtime/numbers"
from Numbers use {
  coerceNumberToFloat64 as fromNumber,
  coerceFloat64ToNumber as toNumber,
}

/**
 * Infinity represented as a Float64 value.
 *
 * @since v0.4.0
 */
@unsafe
provide let infinity = {
  let ptr = newFloat64(
    WasmF64.reinterpretI64(
      0b0111111111110000000000000000000000000000000000000000000000000000N
    )
  )
  WasmI32.toGrain(ptr): Float64
}

/**
 * NaN (Not a Number) represented as a Float64 value.
 *
 * @since v0.4.0
 */
@unsafe
provide let nan = {
  let ptr = newFloat64(
    WasmF64.reinterpretI64(
      0b0111111111110000000000000000000000000000000000000000000000000001N
    )
  )
  WasmI32.toGrain(ptr): Float64
}

/**
 * Pi represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let pi = 3.141592653589793d

/**
 * Tau represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let tau = 6.283185307179586d

/**
 * Euler's number represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let e = 2.718281828459045d

provide { fromNumber, toNumber }

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let add = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv + yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let sub = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv - yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let mul = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv * yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the quotient of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of the two operands
 *
 * @since v0.2.0
 */
@unsafe
provide let div = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv / yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let lt = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let gt = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let lte = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.2.0
 */
@unsafe
provide let gte = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv >= yv
}
