/**
 * Utilities for working with the Float64 type.
 *
 * @example from "float64" include Float64
 *
 * @example 5.0d
 * @example -5.0d
 * @example Infinityd
 * @example NaNd
 *
 * @since v0.2.0
 */
module Float64

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmf64" include WasmF64
use WasmF64.{ (-), (+), (*), (/), (<), (<=), (>), (>=) }
from "runtime/dataStructures" include DataStructures
use DataStructures.{ newFloat64 }

from "runtime/numbers" include Numbers
use Numbers.{
  coerceNumberToFloat64 as fromNumber,
  coerceFloat64ToNumber as toNumber,
}

/**
 * Infinity represented as a Float64 value.
 * This is an alternative to the `Infinityd` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let infinity = Infinityd

/**
 * NaN (Not a Number) represented as a Float64 value.
 * This is an alternative to the `NaNd` literal.
 *
 * @since v0.4.0
 */
@unsafe
provide let nan = NaNd

/**
 * Pi represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let pi = 3.141592653589793d

/**
 * Tau represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let tau = 6.283185307179586d

/**
 * Euler's number represented as a Float64 value.
 *
 * @since v0.5.2
 */
provide let e = 2.718281828459045d

provide { fromNumber, toNumber }

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @example
 * use Float64.{ (+) }
 * assert 1.0d + 1.0d == 2.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `add`
 */
@unsafe
provide let (+) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv + yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @example
 * use Float64.{ (-) }
 * assert 5.0d - 4.0d == 1.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `sub`
 */
@unsafe
provide let (-) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv - yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @example
 * use Float64.{ (*) }
 * assert -5.0d * 4.0d == -20.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `mul`
 */
@unsafe
provide let (*) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv * yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Computes the quotient of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of the two operands
 *
 * @example
 * use Float64.{ (/) }
 * assert 25.0d / 4.0d == 6.25d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `div`
 */
@unsafe
provide let (/) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  let ptr = newFloat64(xv / yv)
  WasmI32.toGrain(ptr): Float64
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @example
 * use Float64.{ (<) }
 * assert -5.0d < 5.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lt`
 */
@unsafe
provide let (<) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv < yv
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @example
 * use Float64.{ (>) }
 * assert 6.0d > 5.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gt`
 */
@unsafe
provide let (>) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv > yv
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float64.{ (<=) }
 * assert 1.0d <= 2.0d
 *
 * @example
 * use Float64.{ (<=) }
 * assert 2.0d <= 2.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `lte`
 */
@unsafe
provide let (<=) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv <= yv
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @example
 * use Float64.{ (>=) }
 * assert 5.0d >= 2.0d
 *
 * @example
 * use Float64.{ (>=) }
 * assert -1.0d >= -1.0d
 *
 * @since v0.6.0
 * @history v0.2.0: Originally named `gte`
 */
@unsafe
provide let (>=) = (x: Float64, y: Float64) => {
  let xv = WasmF64.load(WasmI32.fromGrain(x), 8n)
  let yv = WasmF64.load(WasmI32.fromGrain(y), 8n)
  xv >= yv
}
